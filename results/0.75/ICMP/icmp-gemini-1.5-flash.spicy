module icmp;

type icmp_header {
    uint8 type;
    uint8 code;
    uint16 checksum;
    switch(type) {
        case 0:  # Echo Reply
            uint16 identifier;
            uint16 sequence_number;
        case 8:  # Echo Request
            uint16 identifier;
            uint16 sequence_number;
        case 3:  # Destination Unreachable
            uint32 unused;
            ip original_ip_header;
        case 11: # Time Exceeded
            uint32 unused;
            ip original_ip_header;
        case 5: # Redirect
            uint8 redirect_type;
            ipv4 gateway_ip_address;
        case 13: # Timestamp Request
            uint32 origin_timestamp;
            uint32 receive_timestamp;
            uint32 transmit_timestamp;
        case 14: # Timestamp Reply
            uint32 origin_timestamp;
            uint32 receive_timestamp;
            uint32 transmit_timestamp;
        case 15: # Information Request
            uint32 unused;
            ipv4 address_mask;
        case 16: # Information Reply
            uint32 unused;
            ipv4 address_mask;
        case 17: # Address Mask Request
            uint32 unused;
            ipv4 address_mask;
        case 18: # Address Mask Reply
            uint32 unused;
            ipv4 address_mask;
        case 12: # Parameter problem
            uint8 pointer;
            bytes data;
        default:
            bytes data;
    }
}

type ip {
    uint8 version;
    uint8 ihl;
    uint8 tos;
    uint16 total_length;
    uint16 identification;
    uint16 flags_and_fragment_offset;
    uint8 ttl;
    uint8 protocol;
    uint16 header_checksum;
    ipv4 source_address;
    ipv4 destination_address;
    bytes options;
}

type ipv4 {
    uint32 address;
}
