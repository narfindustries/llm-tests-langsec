module ICMP;

public type ICMPHeader = unit {
    type: uint8;
    code: uint8;
    checksum: uint16;
    rest_of_header: Payload(type);
};

type Payload = unit(type: uint8) {
    // Echo Request and Echo Reply
    echo: echo_payload &if (type == 0 || type == 8);

    // Destination Unreachable
    destination_unreachable: destination_unreachable_payload &if (type == 3);

    // Redirect
    redirect: redirect_payload &if (type == 5);

    // Time Exceeded
    time_exceeded: time_exceeded_payload &if (type == 11);

    // Parameter Problem
    parameter_problem: parameter_problem_payload &if (type == 12);

    // Timestamp and Timestamp Reply
    timestamp: timestamp_payload &if (type == 13 || type == 14);

    // Address Mask Request and Reply
    address_mask: address_mask_payload &if (type == 17 || type == 18);

    // Default case for unknown or not specifically implemented types
    raw_data: bytes &rest_of_data;
};

type echo_payload = unit {
    id: uint16;
    sequence: uint16;
};

type destination_unreachable_payload = unit {
    unused: uint32;
};

type redirect_payload = unit {
    gateway_internet_address: uint32;
};

type time_exceeded_payload = unit {
    unused: uint32;
};

type parameter_problem_payload = unit {
    pointer: uint8;
    unused: bytes &length=3;
};

type timestamp_payload = unit {
    originate_timestamp: uint32;
    receive_timestamp: uint32;
    transmit_timestamp: uint32;
};

type address_mask_payload = unit {
    address_mask: uint32;
};