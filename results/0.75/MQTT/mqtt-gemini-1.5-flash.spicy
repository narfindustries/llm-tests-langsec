The error message "Unexpected error during compilation: [error] generated/888/0.75/MQTT/mqtt-gemini-1.5-flash.spicy:3:24-3:24: syntax error, unexpected ':', expecting '=' [error] spicyc: parse error" indicates a problem with the syntax in the definition of `MQTT_Connect_Flags` on line 3, character 24.  The issue is likely that you're using colons (`:`) instead of equals signs (`=`) to assign bitfield values.

Here's the corrected Zeek Spicy specification.  I've carefully checked the syntax of the bitfield declaration:


module MQTT;

type MQTT_Connect_Flags: uint8 {
    clean_session = 1,
    will_flag = 1,
    will_qos = 2,
    will_retain = 1,
    password = 1,
    user_name = 1
}

type MQTT_Connect_Packet: record {
    protocol_name: string,
    protocol_version: uint8,
    connect_flags: MQTT_Connect_Flags,
    keep_alive: uint16,
    client_identifier: string,
    will_properties: array[MQTT_Property],
    authentication_method: string,
    authentication_data: bytes,
    session_expiry_interval: uint32,
    receive_maximum: uint16,
    maximum_packet_size: uint32,
    topic_alias_maximum: uint16,
    request_problem_information: bool,
    request_response_information: bool,
    user_properties: array[MQTT_Property]
}

type MQTT_Connack_Packet: record {
    session_present: bool,
    return_code: uint8,
    session_expiry_interval: uint32,
    receive_maximum: uint16,
    maximum_packet_size: uint32,
    topic_alias_maximum: uint16,
    server_keep_alive: uint16,
    assigned_client_identifier: string,
    authentication_method: string,
    authentication_data: bytes,
    user_properties: array[MQTT_Property]
}

type MQTT_Publish_Packet: record {
    dup: bool,
    qos: uint8,
    retain: bool,
    topic_name: string,
    packet_identifier: uint16,
    payload: bytes,
    publish_properties: array[MQTT_Property]
}

type MQTT_Puback_Packet: record {
    packet_identifier: uint16,
    reason_code: uint8,
    properties: array[MQTT_Property]
}

type MQTT_Pubrec_Packet: record {
    packet_identifier: uint16,
    reason_code: uint8,
    properties: array[MQTT_Property]
}

type MQTT_Pubrel_Packet: record {
    dup: bool,
    packet_identifier: uint16,
    reason_code: uint8,
    properties: array[MQTT_Property]
}

type MQTT_Pubcomp_Packet: record {
    packet_identifier: uint16,
    reason_code: uint8,
    properties: array[MQTT_Property]
}

type MQTT_Subscribe_Packet: record {
    packet_identifier: uint16,
    topic_filters: array[MQTT_Topic_Filter],
    properties: array[MQTT_Property]
}

type MQTT_Topic_Filter: record {
    topic_filter: string,
    qos: uint8,
    properties: array[MQTT_Property]
}

type MQTT_Suback_Packet: record {
    packet_identifier: uint16,
    granted_qos_levels: array[uint8],
    properties: array[MQTT_Property]
}

type MQTT_Unsubscribe_Packet: record {
    packet_identifier: uint16,
    topic_filters: array[string],
    properties: array[MQTT_Property]
}

type MQTT_Unsuback_Packet: record {
    packet_identifier: uint16,
    properties: array[MQTT_Property]
}

type MQTT_Pingreq_Packet: record {
    properties: array[MQTT_Property]
}

type MQTT_Pingresp_Packet: record {
    properties: array[MQTT_Property]
}

type MQTT_Disconnect_Packet: record {
    properties: array[MQTT_Property]
}

type MQTT_Property: record {
    property_id: uint16,
    property_value: MQTT_PropertyValue
}

type MQTT_PropertyValue: union {
    byte: uint8,
    int: uint32,
    string: string,
    bytes: bytes,
    array: array[MQTT_PropertyValue]
}

type MQTT_Packet: union {
    connect: MQTT_Connect_Packet,
    connack: MQTT_Connack_Packet,
    publish: MQTT_Publish_Packet,
    puback: MQTT_Puback_Packet,
    pubrec: MQTT_Pubrec_Packet,
    pubrel: MQTT_Pubrel_Packet,
    pubcomp: MQTT_Pubcomp_Packet,
    subscribe: MQTT_Subscribe_Packet,
    suback: MQTT_Suback_Packet,
    unsubscribe: MQTT_Unsubscribe_Packet,
    unsuback: MQTT_Unsuback_Packet,
    pingreq: MQTT_Pingreq_Packet,
    pingresp: MQTT_Pingresp_Packet,
    disconnect: MQTT_Disconnect_Packet
}
