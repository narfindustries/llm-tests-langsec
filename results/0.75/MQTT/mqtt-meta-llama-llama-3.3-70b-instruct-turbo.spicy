module MQTT;

type mqtt_fixed_header = Record {
  dup = bool;
  qos = uint4;
  retain = bool;
  remaining = uint32;
}

type mqtt_connect_flags = Record {
  clean_start = bool;
  will_flag = bool;
  will_qos = uint2;
  will_retain = bool;
  password_flag = bool;
  username_flag = bool;
  reserved = uint3;
}

type mqtt_connect_properties = Record {
  session_expiry_interval = optional uint32;
  receive_maximum = optional uint16;
  maximum_qos = optional uint2;
  retain_available = optional bool;
  user_properties = vector(string, string);
  authentication_method = optional string;
  authentication_data = optional binary;
  request_response_info = optional bool;
  request_problem_info = optional bool;
  server_keep_alive = optional uint16;
  topic_alias_maximum = optional uint16;
}

type mqtt_connect = Record {
  protocol_name = string;
  protocol_version = uint8;
  connect_flags = mqtt_connect_flags;
  keep_alive = uint16;
  properties = mqtt_connect_properties;
  client_id = string;
  will_topic = optional string;
  will_payload = optional binary;
  username = optional string;
  password = optional binary;
}

type mqtt_connack_properties = Record {
  session_expiry_interval = optional uint32;
  receive_maximum = optional uint16;
  maximum_qos = optional uint2;
  retain_available = optional bool;
  user_properties = vector(string, string);
  server_reference = optional string;
}

type mqtt_connack = Record {
  session_present = bool;
  connect_reason_code = uint8;
  properties = mqtt_connack_properties;
}

type mqtt_publish_properties = Record {
  payload_format_indicator = optional bool;
  message_expiry_interval = optional uint32;
  topic_alias = optional uint16;
  response_topic = optional string;
  correlation_data = optional binary;
  user_properties = vector(string, string);
  content_type = optional string;
}

type mqtt_publish = Record {
  topic_name = string;
  packet_identifier = optional uint16;
  properties = mqtt_publish_properties;
  payload = binary;
}

type mqtt_puback_properties = Record {
  reason_code = uint8;
  user_properties = vector(string, string);
}

type mqtt_puback = Record {
  packet_identifier = uint16;
  reason_code = uint8;
  properties = mqtt_puback_properties;
}

type mqtt_pubrec_properties = Record {
  reason_code = uint8;
  user_properties = vector(string, string);
}

type mqtt_pubrec = Record {
  packet_identifier = uint16;
  reason_code = uint8;
  properties = mqtt_pubrec_properties;
}

type mqtt_pubrel_properties = Record {
  reason_code = uint8;
  user_properties = vector(string, string);
}

type mqtt_pubrel = Record {
  packet_identifier = uint16;
  reason_code = uint8;
  properties = mqtt_pubrel_properties;
}

type mqtt_pubcomp_properties = Record {
  reason_code = uint8;
  user_properties = vector(string, string);
}

type mqtt_pubcomp = Record {
  packet_identifier = uint16;
  reason_code = uint8;
  properties = mqtt_pubcomp_properties;
}

type mqtt_subscribe_properties = Record {
  user_properties = vector(string, string);
}

type mqtt_subscribe_topic = Record {
  topic_filter = string;
  qos = uint2;
  nl = optional bool;
  rap = optional bool;
  rh = optional uint2;
  subscription_identifier = optional uint32;
}

type mqtt_subscribe = Record {
  packet_identifier = uint16;
  properties = mqtt_subscribe_properties;
  subscriptions = vector(mqtt_subscribe_topic);
}

type mqtt_suback_properties = Record {
  user_properties = vector(string, string);
}

type mqtt_suback_reason_code = Record {
  byte1 = uint4;
  reason_code = uint4;
  subscription_identifier = optional uint32;
}

type mqtt_suback = Record {
  packet_identifier = uint16;
  properties = mqtt_suback_properties;
  reason_codes = vector(mqtt_suback_reason_code);
}

type mqtt_unsubscribe_properties = Record {
  user_properties = vector(string, string);
}

type mqtt_unsubscribe_topic = Record {
  topic_filter = string;
  subscription_identifier = optional uint32;
}

type mqtt_unsubscribe = Record {
  packet_identifier = uint16;
  properties = mqtt_unsubscribe_properties;
  unsubscribes = vector(mqtt_unsubscribe_topic);
}

type mqtt_unsuback_properties = Record {
  user_properties = vector(string, string);
}

type mqtt_unsuback = Record {
  packet_identifier = uint16;
  properties = mqtt_unsuback_properties;
}

type mqtt_disconnect_reason_code = Record {
  reason_code = uint8;
  session_expiry_interval = optional uint32;
  server_reference = optional string;
  user_properties = vector(string, string);
}

type mqtt_disconnect = Record {
  reason_code = uint8;
  properties = mqtt_disconnect_reason_code;
}

type mqtt_auth_properties = Record {
  reason_code = uint8;
  authentication_method = optional string;
  authentication_data = optional binary;
  user_properties = vector(string, string);
}

type mqtt_auth = Record {
  reason_code = uint8;
  properties = mqtt_auth_properties;
}

type mqtt_message = Record {
  fixed_header = mqtt_fixed_header;
  connect = optional mqtt_connect;
  connack = optional mqtt_connack;
  publish = optional mqtt_publish;
  puback = optional mqtt_puback;
  pubrec = optional mqtt_pubrec;
  pubrel = optional mqtt_pubrel;
  pubcomp = optional mqtt_pubcomp;
  subscribe = optional mqtt_subscribe;
  suback = optional mqtt_suback;
  unsubscribe = optional mqtt_unsubscribe;
  unsuback = optional mqtt_unsuback;
  disconnect = optional mqtt_disconnect;
  auth = optional mqtt_auth;
}

let mqtt_parser = parser mqtt_message;
let mqtt_serializer = serializer mqtt_message;