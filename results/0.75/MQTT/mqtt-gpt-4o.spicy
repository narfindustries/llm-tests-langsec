module MQTT;

import spicy;
import zeek;

type ControlPacketType = uint8 &enum {
    CONNECT = 1,
    CONNACK = 2,
    PUBLISH = 3,
    PUBACK = 4,
    PUBREC = 5,
    PUBREL = 6,
    PUBCOMP = 7,
    SUBSCRIBE = 8,
    SUBACK = 9,
    UNSUBSCRIBE = 10,
    UNSUBACK = 11,
    PINGREQ = 12,
    PINGRESP = 13,
    DISCONNECT = 14,
    AUTH = 15
};

type ConnectFlags = bitfield {
    reserved: uint8 &bits=1;
    clean_start: uint8 &bits=1;
    will_flag: uint8 &bits=1;
    will_qos: uint8 &bits=2;
    will_retain: uint8 &bits=1;
    password_flag: uint8 &bits=1;
    user_name_flag: uint8 &bits=1;
};

type VariableByteInteger = unit {
    varint: uint32 &convert=decode_variable_byte_integer;
} &byteorder=bigendian;

function decode_variable_byte_integer(raw: bytes): uint32 {
    local multiplier = 1;
    local value = 0;
    for ( local byte in raw ) {
        local digit = byte & 0x7F;
        value += digit * multiplier;
        if ( (byte & 0x80) == 0 )
            break;
        multiplier *= 128;
    }
    return value;
}

type Properties = unit {
    length: VariableByteInteger;
    properties: bytes &length=length.varint;
};

type MQTTHeader = unit {
    packet_type: ControlPacketType;
    flags: uint8;
    remaining_length: VariableByteInteger;
};

type MQTTMessage = unit {
    header: MQTTHeader;
    body: switch (header.packet_type) {
        CONNECT      => ConnectMessage,
        CONNACK      => ConnackMessage,
        PUBLISH      => PublishMessage,
        PUBACK       => PubackMessage,
        PUBREC       => PubrecMessage,
        PUBREL       => PubrelMessage,
        PUBCOMP      => PubcompMessage,
        SUBSCRIBE    => SubscribeMessage,
        SUBACK       => SubackMessage,
        UNSUBSCRIBE  => UnsubscribeMessage,
        UNSUBACK     => UnsubackMessage,
        PINGREQ      => PingreqMessage,
        PINGRESP     => PingrespMessage,
        DISCONNECT   => DisconnectMessage,
        AUTH         => AuthMessage
    };
};

type ConnectMessage = unit {
    protocol_name: string &length=4;
    protocol_level: uint8;
    connect_flags: ConnectFlags;
    keep_alive: uint16;
    properties: Properties;
    client_id: string;
    optional_fields: bytes &optional;
};

type ConnackMessage = unit {
    session_present: uint8 &bits=1;
    reason_code: uint8;
    properties: Properties;
};

type PublishMessage = unit {
    dup: uint8 &bits=1;
    qos: uint8 &bits=2;
    retain: uint8 &bits=1;
    topic_name: string;
    packet_identifier: uint16 &optional;
    properties: Properties;
    payload: bytes &restofdata;
};

type PubackMessage = unit {
    packet_identifier: uint16;
    reason_code: uint8;
    properties: Properties;
};

type PubrecMessage = unit {
    packet_identifier: uint16;
    reason_code: uint8;
    properties: Properties;
};

type PubrelMessage = unit {
    packet_identifier: uint16;
    reason_code: uint8;
    properties: Properties;
};

type PubcompMessage = unit {
    packet_identifier: uint16;
    reason_code: uint8;
    properties: Properties;
};

type SubscribeMessage = unit {
    packet_identifier: uint16;
    properties: Properties;
    topic_filters: array of TopicFilter;
};

type TopicFilter = unit {
    topic_filter: string;
    subscription_options: uint8;
};

type SubackMessage = unit {
    packet_identifier: uint16;
    properties: Properties;
    reason_codes: array of uint8;
};

type UnsubscribeMessage = unit {
    packet_identifier: uint16;
    properties: Properties;
    topic_filters: array of string;
};

type UnsubackMessage = unit {
    packet_identifier: uint16;
    properties: Properties;
    reason_codes: array of uint8;
};

type PingreqMessage = unit {
};

type PingrespMessage = unit {
};

type DisconnectMessage = unit {
    reason_code: uint8;
    properties: Properties;
};

type AuthMessage = unit {
    reason_code: uint8;
    properties: Properties;
};

public type MQTT = unit {
    messages: array of MQTTMessage;
};