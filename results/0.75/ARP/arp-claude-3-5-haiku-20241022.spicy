module ARP;

import spicy;

public type EthernetHeader = unit {
    dst_mac: bytes &length=6;
    src_mac: bytes &length=6;
    ether_type: uint16;
};

public type ARPPacket = unit {
    hardware_type: uint16;
    protocol_type: uint16;
    hardware_addr_len: uint8;
    protocol_addr_len: uint8;
    operation: uint16;
    sender_hardware_addr: bytes &length=(self.hardware_addr_len);
    sender_protocol_addr: bytes &length=(self.protocol_addr_len);
    target_hardware_addr: bytes &length=(self.hardware_addr_len);
    target_protocol_addr: bytes &length=(self.protocol_addr_len);

    on %init {
        self.validate();
    }

    function validate() {
        if ( self.hardware_type != 1 )
            throw spicy::ParseError("Unsupported hardware type");
        
        if ( self.protocol_type != 0x0800 )
            throw spicy::ParseError("Unsupported protocol type");
        
        if ( self.hardware_addr_len != 6 )
            throw spicy::ParseError("Invalid hardware address length");
        
        if ( self.protocol_addr_len != 4 )
            throw spicy::ParseError("Invalid protocol address length");
        
        if ( self.operation != 1 && self.operation != 2 )
            throw spicy::ParseError("Invalid ARP operation");
    }
};

public type ARPFrame = unit {
    ethernet_header: EthernetHeader where $$.ether_type == 0x0806;
    arp_packet: ARPPacket;
};