module HTTP;

import zeek;

type Version = enum {
    HTTP_1_0 = 0,
    HTTP_1_1 = 1
};

type Method = enum {
    GET = 0,
    POST = 1,
    PUT = 2,
    DELETE = 3,
    HEAD = 4,
    OPTIONS = 5,
    TRACE = 6,
    CONNECT = 7,
    PATCH = 8
};

type StatusCode = uint16;

const StatusCodes = {
    100: "Continue",
    101: "Switching_Protocols",
    200: "OK",
    201: "Created",
    202: "Accepted",
    203: "Non_Authoritative_Information",
    204: "No_Content",
    205: "Reset_Content",
    206: "Partial_Content",
    300: "Multiple_Choices",
    301: "Moved_Permanently",
    302: "Found",
    303: "See_Other",
    304: "Not_Modified",
    305: "Use_Proxy",
    307: "Temporary_Redirect",
    400: "Bad_Request",
    401: "Unauthorized",
    402: "Payment_Required",
    403: "Forbidden",
    404: "Not_Found",
    405: "Method_Not_Allowed",
    406: "Not_Acceptable",
    407: "Proxy_Authentication_Required",
    408: "Request_Timeout",
    409: "Conflict",
    410: "Gone",
    411: "Length_Required",
    412: "Precondition_Failed",
    413: "Payload_Too_Large",
    414: "URI_Too_Long",
    415: "Unsupported_Media_Type",
    416: "Range_Not_Satisfiable",
    417: "Expectation_Failed",
    426: "Upgrade_Required",
    500: "Internal_Server_Error",
    501: "Not_Implemented",
    502: "Bad_Gateway",
    503: "Service_Unavailable",
    504: "Gateway_Timeout",
    505: "HTTP_Version_Not_Supported"
};

type Header = record {
    name: string;
    value: string;
};

type Request = record {
    method: Method;
    uri: string;
    version: Version;
    headers: vector<Header>;
    body: string &optional;
};

type Response = record {
    version: Version;
    status_code: StatusCode;
    reason_phrase: string;
    headers: vector<Header>;
    body: string &optional;
};

on HTTP::Request -> event http_request(req: Request);
on HTTP::Response -> event http_response(resp: Response);

function parse_request(data: bytes): Request {
    local req = Request();

    local lines = split(data, "\r\n");
    local first_line = split(lines[0], " ");

    req.method = to_method(first_line[0]);
    req.uri = first_line[1];
    req.version = to_version(first_line[2]);

    local i = 1;
    while (i < len(lines) && lines[i] != "") {
        local header = split(lines[i], ": ");
        req.headers += Header(header[0], header[1]);
        i += 1;
    }

    if (i < len(lines)) {
        req.body = join(lines[i+1:], "\r\n");
    }

    return req;
}

function parse_response(data: bytes): Response {
    local resp = Response();

    local lines = split(data, "\r\n");
    local first_line = split(lines[0], " ");

    resp.version = to_version(first_line[0]);
    resp.status_code = to_status_code(to_int(first_line[1]));
    resp.reason_phrase = join(first_line[2:], " ");

    local i = 1;
    while (i < len(lines) && lines[i] != "") {
        local header = split(lines[i], ": ");
        resp.headers += Header(header[0], header[1]);
        i += 1;
    }

    if (i < len(lines)) {
        resp.body = join(lines[i+1:], "\r\n");
    }

    return resp;
}

function to_method(s: string): Method {
    switch (s) {
        case "GET": return Method::GET;
        case "POST": return Method::POST;
        case "PUT": return Method::PUT;
        case "DELETE": return Method::DELETE;
        case "HEAD": return Method::HEAD;
        case "OPTIONS": return Method::OPTIONS;
        case "TRACE": return Method::TRACE;
        case "CONNECT": return Method::CONNECT;
        case "PATCH": return Method::PATCH;
        default: return Method::GET;
    }
}

function to_version(s: string): Version {
    switch (s) {
        case "HTTP/1.0": return Version::HTTP_1_0;
        case "HTTP/1.1": return Version::HTTP_1_1;
        default: return Version::HTTP_1_1;
    }
}

function to_status_code(i: int): StatusCode {
    return StatusCode(i);
}