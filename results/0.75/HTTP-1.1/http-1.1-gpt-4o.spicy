module http;

import spicy;
import zeek;

type HTTPVersion = unit {
    major: uint8;
    minor: uint8;
};

type RequestLine = unit {
    method: string &until=" ";
    _ws1: bytes &size=1; # Space
    uri: string &until=" ";
    _ws2: bytes &size=1; # Space
    version: string &until="\r";
    _end: bytes &size=2; # CRLF
};

type StatusLine = unit {
    version: string &until=" ";
    _ws1: bytes &size=1; # Space
    status_code: string &until=" ";
    _ws2: bytes &size=1; # Space
    reason_phrase: string &until="\r";
    _end: bytes &size=2; # CRLF
};

type Header = unit {
    name: string &until=":";
    _colon: bytes &size=1; # Colon
    _ws: bytes &size=1; # Space
    value: string &until="\r";
    _end: bytes &size=2; # CRLF
};

type MessageHeaders = unit {
    headers: Header[] &until="\r\n";
    _end: bytes &size=2; # CRLF
};

type HTTPRequest = unit {
    request_line: RequestLine;
    headers: MessageHeaders;
    body: bytes &restofdata; # Body of the message
};

type HTTPResponse = unit {
    status_line: StatusLine;
    headers: MessageHeaders;
    body: bytes &restofdata; # Body of the message
};

type HTTPMessage = unit {
    message: RequestLine | StatusLine;
    headers: MessageHeaders;
    body: bytes &restofdata; # Body of the message
};

public type HTTPProtocol = unit {
    message: HTTPMessage;
};

public module HTTP {
    type Analyzer = zeek::analyzer::Analyzer {
        .connection = HTTPProtocol;
    };
}