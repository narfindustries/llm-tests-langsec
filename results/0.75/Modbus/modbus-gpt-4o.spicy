module Modbus;

type ModbusRequest = unit {
    address: uint8;
    pdu: PDUs &context=function_code;
    crc: uint16;
};

type PDUs = unit (function_code: uint8) {
    function_code: uint8;
    data: switch (function_code) {
        case 0x01    -> ReadCoilsRequest;
        case 0x02    -> ReadDiscreteInputsRequest;
        case 0x03    -> ReadHoldingRegistersRequest;
        case 0x04    -> ReadInputRegistersRequest;
        case 0x05    -> WriteSingleCoilRequest;
        case 0x06    -> WriteSingleRegisterRequest;
        case 0x0F    -> WriteMultipleCoilsRequest;
        case 0x10    -> WriteMultipleRegistersRequest;
        case 0x11    -> ReportServerIDRequest;
        default when (function_code & 0x80 != 0) -> ExceptionResponse;
        default -> bytes &size=0; # Fallback case
    };
};

type ReadCoilsRequest = unit {
    starting_address: uint16;
    quantity_of_coils: uint16;
};

type ReadDiscreteInputsRequest = unit {
    starting_address: uint16;
    quantity_of_inputs: uint16;
};

type ReadHoldingRegistersRequest = unit {
    starting_address: uint16;
    quantity_of_registers: uint16;
};

type ReadInputRegistersRequest = unit {
    starting_address: uint16;
    quantity_of_registers: uint16;
};

type WriteSingleCoilRequest = unit {
    output_address: uint16;
    output_value: uint16;
};

type WriteSingleRegisterRequest = unit {
    register_address: uint16;
    register_value: uint16;
};

type WriteMultipleCoilsRequest = unit {
    starting_address: uint16;
    quantity_of_outputs: uint16;
    byte_count: uint8;
    output_values: bytes &size=byte_count;
};

type WriteMultipleRegistersRequest = unit {
    starting_address: uint16;
    quantity_of_registers: uint16;
    byte_count: uint8;
    register_values: bytes &size=byte_count;
};

type ReportServerIDRequest = unit {
    # Typically has no additional data fields
};

type ExceptionResponse = unit {
    exception_code: uint8;
};