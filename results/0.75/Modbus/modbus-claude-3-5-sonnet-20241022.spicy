module Modbus;

public type MBAP = unit {
    transaction_id: uint16;
    protocol_id: uint16;
    length: uint16;
    unit_id: uint8;
    
    var message_length: uint16;
    
    on length { 
        self.message_length = self.length - 1; 
    }
};

type FunctionCode = enum {
    READ_COILS = 1,
    READ_DISCRETE_INPUTS = 2,
    READ_HOLDING_REGISTERS = 3,
    READ_INPUT_REGISTERS = 4,
    WRITE_SINGLE_COIL = 5,
    WRITE_SINGLE_REGISTER = 6,
    WRITE_MULTIPLE_COILS = 15,
    WRITE_MULTIPLE_REGISTERS = 16,
    READ_FILE_RECORD = 20,
    WRITE_FILE_RECORD = 21,
    MASK_WRITE_REGISTER = 22,
    READ_WRITE_MULTIPLE_REGISTERS = 23,
    READ_FIFO_QUEUE = 24
};

type ExceptionCode = enum {
    ILLEGAL_FUNCTION = 1,
    ILLEGAL_DATA_ADDRESS = 2,
    ILLEGAL_DATA_VALUE = 3,
    SLAVE_DEVICE_FAILURE = 4,
    ACKNOWLEDGE = 5,
    SLAVE_DEVICE_BUSY = 6,
    MEMORY_PARITY_ERROR = 8,
    GATEWAY_PATH_UNAVAILABLE = 10,
    GATEWAY_TARGET_DEVICE_FAILED = 11
};

public type PDU = unit {
    function_code: uint8;
    
    switch (function_code) {
        1, 2, 3, 4 -> read_request: ReadRequest;
        5 -> write_coil: WriteCoilRequest;
        6 -> write_register: WriteRegisterRequest;
        15 -> write_multiple_coils: WriteMultipleCoilsRequest;
        16 -> write_multiple_registers: WriteMultipleRegistersRequest;
        * -> error_response: ErrorResponse;
    };
};

type ReadRequest = unit {
    starting_address: uint16;
    quantity: uint16;
};

type WriteCoilRequest = unit {
    output_address: uint16;
    output_value: uint16;
};

type WriteRegisterRequest = unit {
    register_address: uint16;
    register_value: uint16;
};

type WriteMultipleCoilsRequest = unit {
    starting_address: uint16;
    quantity: uint16;
    byte_count: uint8;
    values: bytes &size=byte_count;
};

type WriteMultipleRegistersRequest = unit {
    starting_address: uint16;
    quantity: uint16;
    byte_count: uint8;
    values: bytes &size=byte_count;
};

type ErrorResponse = unit {
    exception_code: uint8;
};

public type ModbusRTU = unit {
    address: uint8;
    pdu: PDU;
    crc: uint16;
};

public type ModbusASCII = unit {
    start_delimiter: uint8;
    address: uint8;
    pdu: PDU;
    lrc: uint16;
    end_delimiter: bytes &size=2;
};

public type ModbusTCP = unit {
    mbap: MBAP;
    pdu: PDU;
};