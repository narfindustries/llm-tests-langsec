module Modbus;

type ModbusPDU: record {
  transaction_id: uint16;
  protocol_id: uint16;
  length: uint16;
  unit_id: uint8;
  function_code: uint8;
  data: bytes;
};

type ModbusTCP: record {
  header: ModbusPDU;
};

type ModbusRTU: record {
  header: ModbusPDU;
};

type ModbusASCII: record {
  header: ModbusPDU;
};

global modbus_function_codes = {
  0x01: "Read Coils",
  0x02: "Read Discrete Inputs",
  0x03: "Read Holding Registers",
  0x04: "Read Input Registers",
  0x05: "Write Single Coil",
  0x06: "Write Single Register",
  0x0f: "Write Multiple Coils",
  0x10: "Write Multiple Registers",
  // Add other function codes here as needed...
};

event modbus_event(pdu: ModbusPDU) {
  local function_code_str = lookup(modbus_function_codes, pdu.function_code);
  if (function_code_str != undef) {
    print fmt("Modbus Function: %s", function_code_str);
  } else {
    print fmt("Modbus Function: Unknown (0x%x)", pdu.function_code);
  }
  // Add more detailed parsing and analysis based on pdu.function_code here.
  // For example, parse the data field based on the function code to extract
  // specific values like coil status, register values, etc.

  if (pdu.function_code >= 0x80) {
    print fmt("Modbus Exception Response: 0x%x", pdu.function_code);
    // Handle Modbus exception responses (error codes)
  }
}

event modbus_tcp_event(pkt: ModbusTCP) {
    modbus_event(pkt.header);
}

event modbus_rtu_event(pkt: ModbusRTU) {
    modbus_event(pkt.header);
}

event modbus_ascii_event(pkt: ModbusASCII) {
    modbus_event(pkt.header);
}
