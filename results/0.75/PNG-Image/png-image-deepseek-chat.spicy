module PNG;

import spicy;

public type PNG_File = unit {
    magic: bytes &size=8;
    chunks: Chunk[] &until($input.size() == 0);
};

type Chunk = unit {
    length: uint32;
    type: bytes &size=4;
    data: bytes &size=length;
    crc: uint32;
};

type IHDR = unit {
    width: uint32;
    height: uint32;
    bit_depth: uint8;
    color_type: uint8;
    compression_method: uint8;
    filter_method: uint8;
    interlace_method: uint8;
} &convert=Chunk &requires(type == "IHDR");

type IDAT = unit {
    data: bytes &size=length;
} &convert=Chunk &requires(type == "IDAT");

type IEND = unit {
} &convert=Chunk &requires(type == "IEND");

type PLTE = unit {
    entries: bytes &size=length;
} &convert=Chunk &requires(type == "PLTE");

type tRNS = unit {
    data: bytes &size=length;
} &convert=Chunk &requires(type == "tRNS");

type gAMA = unit {
    gamma: uint32;
} &convert=Chunk &requires(type == "gAMA");

type cHRM = unit {
    white_point_x: uint32;
    white_point_y: uint32;
    red_x: uint32;
    red_y: uint32;
    green_x: uint32;
    green_y: uint32;
    blue_x: uint32;
    blue_y: uint32;
} &convert=Chunk &requires(type == "cHRM");

type sRGB = unit {
    rendering_intent: uint8;
} &convert=Chunk &requires(type == "sRGB");

type iCCP = unit {
    profile_name: bytes &until=0x00;
    compression_method: uint8;
    compressed_profile: bytes &size=length-1-profile_name.size();
} &convert=Chunk &requires(type == "iCCP");

type tEXt = unit {
    keyword: bytes &until=0x00;
    text: bytes &size=length-1-keyword.size();
} &convert=Chunk &requires(type == "tEXt");

type zTXt = unit {
    keyword: bytes &until=0x00;
    compression_method: uint8;
    compressed_text: bytes &size=length-1-keyword.size();
} &convert=Chunk &requires(type == "zTXt");

type iTXt = unit {
    keyword: bytes &until=0x00;
    compression_flag: uint8;
    compression_method: uint8;
    language_tag: bytes &until=0x00;
    translated_keyword: bytes &until=0x00;
    text: bytes &size=length-1-keyword.size()-1-1-language_tag.size()-1-translated_keyword.size();
} &convert=Chunk &requires(type == "iTXt");

type bKGD = unit {
    data: bytes &size=length;
} &convert=Chunk &requires(type == "bKGD");

type hIST = unit {
    data: bytes &size=length;
} &convert=Chunk &requires(type == "hIST");

type pHYs = unit {
    pixels_per_unit_x: uint32;
    pixels_per_unit_y: uint32;
    unit_specifier: uint8;
} &convert=Chunk &requires(type == "pHYs");

type sPLT = unit {
    palette_name: bytes &until=0x00;
    sample_depth: uint8;
    entries: bytes &size=length-1-palette_name.size();
} &convert=Chunk &requires(type == "sPLT");

type tIME = unit {
    year: uint16;
    month: uint8;
    day: uint8;
    hour: uint8;
    minute: uint8;
    second: uint8;
} &convert=Chunk &requires(type == "tIME");

type UnknownChunk = unit {
    data: bytes &size=length;
} &convert=Chunk;