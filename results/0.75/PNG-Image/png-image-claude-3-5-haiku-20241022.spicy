module PNG;

import spicy;

public type File = unit {
    signature: bytes &size=8 &validate(self == b"\x89PNG\r\n\x1a\n");
    
    ihdr: IHDR;
    chunks: Chunk[] &until($input.eof());
    
    type IHDR = unit {
        width: uint32;
        height: uint32;
        bit_depth: uint8 &validate(
            self == 1 || self == 2 || self == 4 || self == 8 || self == 16
        );
        color_type: uint8 &validate(
            self == 0 || self == 2 || self == 3 || self == 4 || self == 6
        );
        compression_method: uint8 &validate(self == 0);
        filter_method: uint8 &validate(self == 0);
        interlace_method: uint8 &validate(self == 0 || self == 1);
    };
    
    type Chunk = unit {
        length: uint32;
        chunk_type: bytes &size=4;
        data: bytes &size=self.length;
        crc: uint32;
        
        switch (self.chunk_type.decode()) {
            "PLTE" -> plte: PLTE;
            "tRNS" -> trns: Transparency;
            "cHRM" -> chrm: Chromaticity;
            "gAMA" -> gama: Gamma;
            "iCCP" -> iccp: ICCProfile;
            "sBIT" -> sbit: SignificantBits;
            "sRGB" -> srgb: StandardRGB;
            "tEXt" -> text: TextualData;
            "zTXt" -> ztxt: CompressedTextualData;
            "iTXt" -> itxt: InternationalTextualData;
            "bKGD" -> bkgd: BackgroundColor;
            "pHYs" -> phys: PhysicalPixelDimensions;
            "sPLT" -> splt: SuggestedPalette;
            "hIST" -> hist: PaletteHistogram;
            "tIME" -> time: LastModificationTime;
            "IDAT" -> idat: ImageData;
            "IEND" -> iend: ImageTrailer;
            * -> unknown: UnknownChunk;
        }
    };
    
    type UnknownChunk = unit {
        raw_data: bytes &size=self.parent.length;
    };
    
    type PLTE = unit {
        entries: Palette[] &count=(self.parent.length / 3);
    };
    
    type Palette = unit {
        red: uint8;
        green: uint8;
        blue: uint8;
    };
    
    type Transparency = unit { 
        data: bytes &size=self.parent.length; 
    };
    
    type Chromaticity = unit {
        white_x: uint32;
        white_y: uint32;
        red_x: uint32;
        red_y: uint32;
        green_x: uint32;
        green_y: uint32;
        blue_x: uint32;
        blue_y: uint32;
    };
    
    type Gamma = unit {
        gamma_value: uint32;
    };
    
    type ICCProfile = unit {
        profile_name: string &null_terminated;
        compression_method: uint8;
        compressed_profile: bytes;
    };
    
    type SignificantBits = unit {
        data: bytes &size=self.parent.length;
    };
    
    type StandardRGB = unit {
        rendering_intent: uint8;
    };
    
    type TextualData = unit {
        keyword: string &null_terminated;
        text: string;
    };
    
    type CompressedTextualData = unit {
        keyword: string &null_terminated;
        compression_method: uint8;
        compressed_text: bytes;
    };
    
    type InternationalTextualData = unit {
        keyword: string &null_terminated;
        compression_flag: uint8;
        compression_method: uint8;
        language_tag: string &null_terminated;
        translated_keyword: string &null_terminated;
        text: string;
    };
    
    type BackgroundColor = unit {
        data: bytes &size=self.parent.length;
    };
    
    type PhysicalPixelDimensions = unit {
        pixels_per_unit_x: uint32;
        pixels_per_unit_y: uint32;
        unit_specifier: uint8;
    };
    
    type SuggestedPalette = unit {
        palette_name: string &null_terminated;
        sample_depth: uint8;
        entries: PaletteEntry[] &until($input.eof());
    };
    
    type PaletteEntry = unit {
        red: uint16;
        green: uint16;
        blue: uint16;
        alpha: uint16;
        frequency: uint32;
    };
    
    type PaletteHistogram = unit {
        frequencies: uint16[] &count=(self.parent.length / 2);
    };
    
    type LastModificationTime = unit {
        year: uint16;
        month: uint8;
        day: uint8;
        hour: uint8;
        minute: uint8;
        second: uint8;
    };
    
    type ImageData = unit {
        compressed_data: bytes &size=self.parent.length;
    };
    
    type ImageTrailer = unit {};
};