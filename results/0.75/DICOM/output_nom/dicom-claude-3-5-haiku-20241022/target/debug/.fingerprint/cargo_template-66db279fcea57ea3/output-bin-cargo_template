{"$message_type":"diagnostic","message":"the trait bound `(impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<_>), nom::Err<_>>): nom::branch::Alt<_, _, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":637,"byte_end":2567,"line_start":36,"line_end":68,"column_start":9,"column_end":6,"is_primary":true,"text":[{"text":"    alt((","highlight_start":9,"highlight_end":10},{"text":"        map(tag(b\"AE\"), |_| Some(\"Application Entity\".to_string())),","highlight_start":1,"highlight_end":69},{"text":"        map(tag(b\"AS\"), |_| Some(\"Age String\".to_string())),","highlight_start":1,"highlight_end":61},{"text":"        map(tag(b\"AT\"), |_| Some(\"Attribute Tag\".to_string())),","highlight_start":1,"highlight_end":64},{"text":"        map(tag(b\"CS\"), |_| Some(\"Code String\".to_string())),","highlight_start":1,"highlight_end":62},{"text":"        map(tag(b\"DA\"), |_| Some(\"Date\".to_string())),","highlight_start":1,"highlight_end":55},{"text":"        map(tag(b\"DS\"), |_| Some(\"Decimal String\".to_string())),","highlight_start":1,"highlight_end":65},{"text":"        map(tag(b\"DT\"), |_| Some(\"Date Time\".to_string())),","highlight_start":1,"highlight_end":60},{"text":"        map(tag(b\"FL\"), |_| Some(\"Floating Point Single\".to_string())),","highlight_start":1,"highlight_end":72},{"text":"        map(tag(b\"FD\"), |_| Some(\"Floating Point Double\".to_string())),","highlight_start":1,"highlight_end":72},{"text":"        map(tag(b\"IS\"), |_| Some(\"Integer String\".to_string())),","highlight_start":1,"highlight_end":65},{"text":"        map(tag(b\"LO\"), |_| Some(\"Long String\".to_string())),","highlight_start":1,"highlight_end":62},{"text":"        map(tag(b\"LT\"), |_| Some(\"Long Text\".to_string())),","highlight_start":1,"highlight_end":60},{"text":"        map(tag(b\"OB\"), |_| Some(\"Other Byte\".to_string())),","highlight_start":1,"highlight_end":61},{"text":"        map(tag(b\"OD\"), |_| Some(\"Other Double\".to_string())),","highlight_start":1,"highlight_end":63},{"text":"        map(tag(b\"OF\"), |_| Some(\"Other Float\".to_string())),","highlight_start":1,"highlight_end":62},{"text":"        map(tag(b\"OL\"), |_| Some(\"Other Long\".to_string())),","highlight_start":1,"highlight_end":61},{"text":"        map(tag(b\"OW\"), |_| Some(\"Other Word\".to_string())),","highlight_start":1,"highlight_end":61},{"text":"        map(tag(b\"PN\"), |_| Some(\"Person Name\".to_string())),","highlight_start":1,"highlight_end":62},{"text":"        map(tag(b\"SH\"), |_| Some(\"Short String\".to_string())),","highlight_start":1,"highlight_end":63},{"text":"        map(tag(b\"SL\"), |_| Some(\"Signed Long\".to_string())),","highlight_start":1,"highlight_end":62},{"text":"        map(tag(b\"SQ\"), |_| Some(\"Sequence of Items\".to_string())),","highlight_start":1,"highlight_end":68},{"text":"        map(tag(b\"SS\"), |_| Some(\"Signed Short\".to_string())),","highlight_start":1,"highlight_end":63},{"text":"        map(tag(b\"ST\"), |_| Some(\"Short Text\".to_string())),","highlight_start":1,"highlight_end":61},{"text":"        map(tag(b\"TM\"), |_| Some(\"Time\".to_string())),","highlight_start":1,"highlight_end":55},{"text":"        map(tag(b\"UI\"), |_| Some(\"Unique Identifier\".to_string())),","highlight_start":1,"highlight_end":68},{"text":"        map(tag(b\"UL\"), |_| Some(\"Unsigned Long\".to_string())),","highlight_start":1,"highlight_end":64},{"text":"        map(tag(b\"UN\"), |_| Some(\"Unknown\".to_string())),","highlight_start":1,"highlight_end":58},{"text":"        map(tag(b\"UR\"), |_| Some(\"URI/URL\".to_string())),","highlight_start":1,"highlight_end":58},{"text":"        map(tag(b\"US\"), |_| Some(\"Unsigned Short\".to_string())),","highlight_start":1,"highlight_end":65},{"text":"        map(tag(b\"UT\"), |_| Some(\"Unlimited Text\".to_string())),","highlight_start":1,"highlight_end":65},{"text":"        map(take(2usize), |_| None)","highlight_start":1,"highlight_end":36},{"text":"    ))","highlight_start":1,"highlight_end":6}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":633,"byte_end":636,"line_start":36,"line_end":36,"column_start":5,"column_end":8,"is_primary":false,"text":[{"text":"    alt((","highlight_start":5,"highlight_end":8}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `nom::branch::Alt<_, _, _>` is not implemented for `(impl FnMut(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `nom::branch::Alt<I, O, E>`:\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\n  (A, B, C, D, E, F, G, H, I)\nand 13 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `alt`","code":null,"level":"note","spans":[{"file_name":"/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/branch/mod.rs","byte_start":1618,"byte_end":1630,"line_start":47,"line_end":47,"column_start":49,"column_end":61,"is_primary":true,"text":[{"text":"pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(","highlight_start":49,"highlight_end":61}],"label":"required by this bound in `alt`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `(impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<_>), nom::Err<_>>): nom::branch::Alt<_, _, _>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:36:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    alt((\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m _____\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map(tag(b\"AE\"), |_| Some(\"Application Entity\".to_string())),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map(tag(b\"AS\"), |_| Some(\"Age String\".to_string())),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map(tag(b\"AT\"), |_| Some(\"Attribute Tag\".to_string())),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map(take(2usize), |_| None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `nom::branch::Alt<_, _, _>` is not implemented for `(impl FnMut(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nom::branch::Alt<I, O, E>`:\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H, I)\u001b[0m\n\u001b[0m           and 13 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `alt`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/branch/mod.rs:47:49\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `alt`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `(impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<_>), nom::Err<_>>): nom::branch::Alt<_, _, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":633,"byte_end":2568,"line_start":36,"line_end":68,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    alt((","highlight_start":5,"highlight_end":10},{"text":"        map(tag(b\"AE\"), |_| Some(\"Application Entity\".to_string())),","highlight_start":1,"highlight_end":69},{"text":"        map(tag(b\"AS\"), |_| Some(\"Age String\".to_string())),","highlight_start":1,"highlight_end":61},{"text":"        map(tag(b\"AT\"), |_| Some(\"Attribute Tag\".to_string())),","highlight_start":1,"highlight_end":64},{"text":"        map(tag(b\"CS\"), |_| Some(\"Code String\".to_string())),","highlight_start":1,"highlight_end":62},{"text":"        map(tag(b\"DA\"), |_| Some(\"Date\".to_string())),","highlight_start":1,"highlight_end":55},{"text":"        map(tag(b\"DS\"), |_| Some(\"Decimal String\".to_string())),","highlight_start":1,"highlight_end":65},{"text":"        map(tag(b\"DT\"), |_| Some(\"Date Time\".to_string())),","highlight_start":1,"highlight_end":60},{"text":"        map(tag(b\"FL\"), |_| Some(\"Floating Point Single\".to_string())),","highlight_start":1,"highlight_end":72},{"text":"        map(tag(b\"FD\"), |_| Some(\"Floating Point Double\".to_string())),","highlight_start":1,"highlight_end":72},{"text":"        map(tag(b\"IS\"), |_| Some(\"Integer String\".to_string())),","highlight_start":1,"highlight_end":65},{"text":"        map(tag(b\"LO\"), |_| Some(\"Long String\".to_string())),","highlight_start":1,"highlight_end":62},{"text":"        map(tag(b\"LT\"), |_| Some(\"Long Text\".to_string())),","highlight_start":1,"highlight_end":60},{"text":"        map(tag(b\"OB\"), |_| Some(\"Other Byte\".to_string())),","highlight_start":1,"highlight_end":61},{"text":"        map(tag(b\"OD\"), |_| Some(\"Other Double\".to_string())),","highlight_start":1,"highlight_end":63},{"text":"        map(tag(b\"OF\"), |_| Some(\"Other Float\".to_string())),","highlight_start":1,"highlight_end":62},{"text":"        map(tag(b\"OL\"), |_| Some(\"Other Long\".to_string())),","highlight_start":1,"highlight_end":61},{"text":"        map(tag(b\"OW\"), |_| Some(\"Other Word\".to_string())),","highlight_start":1,"highlight_end":61},{"text":"        map(tag(b\"PN\"), |_| Some(\"Person Name\".to_string())),","highlight_start":1,"highlight_end":62},{"text":"        map(tag(b\"SH\"), |_| Some(\"Short String\".to_string())),","highlight_start":1,"highlight_end":63},{"text":"        map(tag(b\"SL\"), |_| Some(\"Signed Long\".to_string())),","highlight_start":1,"highlight_end":62},{"text":"        map(tag(b\"SQ\"), |_| Some(\"Sequence of Items\".to_string())),","highlight_start":1,"highlight_end":68},{"text":"        map(tag(b\"SS\"), |_| Some(\"Signed Short\".to_string())),","highlight_start":1,"highlight_end":63},{"text":"        map(tag(b\"ST\"), |_| Some(\"Short Text\".to_string())),","highlight_start":1,"highlight_end":61},{"text":"        map(tag(b\"TM\"), |_| Some(\"Time\".to_string())),","highlight_start":1,"highlight_end":55},{"text":"        map(tag(b\"UI\"), |_| Some(\"Unique Identifier\".to_string())),","highlight_start":1,"highlight_end":68},{"text":"        map(tag(b\"UL\"), |_| Some(\"Unsigned Long\".to_string())),","highlight_start":1,"highlight_end":64},{"text":"        map(tag(b\"UN\"), |_| Some(\"Unknown\".to_string())),","highlight_start":1,"highlight_end":58},{"text":"        map(tag(b\"UR\"), |_| Some(\"URI/URL\".to_string())),","highlight_start":1,"highlight_end":58},{"text":"        map(tag(b\"US\"), |_| Some(\"Unsigned Short\".to_string())),","highlight_start":1,"highlight_end":65},{"text":"        map(tag(b\"UT\"), |_| Some(\"Unlimited Text\".to_string())),","highlight_start":1,"highlight_end":65},{"text":"        map(take(2usize), |_| None)","highlight_start":1,"highlight_end":36},{"text":"    ))","highlight_start":1,"highlight_end":7}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `nom::branch::Alt<_, _, _>` is not implemented for `(impl FnMut(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `nom::branch::Alt<I, O, E>`:\n  (A, B)\n  (A, B, C)\n  (A, B, C, D)\n  (A, B, C, D, E)\n  (A, B, C, D, E, F)\n  (A, B, C, D, E, F, G)\n  (A, B, C, D, E, F, G, H)\n  (A, B, C, D, E, F, G, H, I)\nand 13 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `alt`","code":null,"level":"note","spans":[{"file_name":"/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/branch/mod.rs","byte_start":1618,"byte_end":1630,"line_start":47,"line_end":47,"column_start":49,"column_end":61,"is_primary":true,"text":[{"text":"pub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(","highlight_start":49,"highlight_end":61}],"label":"required by this bound in `alt`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `(impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<String>), nom::Err<_>>, impl FnMut(_) -> Result<(_, Option<_>), nom::Err<_>>): nom::branch::Alt<_, _, _>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:36:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    alt((\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map(tag(b\"AE\"), |_| Some(\"Application Entity\".to_string())),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map(tag(b\"AS\"), |_| Some(\"Age String\".to_string())),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map(tag(b\"AT\"), |_| Some(\"Attribute Tag\".to_string())),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map(take(2usize), |_| None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `nom::branch::Alt<_, _, _>` is not implemented for `(impl FnMut(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nom::branch::Alt<I, O, E>`:\u001b[0m\n\u001b[0m             (A, B)\u001b[0m\n\u001b[0m             (A, B, C)\u001b[0m\n\u001b[0m             (A, B, C, D)\u001b[0m\n\u001b[0m             (A, B, C, D, E)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H)\u001b[0m\n\u001b[0m             (A, B, C, D, E, F, G, H, I)\u001b[0m\n\u001b[0m           and 13 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `alt`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/branch/mod.rs:47:49\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn alt<I: Clone, O, E: ParseError<I>, List: Alt<I, O, E>>(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `alt`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/branch/mod.rs","byte_start":1653,"byte_end":1686,"line_start":49,"line_end":49,"column_start":6,"column_end":39,"is_primary":false,"text":[{"text":") -> impl FnMut(I) -> IResult<I, O, E> {","highlight_start":6,"highlight_end":39}],"label":"one of the found opaque types","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/branch/mod.rs","byte_start":1653,"byte_end":1686,"line_start":49,"line_end":49,"column_start":6,"column_end":39,"is_primary":false,"text":[{"text":") -> impl FnMut(I) -> IResult<I, O, E> {","highlight_start":6,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `impl Trait`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/combinator/mod.rs","byte_start":2044,"byte_end":2078,"line_start":73,"line_end":73,"column_start":60,"column_end":94,"is_primary":false,"text":[{"text":"pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>","highlight_start":60,"highlight_end":94}],"label":"one of the found opaque types","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/combinator/mod.rs","byte_start":2044,"byte_end":2078,"line_start":73,"line_end":73,"column_start":60,"column_end":94,"is_primary":false,"text":[{"text":"pub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>","highlight_start":60,"highlight_end":94}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `impl Trait`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs","byte_start":1184,"byte_end":1230,"line_start":34,"line_end":34,"column_start":6,"column_end":52,"is_primary":false,"text":[{"text":") -> impl Fn(Input) -> IResult<Input, Input, Error>","highlight_start":6,"highlight_end":52}],"label":"one of the found opaque types","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs","byte_start":1184,"byte_end":1230,"line_start":34,"line_end":34,"column_start":6,"column_end":52,"is_primary":false,"text":[{"text":") -> impl Fn(Input) -> IResult<Input, Input, Error>","highlight_start":6,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `impl Trait`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs","byte_start":13881,"byte_end":13927,"line_start":405,"line_end":405,"column_start":6,"column_end":52,"is_primary":false,"text":[{"text":") -> impl Fn(Input) -> IResult<Input, Input, Error>","highlight_start":6,"highlight_end":52}],"label":"one of the found opaque types","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs","byte_start":13881,"byte_end":13927,"line_start":405,"line_end":405,"column_start":6,"column_end":52,"is_primary":false,"text":[{"text":") -> impl Fn(Input) -> IResult<Input, Input, Error>","highlight_start":6,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `impl Trait`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":633,"byte_end":2568,"line_start":36,"line_end":68,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    alt((","highlight_start":5,"highlight_end":10},{"text":"        map(tag(b\"AE\"), |_| Some(\"Application Entity\".to_string())),","highlight_start":1,"highlight_end":69},{"text":"        map(tag(b\"AS\"), |_| Some(\"Age String\".to_string())),","highlight_start":1,"highlight_end":61},{"text":"        map(tag(b\"AT\"), |_| Some(\"Attribute Tag\".to_string())),","highlight_start":1,"highlight_end":64},{"text":"        map(tag(b\"CS\"), |_| Some(\"Code String\".to_string())),","highlight_start":1,"highlight_end":62},{"text":"        map(tag(b\"DA\"), |_| Some(\"Date\".to_string())),","highlight_start":1,"highlight_end":55},{"text":"        map(tag(b\"DS\"), |_| Some(\"Decimal String\".to_string())),","highlight_start":1,"highlight_end":65},{"text":"        map(tag(b\"DT\"), |_| Some(\"Date Time\".to_string())),","highlight_start":1,"highlight_end":60},{"text":"        map(tag(b\"FL\"), |_| Some(\"Floating Point Single\".to_string())),","highlight_start":1,"highlight_end":72},{"text":"        map(tag(b\"FD\"), |_| Some(\"Floating Point Double\".to_string())),","highlight_start":1,"highlight_end":72},{"text":"        map(tag(b\"IS\"), |_| Some(\"Integer String\".to_string())),","highlight_start":1,"highlight_end":65},{"text":"        map(tag(b\"LO\"), |_| Some(\"Long String\".to_string())),","highlight_start":1,"highlight_end":62},{"text":"        map(tag(b\"LT\"), |_| Some(\"Long Text\".to_string())),","highlight_start":1,"highlight_end":60},{"text":"        map(tag(b\"OB\"), |_| Some(\"Other Byte\".to_string())),","highlight_start":1,"highlight_end":61},{"text":"        map(tag(b\"OD\"), |_| Some(\"Other Double\".to_string())),","highlight_start":1,"highlight_end":63},{"text":"        map(tag(b\"OF\"), |_| Some(\"Other Float\".to_string())),","highlight_start":1,"highlight_end":62},{"text":"        map(tag(b\"OL\"), |_| Some(\"Other Long\".to_string())),","highlight_start":1,"highlight_end":61},{"text":"        map(tag(b\"OW\"), |_| Some(\"Other Word\".to_string())),","highlight_start":1,"highlight_end":61},{"text":"        map(tag(b\"PN\"), |_| Some(\"Person Name\".to_string())),","highlight_start":1,"highlight_end":62},{"text":"        map(tag(b\"SH\"), |_| Some(\"Short String\".to_string())),","highlight_start":1,"highlight_end":63},{"text":"        map(tag(b\"SL\"), |_| Some(\"Signed Long\".to_string())),","highlight_start":1,"highlight_end":62},{"text":"        map(tag(b\"SQ\"), |_| Some(\"Sequence of Items\".to_string())),","highlight_start":1,"highlight_end":68},{"text":"        map(tag(b\"SS\"), |_| Some(\"Signed Short\".to_string())),","highlight_start":1,"highlight_end":63},{"text":"        map(tag(b\"ST\"), |_| Some(\"Short Text\".to_string())),","highlight_start":1,"highlight_end":61},{"text":"        map(tag(b\"TM\"), |_| Some(\"Time\".to_string())),","highlight_start":1,"highlight_end":55},{"text":"        map(tag(b\"UI\"), |_| Some(\"Unique Identifier\".to_string())),","highlight_start":1,"highlight_end":68},{"text":"        map(tag(b\"UL\"), |_| Some(\"Unsigned Long\".to_string())),","highlight_start":1,"highlight_end":64},{"text":"        map(tag(b\"UN\"), |_| Some(\"Unknown\".to_string())),","highlight_start":1,"highlight_end":58},{"text":"        map(tag(b\"UR\"), |_| Some(\"URI/URL\".to_string())),","highlight_start":1,"highlight_end":58},{"text":"        map(tag(b\"US\"), |_| Some(\"Unsigned Short\".to_string())),","highlight_start":1,"highlight_end":65},{"text":"        map(tag(b\"UT\"), |_| Some(\"Unlimited Text\".to_string())),","highlight_start":1,"highlight_end":65},{"text":"        map(take(2usize), |_| None)","highlight_start":1,"highlight_end":36},{"text":"    ))","highlight_start":1,"highlight_end":7}],"label":"expected `Result<(&[u8], Option<...>), ...>`, found opaque type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":596,"byte_end":626,"line_start":35,"line_end":35,"column_start":30,"column_end":60,"is_primary":false,"text":[{"text":"fn parse_vr(input: &[u8]) -> IResult<&[u8], Option<String>> {","highlight_start":30,"highlight_end":60}],"label":"expected `Result<(&[u8], Option<String>), nom::Err<nom::error::Error<&[u8]>>>` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"    expected enum `Result<(&[u8], Option<String>), nom::Err<nom::error::Error<&[u8]>>>`\nfound opaque type `impl FnMut(_) -> Result<(_, _), nom::Err<_>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use parentheses to call this opaque type","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":2568,"byte_end":2568,"line_start":68,"line_end":68,"column_start":7,"column_end":7,"is_primary":true,"text":[{"text":"    ))","highlight_start":7,"highlight_end":7}],"label":null,"suggested_replacement":"(/* value */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:36:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mfn parse_vr(input: &[u8]) -> IResult<&[u8], Option<String>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `Result<(&[u8], Option<String>), nom::Err<nom::error::Error<&[u8]>>>` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    alt((\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map(tag(b\"AE\"), |_| Some(\"Application Entity\".to_string())),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map(tag(b\"AS\"), |_| Some(\"Age String\".to_string())),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map(tag(b\"AT\"), |_| Some(\"Attribute Tag\".to_string())),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map(take(2usize), |_| None)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Result<(&[u8], Option<...>), ...>`, found opaque type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/combinator/mod.rs:73:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub fn map<I, O1, O2, E, F, G>(mut parser: F, mut f: G) -> impl FnMut(I) -> IResult<I, O2, E>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone of the found opaque types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/bytes/complete.rs:34:6\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m) -> impl Fn(Input) -> IResult<Input, Input, Error>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone of the found opaque types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m405\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m) -> impl Fn(Input) -> IResult<Input, Input, Error>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone of the found opaque types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/branch/mod.rs:49:6\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m) -> impl FnMut(I) -> IResult<I, O, E> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mone of the found opaque types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m:     expected enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mResult<(&[u8], Option<String>), nom::Err<nom::error::Error<&[u8]>>>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m            found opaque type `\u001b[0m\u001b[0m\u001b[1m\u001b[35mimpl FnMut(_) -> Result<(_, _), nom::Err<_>>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use parentheses to call this opaque type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    ))\u001b[0m\u001b[0m\u001b[38;5;10m(/* value */)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0308.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0308.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
