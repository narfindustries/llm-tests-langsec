module SQLite;

import spicy;

type FileHeader = unit {
    magic: bytes &size=16;
    pageSize: uint16;
    writeVersion: uint8;
    readVersion: uint8;
    reservedSpace: uint8;
    maxPayloadFrac: uint8;
    minPayloadFrac: uint8;
    leafPayloadFrac: uint8;
    changeCounter: uint32;
    dbSize: uint32;
    firstFreelistTrunkPage: uint32;
    totalFreelistPages: uint32;
    schemaCookie: uint32;
    schemaFormat: uint32;
    defaultCacheSize: uint32;
    largestRootBTreePage: uint32;
    textEncoding: uint32;
    userVersion: uint32;
    incrementalVacuumMode: uint32;
    applicationID: uint32;
    reserved: bytes &size=20;
    versionValidFor: uint32;
    sqliteVersion: uint32;
};

type BTreePageHeader = unit {
    pageType: uint8;
    firstFreeblock: uint16;
    numCells: uint16;
    cellContentOffset: uint16;
    numFragFreeBytes: uint8;
};

type CellPointer = unit {
    pointer: uint16;
};

type InteriorCell = unit {
    leftChildPage: uint32;
    rowidOrKey: uint64;
};

type LeafCell = unit {
    payloadSize: uint32;
    rowid: uint64;
    payload: bytes &size=this.payloadSize;
    overflowPageNumber: uint32;
};

type Cell = unit(pageType: uint8) {
    switch (pageType) {
        case 2, 5: InteriorCell;
        case 10, 13: LeafCell;
        default: void;
    }
};

type BTreePage = unit {
    header: BTreePageHeader;
    cellPointers: CellPointer[] &size=this.header.numCells;
    cells: Cell(this.header.pageType)[] &size=this.header.numCells;
};

type SQLiteDB = unit {
    header: FileHeader;
    pages: BTreePage[] &eod;
};

public type SQLiteFile = SQLiteDB;