{"$message_type":"diagnostic","message":"the trait bound `(impl FnMut(&[u8]) -> Result<(&[u8], &str), nom::Err<_>>, fn(_) -> Result<(_, u16), nom::Err<_>> {nom::number::complete::le_u16::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, impl Fn(_) -> Result<(_, _), nom::Err<_>>, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}): nom::sequence::Tuple<_, _, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1638,"byte_end":2051,"line_start":69,"line_end":93,"column_start":15,"column_end":6,"is_primary":true,"text":[{"text":"    ) = tuple((","highlight_start":15,"highlight_end":16},{"text":"        map_res(take(16usize), std::str::from_utf8),","highlight_start":1,"highlight_end":53},{"text":"        le_u16,","highlight_start":1,"highlight_end":16},{"text":"        le_u8,","highlight_start":1,"highlight_end":15},{"text":"        le_u8,","highlight_start":1,"highlight_end":15},{"text":"        le_u8,","highlight_start":1,"highlight_end":15},{"text":"        le_u8,","highlight_start":1,"highlight_end":15},{"text":"        le_u8,","highlight_start":1,"highlight_end":15},{"text":"        le_u8,","highlight_start":1,"highlight_end":15},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        take(20usize),","highlight_start":1,"highlight_end":23},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"    ))(input)?;","highlight_start":1,"highlight_end":6}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1632,"byte_end":1637,"line_start":69,"line_end":69,"column_start":9,"column_end":14,"is_primary":false,"text":[{"text":"    ) = tuple((","highlight_start":9,"highlight_end":14}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `nom::sequence::Tuple<_, _, _>` is not implemented for `(impl FnMut(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `nom::sequence::Tuple<I, O, E>`:\n  `()` implements `nom::sequence::Tuple<I, (), E>`\n  `(F,)` implements `nom::sequence::Tuple<Input, (Output,), Error>`\n  `(FnA, FnB)` implements `nom::sequence::Tuple<Input, (A, B), Error>`\n  `(FnA, FnB, FnC)` implements `nom::sequence::Tuple<Input, (A, B, C), Error>`\n  `(FnA, FnB, FnC, FnD)` implements `nom::sequence::Tuple<Input, (A, B, C, D), Error>`\n  `(FnA, FnB, FnC, FnD, FnE)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E), Error>`\n  `(FnA, FnB, FnC, FnD, FnE, FnF)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F), Error>`\n  `(FnA, FnB, FnC, FnD, FnE, FnF, FnG)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>`\nand 14 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tuple`","code":null,"level":"note","spans":[{"file_name":"/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/sequence/mod.rs","byte_start":8673,"byte_end":8687,"line_start":275,"line_end":275,"column_start":44,"column_end":58,"is_primary":true,"text":[{"text":"pub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(","highlight_start":44,"highlight_end":58}],"label":"required by this bound in `tuple`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `(impl FnMut(&[u8]) -> Result<(&[u8], &str), nom::Err<_>>, fn(_) -> Result<(_, u16), nom::Err<_>> {nom::number::complete::le_u16::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, impl Fn(_) -> Result<(_, _), nom::Err<_>>, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}): nom::sequence::Tuple<_, _, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:69:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    ) = tuple((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m _________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map_res(take(16usize), std::str::from_utf8),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        le_u16,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        le_u8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        le_u32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ))(input)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `nom::sequence::Tuple<_, _, _>` is not implemented for `(impl FnMut(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nom::sequence::Tuple<I, O, E>`:\u001b[0m\n\u001b[0m              `()` implements `nom::sequence::Tuple<I, (), E>`\u001b[0m\n\u001b[0m              `(F,)` implements `nom::sequence::Tuple<Input, (Output,), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB)` implements `nom::sequence::Tuple<Input, (A, B), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC)` implements `nom::sequence::Tuple<Input, (A, B, C), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD)` implements `nom::sequence::Tuple<Input, (A, B, C, D), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE, FnF)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE, FnF, FnG)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>`\u001b[0m\n\u001b[0m            and 14 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tuple`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/sequence/mod.rs:275:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `tuple`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `(impl FnMut(&[u8]) -> Result<(&[u8], &str), nom::Err<_>>, fn(_) -> Result<(_, u16), nom::Err<_>> {nom::number::complete::le_u16::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, impl Fn(_) -> Result<(_, _), nom::Err<_>>, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}): nom::sequence::Tuple<_, _, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1632,"byte_end":2052,"line_start":69,"line_end":93,"column_start":9,"column_end":7,"is_primary":true,"text":[{"text":"    ) = tuple((","highlight_start":9,"highlight_end":16},{"text":"        map_res(take(16usize), std::str::from_utf8),","highlight_start":1,"highlight_end":53},{"text":"        le_u16,","highlight_start":1,"highlight_end":16},{"text":"        le_u8,","highlight_start":1,"highlight_end":15},{"text":"        le_u8,","highlight_start":1,"highlight_end":15},{"text":"        le_u8,","highlight_start":1,"highlight_end":15},{"text":"        le_u8,","highlight_start":1,"highlight_end":15},{"text":"        le_u8,","highlight_start":1,"highlight_end":15},{"text":"        le_u8,","highlight_start":1,"highlight_end":15},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        take(20usize),","highlight_start":1,"highlight_end":23},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"    ))(input)?;","highlight_start":1,"highlight_end":7}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `nom::sequence::Tuple<_, _, _>` is not implemented for `(impl FnMut(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `nom::sequence::Tuple<I, O, E>`:\n  `()` implements `nom::sequence::Tuple<I, (), E>`\n  `(F,)` implements `nom::sequence::Tuple<Input, (Output,), Error>`\n  `(FnA, FnB)` implements `nom::sequence::Tuple<Input, (A, B), Error>`\n  `(FnA, FnB, FnC)` implements `nom::sequence::Tuple<Input, (A, B, C), Error>`\n  `(FnA, FnB, FnC, FnD)` implements `nom::sequence::Tuple<Input, (A, B, C, D), Error>`\n  `(FnA, FnB, FnC, FnD, FnE)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E), Error>`\n  `(FnA, FnB, FnC, FnD, FnE, FnF)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F), Error>`\n  `(FnA, FnB, FnC, FnD, FnE, FnF, FnG)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>`\nand 14 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tuple`","code":null,"level":"note","spans":[{"file_name":"/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/sequence/mod.rs","byte_start":8673,"byte_end":8687,"line_start":275,"line_end":275,"column_start":44,"column_end":58,"is_primary":true,"text":[{"text":"pub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(","highlight_start":44,"highlight_end":58}],"label":"required by this bound in `tuple`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `(impl FnMut(&[u8]) -> Result<(&[u8], &str), nom::Err<_>>, fn(_) -> Result<(_, u16), nom::Err<_>> {nom::number::complete::le_u16::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, impl Fn(_) -> Result<(_, _), nom::Err<_>>, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}): nom::sequence::Tuple<_, _, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:69:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    ) = tuple((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m _________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map_res(take(16usize), std::str::from_utf8),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        le_u16,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        le_u8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        le_u32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ))(input)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `nom::sequence::Tuple<_, _, _>` is not implemented for `(impl FnMut(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nom::sequence::Tuple<I, O, E>`:\u001b[0m\n\u001b[0m              `()` implements `nom::sequence::Tuple<I, (), E>`\u001b[0m\n\u001b[0m              `(F,)` implements `nom::sequence::Tuple<Input, (Output,), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB)` implements `nom::sequence::Tuple<Input, (A, B), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC)` implements `nom::sequence::Tuple<Input, (A, B, C), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD)` implements `nom::sequence::Tuple<Input, (A, B, C, D), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE, FnF)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE, FnF, FnG)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>`\u001b[0m\n\u001b[0m            and 14 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tuple`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/sequence/mod.rs:275:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `tuple`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `(impl FnMut(&[u8]) -> Result<(&[u8], &str), nom::Err<_>>, fn(_) -> Result<(_, u16), nom::Err<_>> {nom::number::complete::le_u16::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, impl Fn(_) -> Result<(_, _), nom::Err<_>>, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}): nom::sequence::Tuple<_, _, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1632,"byte_end":2059,"line_start":69,"line_end":93,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"    ) = tuple((","highlight_start":9,"highlight_end":16},{"text":"        map_res(take(16usize), std::str::from_utf8),","highlight_start":1,"highlight_end":53},{"text":"        le_u16,","highlight_start":1,"highlight_end":16},{"text":"        le_u8,","highlight_start":1,"highlight_end":15},{"text":"        le_u8,","highlight_start":1,"highlight_end":15},{"text":"        le_u8,","highlight_start":1,"highlight_end":15},{"text":"        le_u8,","highlight_start":1,"highlight_end":15},{"text":"        le_u8,","highlight_start":1,"highlight_end":15},{"text":"        le_u8,","highlight_start":1,"highlight_end":15},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        take(20usize),","highlight_start":1,"highlight_end":23},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"        le_u32,","highlight_start":1,"highlight_end":16},{"text":"    ))(input)?;","highlight_start":1,"highlight_end":14}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `nom::sequence::Tuple<_, _, _>` is not implemented for `(impl FnMut(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `nom::sequence::Tuple<I, O, E>`:\n  `()` implements `nom::sequence::Tuple<I, (), E>`\n  `(F,)` implements `nom::sequence::Tuple<Input, (Output,), Error>`\n  `(FnA, FnB)` implements `nom::sequence::Tuple<Input, (A, B), Error>`\n  `(FnA, FnB, FnC)` implements `nom::sequence::Tuple<Input, (A, B, C), Error>`\n  `(FnA, FnB, FnC, FnD)` implements `nom::sequence::Tuple<Input, (A, B, C, D), Error>`\n  `(FnA, FnB, FnC, FnD, FnE)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E), Error>`\n  `(FnA, FnB, FnC, FnD, FnE, FnF)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F), Error>`\n  `(FnA, FnB, FnC, FnD, FnE, FnF, FnG)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>`\nand 14 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tuple`","code":null,"level":"note","spans":[{"file_name":"/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/sequence/mod.rs","byte_start":8673,"byte_end":8687,"line_start":275,"line_end":275,"column_start":44,"column_end":58,"is_primary":true,"text":[{"text":"pub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(","highlight_start":44,"highlight_end":58}],"label":"required by this bound in `tuple`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `(impl FnMut(&[u8]) -> Result<(&[u8], &str), nom::Err<_>>, fn(_) -> Result<(_, u16), nom::Err<_>> {nom::number::complete::le_u16::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u8), nom::Err<_>> {nom::number::complete::le_u8::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, impl Fn(_) -> Result<(_, _), nom::Err<_>>, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}, fn(_) -> Result<(_, u32), nom::Err<_>> {nom::number::complete::le_u32::<_, _>}): nom::sequence::Tuple<_, _, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:69:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    ) = tuple((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m _________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map_res(take(16usize), std::str::from_utf8),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        le_u16,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        le_u8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        le_u32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ))(input)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `nom::sequence::Tuple<_, _, _>` is not implemented for `(impl FnMut(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nom::sequence::Tuple<I, O, E>`:\u001b[0m\n\u001b[0m              `()` implements `nom::sequence::Tuple<I, (), E>`\u001b[0m\n\u001b[0m              `(F,)` implements `nom::sequence::Tuple<Input, (Output,), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB)` implements `nom::sequence::Tuple<Input, (A, B), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC)` implements `nom::sequence::Tuple<Input, (A, B, C), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD)` implements `nom::sequence::Tuple<Input, (A, B, C, D), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE, FnF)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE, FnF, FnG)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>`\u001b[0m\n\u001b[0m            and 14 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tuple`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/sequence/mod.rs:275:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `tuple`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
