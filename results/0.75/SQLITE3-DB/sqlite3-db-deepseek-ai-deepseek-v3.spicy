module SQLITE3;

import spicy;

type Header = unit {
    magic: bytes &size=16;
    page_size: uint16;
    write_version: uint8;
    read_version: uint8;
    reserved_space: uint8;
    max_payload: uint8;
    min_payload: uint8;
    leaf_payload: uint8;
    file_change_counter: uint32;
    db_size: uint32;
    first_free_page: uint32;
    free_page_count: uint32;
    schema_cookie: uint32;
    schema_format: uint32;
    page_cache_size: uint32;
    largest_root_page: uint32;
    text_encoding: uint32;
    user_version: uint32;
    incremental_vacuum: uint32;
    application_id: uint32;
    reserved: bytes &size=20;
    version_valid_for: uint32;
    sqlite_version: uint32;
};

type Page = unit {
    page_type: uint8;
    free_block_offset: uint16;
    cell_count: uint16;
    cell_content_offset: uint16;
    right_child_pointer: uint32;
    cells: bytes &size=(page_size - cell_content_offset);
};

type FreelistTrunkPage = unit {
    next_trunk_page: uint32;
    leaf_page_count: uint32;
    leaf_page_numbers: uint32[leaf_page_count];
};

type OverflowPage = unit {
    next_overflow_page: uint32;
    data: bytes &size=(page_size - 4);
};

type PointerMapEntry = unit {
    page_type: uint8;
    parent_page: uint32;
};

type PointerMapPage = unit {
    entries: PointerMapEntry[] &until($input->size() == 0);
};

type File = unit {
    header: Header;
    pages: Page[] &until($input->size() == 0);
};