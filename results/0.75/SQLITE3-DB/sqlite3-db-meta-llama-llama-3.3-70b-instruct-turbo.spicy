module SQLite3_DB;

type file_header = struct {
  magic: bytestring(16);
  page_size: uint16;
  write_version: uint8;
  read_version: uint8;
  reserved: uint8;
  max_embedded_payload_fraction: uint8;
  min_embedded_payload_fraction: uint8;
  leaf_payload_fraction: uint8;
  file_change_counter: uint32;
  database_size: uint32;
  reserved_space: uint32;
  version_valid_for: uint32;
  sqlite_version_number: uint32;
};

type page_type = enum {
  Purgable = 0;
  Internal = 1;
  Leaf = 2;
  Overflow = 3;
  PointerMap = 4;
  Locked = 5;
};

type page_header = struct {
  page_type: page_type;
  first_freeblock: uint16;
  cell_offset: uint16;
  defragmentated_page_size: uint16;
  number_of_cells: uint16;
  start_of_content_area: uint16;
  fragmented_free_bytes: uint8;
};

type cell = struct {
  payload_length: uint32;
  rowid: uint32;
  payload: bytestring;
};

type btree_cell = struct {
  left_child_page: uint32;
  right_child_page: uint32;
  cell_key: bytestring;
};

type btree_page = struct {
  page_type: page_type;
  first_cell_offset: uint16;
  number_of_cells: uint16;
  cells: array of cell;
};

type ptrmap_page_type = enum {
  PointerMap = 5;
};

type ptrmap_entry = struct {
  page_number: uint32;
  ptrmap_type: uint8;
};

type ptrmap_page = struct {
  ptrmap_page_type: ptrmap_page_type;
  number_of_entries: uint16;
  entries: array of ptrmap_entry;
};

type overflow_page = struct {
  page_type: page_type;
  next_overflow_page: uint32;
  data: bytestring;
};

type master_journal_header = struct {
  magic: uint32;
  version: uint32;
  master_journal_size: uint32;
  salt1: uint32;
  salt2: uint32;
  cksum: uint32;
};

type journal_mode = enum {
  Delete = 1;
  Truncate = 2;
  Zero = 3;
};

type journal_header = struct {
  journal_mode: journal_mode;
  journal_header_size: uint32;
  sector_size: uint32;
  page_count: uint32;
};

type journal_page = struct {
  page_number: uint32;
  data: bytestring;
};

type page_data = union {
  btree_page: btree_page;
  ptrmap_page: ptrmap_page;
  overflow_page: overflow_page;
  journal_header: journal_header;
  journal_page: journal_page;
};

let sqlite_db = struct {
  file_header: file_header;
  pages: array of page_data;
};

let parser = grammar {
  sqlite_db: sqlite_db;
};