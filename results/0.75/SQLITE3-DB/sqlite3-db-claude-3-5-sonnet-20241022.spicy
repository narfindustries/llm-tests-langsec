module SQLite3;

public type Header = unit {
    magic: bytes &size=16;
    page_size: uint16;
    file_format_write_version: uint8;
    file_format_read_version: uint8;
    reserved_space: uint8;
    max_embedded_payload_fraction: uint8;
    min_embedded_payload_fraction: uint8;
    leaf_payload_fraction: uint8;
    file_change_counter: uint32;
    db_size_pages: uint32;
    first_freelist_trunk_page: uint32;
    num_freelist_pages: uint32;
    schema_cookie: uint32;
    schema_format: uint32;
    default_page_cache_size: uint32;
    largest_root_btree_page: uint32;
    text_encoding: uint32;
    user_version: uint32;
    incremental_vacuum_mode: uint32;
    application_id: uint32;
    reserved: bytes &size=20;
    version_valid_for: uint32;
    sqlite_version: uint32;
};

type PageType = enum {
    INTERIOR_INDEX = 0x02,
    INTERIOR_TABLE = 0x05,
    LEAF_INDEX = 0x0a,
    LEAF_TABLE = 0x0d
};

type BTreePageHeader = unit {
    page_type: uint8 &convert=PageType($$);
    first_freeblock: uint16;
    num_cells: uint16;
    cell_content_offset: uint16;
    num_fragmented_free_bytes: uint8;
    right_child: uint32 if (self.page_type == PageType::INTERIOR_INDEX || self.page_type == PageType::INTERIOR_TABLE);
};

type TableLeafCell = unit {
    payload_size: uint64;
    row_id: uint64;
    payload: bytes &size=self.payload_size;
    overflow_page: uint32 if (self.payload_size > 4061);  # 4096 - 35
};

type TableInteriorCell = unit {
    left_child: uint32;
    row_id: uint64;
};

type IndexLeafCell = unit {
    payload_size: uint64;
    payload: bytes &size=self.payload_size;
    overflow_page: uint32 if (self.payload_size > 4061);
};

type IndexInteriorCell = unit {
    left_child: uint32;
    payload_size: uint64;
    payload: bytes &size=self.payload_size;
};

type Cell = unit(ptype: PageType) {
    var page_type: PageType;
    
    on %init {
        self.page_type = ptype;
    }

    switch (self.page_type) {
        PageType::LEAF_TABLE -> table_leaf: TableLeafCell;
        PageType::INTERIOR_TABLE -> table_interior: TableInteriorCell;
        PageType::LEAF_INDEX -> index_leaf: IndexLeafCell;
        PageType::INTERIOR_INDEX -> index_interior: IndexInteriorCell;
    };
};

type Page = unit {
    hdr: BTreePageHeader;
    cells: Cell(self.hdr.page_type)[self.hdr.num_cells];
};

type FreelistTrunkPage = unit {
    next_trunk_page: uint32;
    num_leaf_pages: uint32;
    leaf_pages: uint32[self.num_leaf_pages];
};

public type Database = unit {
    hdr: Header;
    pages: Page[];
};