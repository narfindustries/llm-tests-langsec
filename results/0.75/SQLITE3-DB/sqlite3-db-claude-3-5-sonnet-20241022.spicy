module SQLITE3-DB;

import spicy;

public type Header = unit {
    magic: bytes &size=16;
    page_size: uint16;
    write_version: uint8;
    read_version: uint8;
    reserved_space: uint8;
    max_payload_fraction: uint8;
    min_payload_fraction: uint8;
    leaf_payload_fraction: uint8;
    file_change_counter: uint32;
    db_size_pages: uint32;
    first_freelist_trunk_page: uint32;
    total_freelist_pages: uint32;
    schema_cookie: uint32;
    schema_format: uint32;
    default_page_cache_size: uint32;
    largest_root_btree_page: uint32;
    text_encoding: uint32;
    user_version: uint32;
    incremental_vacuum_mode: uint32;
    application_id: uint32;
    reserved_expansion: bytes &size=20;
    version_valid_for: uint32;
    sqlite_version_number: uint32;

    on %init {
        if ( self.magic != b"SQLite format 3\x00" )
            throw "invalid SQLite magic";
    }
};

public type Page = unit {
    data: bytes &eod;
};

type Database = unit {
    header: Header;
    pages: Page[];
};

on Database::header -> event SQLITE3_DB::header(
    $magic: bytes,
    $page_size: count,
    $write_version: count,
    $read_version: count,
    $schema_format: count,
    $text_encoding: count,
    $user_version: count,
    $application_id: count
);

on Database::pages -> event SQLITE3_DB::page(
    $data: bytes
);