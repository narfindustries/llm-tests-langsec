module GIF;

public type GIF = unit {
    header: Header;
    logical_screen_descriptor: LogicalScreenDescriptor;
    global_color_table: GlobalColorTable if ((logical_screen_descriptor.packed_fields & 0x80) != 0);
    blocks: GIFBlocks[];
    trailer: uint8;
};

type Header = unit {
    signature: bytes &size=3;
    version: bytes &size=3;
};

type LogicalScreenDescriptor = unit {
    logical_screen_width: uint16;
    logical_screen_height: uint16;
    packed_fields: uint8;
    background_color_index: uint8;
    pixel_aspect_ratio: uint8;
};

type GlobalColorTable = unit {
    colors: byte[] &size=3 * (2 ** ((logical_screen_descriptor.packed_fields & 0x07) + 1));
};

type GIFBlocks = unit {
    block: GIFBlock;
};

type GIFBlock = unit {
    block_type: uint8;
    case (block_type) {
        0x2C -> image_block: ImageBlock;
        0x21 -> extension_block: ExtensionBlock;
        default -> unknown_block: UnknownBlock;
    }
};

type ImageBlock = unit {
    image_descriptor: ImageDescriptor;
    local_color_table: LocalColorTable if ((image_descriptor.packed_fields & 0x80) != 0);
    image_data: ImageData;
};

type ImageDescriptor = unit {
    image_left_position: uint16;
    image_top_position: uint16;
    image_width: uint16;
    image_height: uint16;
    packed_fields: uint8;
};

type LocalColorTable = unit {
    colors: byte[] &size=3 * (2 ** ((image_descriptor.packed_fields & 0x07) + 1));
};

type ImageData = unit {
    lzw_minimum_code_size: uint8;
    data_blocks: DataBlock[];
};

type DataBlock = unit {
    block_size: uint8;
    data: byte[] &size=block_size;
};

type ExtensionBlock = unit {
    extension_label: uint8;
    case (extension_label) {
        0xF9 -> graphic_control_extension: GraphicControlExtension;
        0xFE -> comment_extension: CommentExtension;
        0xFF -> application_extension: ApplicationExtension;
        0x01 -> plain_text_extension: PlainTextExtension;
        default -> unknown_extension: UnknownExtension;
    }
};

type GraphicControlExtension = unit {
    block_size: uint8;
    packed_fields: uint8;
    delay_time: uint16;
    transparent_color_index: uint8;
    terminator: uint8;
};

type CommentExtension = unit {
    comment_data: CommentData;
};

type CommentData = unit {
    blocks: CommentBlock[];
};

type CommentBlock = unit {
    block_size: uint8;
    data: byte[] &size=block_size;
};

type ApplicationExtension = unit {
    block_size: uint8;
    application_identifier: byte[] &size=8;
    application_authentication_code: byte[] &size=3;
    application_data: ApplicationData;
};

type ApplicationData = unit {
    blocks: ApplicationBlock[];
};

type ApplicationBlock = unit {
    block_size: uint8;
    data: byte[] &size=block_size;
};

type PlainTextExtension = unit {
    block_size: uint8;
    text_grid_left_position: uint16;
    text_grid_top_position: uint16;
    text_grid_width: uint16;
    text_grid_height: uint16;
    character_cell_width: uint8;
    character_cell_height: uint8;
    text_foreground_color_index: uint8;
    text_background_color_index: uint8;
    plain_text_data: PlainTextData;
};

type PlainTextData = unit {
    blocks: PlainTextBlock[];
};

type PlainTextBlock = unit {
    block_size: uint8;
    data: byte[] &size=block_size;
};

type UnknownBlock = unit {
    data: byte[];
};

type UnknownExtension = unit {
    data: byte[];
};