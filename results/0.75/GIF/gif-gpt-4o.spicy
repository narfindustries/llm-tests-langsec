module GIF;

type GlobalColorTable = unit {
    entries: bytes &size=(3 * (1 << (context.size_of_global_color_table + 1)));
};

type LocalColorTable = unit {
    entries: bytes &size=(3 * (1 << (context.size_of_local_color_table + 1)));
};

type ImageDataBlock = unit {
    block_size: uint8;
    data: bytes &size=block_size;
};

type ImageData = unit {
    lzw_minimum_code_size: uint8;
    blocks: array of ImageDataBlock &until(.block_size == 0);
};

type GraphicControlExtension = unit {
    block_size: uint8 &assert(block_size == 4);
    packed_fields: uint8;
    delay_time: uint16;
    transparent_color_index: uint8;
    block_terminator: uint8 &assert(block_terminator == 0);
};

type CommentExtension = unit {
    blocks: array of ImageDataBlock &until(.block_size == 0);
};

type PlainTextExtension = unit {
    block_size: uint8 &assert(block_size == 12);
    text_grid_left_position: uint16;
    text_grid_top_position: uint16;
    text_grid_width: uint16;
    text_grid_height: uint16;
    character_cell_width: uint8;
    character_cell_height: uint8;
    text_foreground_color_index: uint8;
    text_background_color_index: uint8;
    blocks: array of ImageDataBlock &until(.block_size == 0);
};

type ApplicationExtension = unit {
    block_size: uint8 &assert(block_size == 11);
    application_identifier: bytes &size=8;
    application_auth_code: bytes &size=3;
    blocks: array of ImageDataBlock &until(.block_size == 0);
};

type Extension = unit {
    extension_introducer: uint8 &assert(extension_introducer == 0x21);
    extension_label: uint8;
    body: switch(extension_label) {
        0xF9 => GraphicControlExtension,
        0xFE => CommentExtension,
        0x01 => PlainTextExtension,
        0xFF => ApplicationExtension,
    };
};

type ImageDescriptor = unit {
    image_separator: uint8 &assert(image_separator == 0x2C);
    image_left_position: uint16;
    image_top_position: uint16;
    image_width: uint16;
    image_height: uint16;
    packed_fields: uint8;
    size_of_local_color_table: uint8 &eval=(packed_fields & 0x07);
    local_color_table: optional<LocalColorTable> &if(packed_fields & 0x80 != 0);
    image_data: ImageData;
};

type GIF = unit {
    header: bytes &size=6 &assert(header == "GIF89a");
    logical_screen_width: uint16;
    logical_screen_height: uint16;
    packed_fields: uint8;
    background_color_index: uint8;
    pixel_aspect_ratio: uint8;
    size_of_global_color_table: uint8 &eval=(packed_fields & 0x07);
    global_color_table: optional<GlobalColorTable> &if(packed_fields & 0x80 != 0);
    blocks: array of unit {
        extension: optional<Extension> &if(peek() == 0x21);
        image_descriptor: optional<ImageDescriptor> &if(peek() == 0x2C);
    } &until(peek() == 0x3B);
    trailer: uint8 &assert(trailer == 0x3B);
};