module ELF;

import spicy;

public type ElfHeader = unit {
    magic: bytes &length=4 &assertion=$$ == b"\x7fELF";
    class: uint8;
    data: uint8;
    version: uint8;
    os_abi: uint8;
    abi_version: uint8;
    pad: bytes &length=7;
    type: uint16;
    machine: uint16;
    version_2: uint32;
    entry: uint32;
    phoff: uint32;
    shoff: uint32;
    flags: uint32;
    ehsize: uint16;
    phentsize: uint16;
    phnum: uint16;
    shentsize: uint16;
    shnum: uint16;
    shstrndx: uint16;
};

public type ProgramHeader = unit {
    type: uint32;
    offset: uint32;
    vaddr: uint32;
    paddr: uint32;
    filesz: uint32;
    memsz: uint32;
    flags: uint32;
    align: uint32;
};

public type ElfFile = unit {
    header: ElfHeader;
    program_headers: array of ProgramHeader &size=header.phnum;
} &byte-order=spicy::byte-order(header.data == 1 ? spicy::byte-order::Little : spicy::byte-order::Big);

public function parse_elf_file(data: bytes): ElfFile {
    return parse(data);
}

event zeek_init() {
    local f = open("example.elf");
    if ( f == nil )
        {
        print "Failed to open file.";
        return;
        }

    local size = f$size;
    local data = f$read(size);
    local elf = parse_elf_file(data);
    print fmt("ELF file parsed: entry = 0x%x", elf.header.entry);
}
