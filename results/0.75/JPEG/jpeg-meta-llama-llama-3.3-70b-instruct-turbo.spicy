module JPEG;

type SOI = struct {
  marker: uint8 = 0xFF
  marker_type: uint8 = 0xD8
}

type APP0 = struct {
  marker: uint8 = 0xFF
  marker_type: uint8 = 0xE0
  length: uint16
  identifier: string(5) = "JFIF\0"
  version: uint16
  units: uint8
  density_units: enum {
    no_units = 0x00
    pixels_per_inch = 0x01
    pixels_per_centimeter = 0x02
  }
  x_density: uint16
  y_density: uint16
  x_thumbnail: uint8
  y_thumbnail: uint8
}

type APP1 = struct {
  marker: uint8 = 0xFF
  marker_type: uint8 = 0xE1
  length: uint16
  identifier: string = "Exif\0"
  exif_data: bytes
}

type DQT = struct {
  marker: uint8 = 0xFF
  marker_type: uint8 = 0xDB
  length: uint16
  table_number: uint8
  precision: uint8
  quantization_table: bytes
}

type DHT = struct {
  marker: uint8 = 0xFF
  marker_type: uint8 = 0xC4
  length: uint16
  table_class: uint8
  table_number: uint8
  huffman_table: bytes
}

type SOF0 = struct {
  marker: uint8 = 0xFF
  marker_type: uint8 = 0xC0
  length: uint16
  precision: uint8
  image_height: uint16
  image_width: uint16
  number_of_components: uint8
  components: array[number_of_components] of struct {
    component_id: uint8
    horizontal_sampling_factor: uint8
    vertical_sampling_factor: uint8
    quantization_table_number: uint8
  }
}

type SOF2 = struct {
  marker: uint8 = 0xFF
  marker_type: uint8 = 0xC2
  length: uint16
  progressive: uint8
  image_height: uint16
  image_width: uint16
  number_of_components: uint8
  components: array[number_of_components] of struct {
    component_id: uint8
    horizontal_sampling_factor: uint8
    vertical_sampling_factor: uint8
    quantization_table_number: uint8
  }
}

type DRI = struct {
  marker: uint8 = 0xFF
  marker_type: uint8 = 0xDD
  length: uint16
  restart_interval: uint16
}

type SOS = struct {
  marker: uint8 = 0xFF
  marker_type: uint8 = 0xDA
  length: uint16
  number_of_components: uint8
  components: array[number_of_components] of struct {
    component_id: uint8
    dc_entropy_coding_table_number: uint8
    ac_entropy_coding_table_number: uint8
  }
  scan_data: bytes
}

type RST = struct {
  marker: uint8 = 0xFF
  marker_type: uint8
  valid_marker_type: enum {
    rst0 = 0xD0
    rst1 = 0xD1
    rst2 = 0xD2
    rst3 = 0xD3
    rst4 = 0xD4
    rst5 = 0xD5
    rst6 = 0xD6
    rst7 = 0xD7
  }
  marker_type: valid_marker_type
}

type EOI = struct {
  marker: uint8 = 0xFF
  marker_type: uint8 = 0xD9
}

type JPEG = struct {
  soi: SOI
  app0: APP0
  app1: optional APP1
  dqt: array[4] of optional DQT
  dht: array[4] of optional DHT
  sof0: SOF0
  sof2: optional SOF2
  dri: optional DRI
  sos: SOS
  rst: array[8] of optional RST
  eoi: EOI
}

let jpeg = JPEG;