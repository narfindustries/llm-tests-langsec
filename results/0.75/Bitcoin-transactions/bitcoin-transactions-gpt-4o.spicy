module BitcoinTransaction;

public type VarInt = unit {
    var value: uint64;
    var size: uint8;

    on %init {
        local first_byte = parse_byte();
        switch (first_byte) {
            case 0xfd: {
                size = 3;
                value = parse_uint16();
            }
            case 0xfe: {
                size = 5;
                value = parse_uint32();
            }
            case 0xff: {
                size = 9;
                value = parse_uint64();
            }
            default: {
                size = 1;
                value = uint64(first_byte);
            }
        }
    }

    function parse_byte() : uint8 {
        return %byte;
    }

    function parse_uint16() : uint16 {
        return %uint16;
    }

    function parse_uint32() : uint32 {
        return %uint32;
    }

    function parse_uint64() : uint64 {
        return %uint64;
    }
};

public type TransactionInput = unit {
    previous_transaction_hash: bytes &length=32;
    output_index: uint32;
    script_length: VarInt;
    signature_script: bytes &length=script_length.value;
    sequence: uint32;
};

public type TransactionOutput = unit {
    value: uint64;
    script_length: VarInt;
    locking_script: bytes &length=script_length.value;
};

public type BitcoinTransaction = unit {
    version: uint32;
    input_count: VarInt;
    inputs: TransactionInput[input_count.value];
    output_count: VarInt;
    outputs: TransactionOutput[output_count.value];
    lock_time: uint32;
};