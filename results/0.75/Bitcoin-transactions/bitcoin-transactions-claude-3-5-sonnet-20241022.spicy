module Bitcoin;

public type Transaction = unit {
    version: uint32;
    has_witness: bool;
    marker: uint8 &if=($input.length() >= 2 && self.has_witness);
    flag: uint8 &if=($input.length() >= 2 && self.has_witness);
    input_count: VarInt;
    inputs: Input[self.input_count.value];
    output_count: VarInt;
    outputs: Output[self.output_count.value];
    witnesses: Witness[self.input_count.value] &if=(self.has_witness);
    lock_time: uint32;
};

type VarInt = unit {
    prefix: uint8;
    value: uint64;
};

on VarInt::%done {
    if (self.prefix < 0xfd)
        self.value = self.prefix;
    else if (self.prefix == 0xfd)
        self.value = cast<uint64>(self.data);
    else if (self.prefix == 0xfe)
        self.value = cast<uint64>(self.data);
    else
        self.value = cast<uint64>(self.data);
}

type Input = unit {
    prev_tx_hash: bytes &size=32;
    prev_output_index: uint32;
    script_length: VarInt;
    script_sig: bytes &size=self.script_length.value;
    sequence: uint32;
};

type Output = unit {
    value: uint64;
    script_length: VarInt;
    script_pubkey: bytes &size=self.script_length.value;
};

type Witness = unit {
    stack_size: VarInt;
    stack_items: WitnessStackItem[self.stack_size.value];
};

type WitnessStackItem = unit {
    item_length: VarInt;
    item: bytes &size=self.item_length.value;
};