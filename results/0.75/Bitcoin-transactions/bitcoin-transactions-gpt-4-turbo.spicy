module Bitcoin;

public type TransactionOutput = unit {
    value: uint64;
    script_len: uint8;
    script: bytes &size=script_len;
};

public type Transaction = unit {
    version: int32;
    input_count: uint8;
    inputs: TransactionInput(input_count)[];

    output_count: uint8;
    outputs: TransactionOutput(output_count)[];

    lock_time: uint32;
};

public type TransactionInput = unit(count: uint8) {
    previous_output: bytes &size=32; // Transaction hash
    output_index: uint32;
    script_len: uint8;
    script: bytes &size=script_len;
    sequence: uint32;
};

public type Block = unit {
    magic: uint32;
    block_size: uint32;
    version: int32;
    prev_block: bytes &size=32;
    merkle_root: bytes &size=32;
    timestamp: uint32;
    bits: uint32;
    nonce: uint32;

    transaction_count: uint32;
    transactions: Transaction(transaction_count)[];

    on $.done {
        print "Parsed a Bitcoin block with", len(self.transactions), "transactions.";
    }
};

event zeek_init() {
    print "Bitcoin protocol parser loaded.";
}