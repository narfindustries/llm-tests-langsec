module BitcoinTransactions;

type uint32le = uint32 (endianness=little);
type uint64le = uint64 (endianness=little);
type bytes = vector(uint8);

type varint = 
  match value
    0xfd => value: uint16le
    0xfe => value: uint32le
    0xff => value: uint64le
    _    => value: uint8
  end;

type bitcoin_transaction = 
  record {
    version: uint32le,
    tx_in_count: varint,
    tx_in: array(varint) of bitcoin_transaction_input,
    tx_out_count: varint,
    tx_out: array(varint) of bitcoin_transaction_output,
    locktime: uint32le
  };

type bitcoin_transaction_input = 
  record {
    txid: bytes(32),
    vout: uint32le,
    scriptSig: bytes,
    sequence: uint32le
  };

type bitcoin_transaction_output = 
  record {
    value: uint64le,
    scriptPubKey: bytes
  };

type bitcoin_block_header = 
  record {
    version: uint32le,
    prev_block: bytes(32),
    merkle_root: bytes(32),
    timestamp: uint32le,
    target: uint32le,
    nonce: uint32le
  };

parser bitcoin_transaction_p = 
  (version: uint32le, 
   tx_in_count: varint_p, 
   tx_in: array(tx_in_count.value) of bitcoin_transaction_input_p, 
   tx_out_count: varint_p, 
   tx_out: array(tx_out_count.value) of bitcoin_transaction_output_p, 
   locktime: uint32le);

parser varint_p = 
  (value: uint8) => 
    value <= 0xfc => value,
    value == 0xfd => (value: uint16le),
    value == 0xfe => (value: uint32le),
    value == 0xff => (value: uint64le);

parser bitcoin_transaction_input_p = 
  (txid: bytes(32), 
   vout: uint32le, 
   scriptSig: bytes, 
   sequence: uint32le);

parser bitcoin_transaction_output_p = 
  (value: uint64le, 
   scriptPubKey: bytes);

parser bitcoin_block_header_p = 
  (version: uint32le, 
   prev_block: bytes(32), 
   merkle_root: bytes(32), 
   timestamp: uint32le, 
   target: uint32le, 
   nonce: uint32le);

parser bitcoin_block_p = 
  (block_header: bitcoin_block_header_p, 
   tx_count: varint_p, 
   tx: array(tx_count.value) of bitcoin_transaction_p);