module BitcoinTransactions;

import spicy;

type BitcoinTransaction = unit {
    version: uint32 &byte-order=big-endian;
    input_count: varint;
    inputs: Input[input_count];
    output_count: varint;
    outputs: Output[output_count];
    lock_time: uint32 &byte-order=big-endian;
};

type Input = unit {
    previous_output_hash: bytes &size=32;
    previous_output_index: uint32 &byte-order=big-endian;
    script_length: varint;
    script: bytes &size=script_length;
    sequence: uint32 &byte-order=big-endian;
};

type Output = unit {
    value: uint64 &byte-order=big-endian;
    script_length: varint;
    script: bytes &size=script_length;
};

type varint = unit {
    value: uint64 &byte-order=big-endian &convert=varint_to_uint64;
};

function varint_to_uint64(v: varint): uint64 {
    if (v.value < 0xFD) {
        return v.value;
    } else if (v.value == 0xFD) {
        return v.value & 0xFFFF;
    } else if (v.value == 0xFE) {
        return v.value & 0xFFFFFFFF;
    } else {
        return v.value & 0xFFFFFFFFFFFFFFFF;
    }
}

on BitcoinTransaction::%done {
    print "Bitcoin transaction parsed successfully";
}