meta:
  id: tls_client_hello
  title: TLS Client Hello
  file-extension: tls
  endian: be
  license: CC0-1.0
  ks-version: 0.9

doc: |
  The Client Hello message is used in the TLS protocol (SSL 3.0 and higher) to
  start a session between client and server. This structure parses the initial
  part of the message to extract basic details like version and random data.

seq:
  - id: message_type
    type: u1
    enum: handshake_type
    doc: Type of handshake message (should be 1 for ClientHello)

  - id: length
    type: u3
    doc: Length of the handshake message

  - id: version
    type: version
    doc: Version of the TLS protocol used in the communication

  - id: random
    size: 32
    doc: Random data generated by the client

  - id: session_id
    type: pref_str
    doc: Session identifier for session resumption

  - id: cipher_suites
    type: pref_arr<u2>
    doc: List of cipher suites offered by the client

  - id: compression_methods
    type: pref_arr<u1>
    doc: List of compression methods supported by the client

  - id: extensions_len
    type: u2
    if: _io.pos + 2 <= _io.size
    doc: Length of the list of extensions, present if there are extensions

  - id: extensions
    type: extensions
    size: extensions_len
    if: extensions_len != null
    doc: List of extensions in the client hello message

types:
  version:
    seq:
      - id: major
        type: u1
        doc: Major version number
      - id: minor
        type: u1
        doc: Minor version number

  pref_str:
    seq:
      - id: len
        type: u1
        doc: Length of the string
      - id: data
        type: str
        size: len
        encoding: ASCII
        doc: Actual string data

  pref_arr:
    params:
      - id: type
        type: type
    seq:
      - id: len
        type: u2
        doc: "Number of items in the array"
      - id: items
        type: type
        repeat: expr
        repeat-expr: len

  extensions:
    seq:
      - id: extensions
        type: extension
        repeat: eos

  extension:
    seq:
      - id: type
        type: u2
        enum: extension_type
      - id: length
        type: u2
        doc: Length of the extension data
      - id: data
        size: length
        type: switch-on: type
        cases:
          'extension_type::server_name': server_name
          'extension_type::supported_groups': supported_groups
          'extension_type::signature_algorithms': signature_algorithms
          # You can add more specific parsers for each extension type

enums:
  handshake_type:
    1: client_hello

  extension_type:
    0: server_name
    10: supported_groups
    13: signature_algorithms

  # More specific parsers can be added here for each extension's payload
  server_name:
    seq:
      - id: list_length
        type: u2
      - id: server_name_list
        type: server_name_type
        repeat: expr
        repeat-expr: list_length

  server_name_type:
    seq:
      - id: type
        type: u1
      - id: length
        type: u2
      - id: name
        type: str
        size: length
        encoding: ASCII

  supported_groups:
    seq:
      - id: list_length
        type: u2
      - id: groups
        type: u2
        repeat: expr
        repeat-expr: list_length

  signature_algorithms:
    seq:
      - id: algorithms
        type: u2
        repeat: eos