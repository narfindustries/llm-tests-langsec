module GZIP;

type GzipHeader = record {
  id1: uint8 = 0x1F;
  id2: uint8 = 0x8B;
  cm: uint8 = 0x08;
  flags: uint8;
  mtime: uint32;
  xfl: uint8;
  os: uint8;
};

type GzipExtra = record {
  xlen: uint16;
  extra: bytestring &length=xlen;
} &if flags&0x04 != 0;

type GzipFilename = record {
  fname: bytestring &until=(this[-1] == 0x00);
} &if flags&0x08 != 0;

type GzipComment = record {
  fcomment: bytestring &until=(this[-1] == 0x00);
} &if flags&0x10 != 0;

type GzipHeaderCRC = record {
  hcrc: uint16;
} &if flags&0x02 != 0;

type GzipData = record {
  compr: bytestring;
  isize: uint32;
};

type GzipFile = record {
  header: GzipHeader;
  extra: GzipExtra;
  filename: GzipFilename;
  comment: GzipComment;
  header_crc: GzipHeaderCRC;
  data: GzipData;
} &byteorder=little;