module TIFF;

type ByteOrder = enum {
  Motorola,
  Intel,
}

type TiffMagic = uint16;

type IfdHeader = uint16;
type IfdTagCount = uint16;
type NextIfdOffset = uint32;

type FieldType = enum {
  Byte,
  Ascii,
  Short,
  Long,
  Rational,
  Sbyte,
  Undefined,
  Sshort,
  Slong,
}

type RationalNumber = struct {
  numerator: uint32,
  denominator: uint32,
}

type TiffTag = struct {
  tag_number: uint16,
  tag_field_type: FieldType,
  tag_count: uint32,
  tag_value: switch (tag_field_type) {
    Byte => uint8,
    Ascii => string,
    Short => uint16,
    Long => uint32,
    Rational => RationalNumber,
    Sbyte => int8,
    Undefined => bytes,
    Sshort => int16,
    Slong => int32,
  },
}

type TiffIfd = struct {
  ifd_header: IfdHeader,
  ifd_tag_count: IfdTagCount,
  tiff_tags: array IfdTagCount of TiffTag,
  next_ifd_offset: NextIfdOffset,
}

type TiffHeader = struct {
  byte_order: ByteOrder,
  tiff_magic: TiffMagic,
  if_file_offset: uint32,
}

type TiffImageFileDirectory = struct {
  image_width: uint16,
  image_length: uint16,
  bits_per_sample: array 4 of uint8,
  compression: uint16,
  photometric_interpretation: uint16,
  orientation: uint16,
  samples_per_pixel: uint8,
  planar_configuration: uint16,
  ycbcr_sub_sampling: uint16,
  ycbcr_positioning: uint16,
  x_resolution: RationalNumber,
  y_resolution: RationalNumber,
  resolution_unit: uint8,
  software: string,
  datetime: string,
  artist: string,
  image_description: string,
  make: string,
  model: string,
  strip_offsets: uint32,
  strip_byte_counts: uint32,
  jpeg_tables: bytes,
  transfer_function: bytes,
  white_point: RationalNumber,
  primary_chromaticities: RationalNumber,
  ycbcr_coefficients: RationalNumber,
  reference_black_white: RationalNumber,
  datetime_original: string,
  image_unique_id: string,
}

let tiff_file = struct {
  header: TiffHeader,
  ifd: TiffIfd,
  image_file_directory: TiffImageFileDirectory,
}