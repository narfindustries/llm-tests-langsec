module TIFF;

import zeek;

# Define an enum for the byte order of the TIFF file
type ByteOrder = enum {
    II = 0x4949,    # Little-endian
    MM = 0x4D4D     # Big-endian
};

# Define an enum for the compression types
type Compression = enum {
    NoCompression = 1,
    CCITT_1D = 2,
    Group3Fax = 3,
    Group4Fax = 4,
    LZW = 5,
    JPEG = 6,  # Deprecated in TIFF 6.0
    PackBits = 32773
};

# Define an enum for photometric interpretations
type PhotometricInterpretation = enum {
    WhiteIsZero = 0,
    BlackIsZero = 1,
    RGB = 2,
    PaletteColor = 3,
    TransparencyMask = 4,
    CMYK = 5,
    YCbCr = 6,
    CIELab = 8
};

# Define an enum for resolution units
type ResolutionUnit = enum {
    NoAbsoluteUnit = 1,
    Inch = 2,
    Centimeter = 3
};

# Define a struct for the IFD entry
type IFDEntry = unit {
    tag: uint16;
    type_: uint16;  # Renamed to type_ to avoid conflict
    count: uint32;
    value_offset: uint32;
};

# Define a unit for the TIFF file
public type TIFF = unit {
    byte_order: ByteOrder;
    version: uint16 &check= (self.version == 42);
    ifd_offset: uint32;

    on %init {
        if ( self.byte_order == ByteOrder::II ) {
            %byteorder=little;
        } else {
            %byteorder=big;
        }
    }

    ifds: vector of IFDEntry &until($input.eod());

    on %done {
        # Optional: process IFDs after parsing
        for ( i in self.ifds )
            print(fmt("Tag: %d, Type: %d, Count: %d, Value Offset: %d", i.tag, i.type_, i.count, i.value_offset));
    }
};