module ZIP;

public type Archive = unit {
    var count: uint64;
    var total_size: uint64;

    : LocalFileHeader[] &eod;

    on %done {
        self.count = |self.LocalFileHeader|;
        self.total_size = 0;
        for ( h in self.LocalFileHeader ) {
            self.total_size += h.compressed_size;
        }
    }
};

type LocalFileHeader = unit {
    signature: bytes &size=4;
    version: uint16;
    flags: uint16;
    compression: uint16;
    mod_time: uint16;
    mod_date: uint16;
    crc32: uint32;
    compressed_size: uint32;
    uncompressed_size: uint32;
    filename_length: uint16;
    extra_field_length: uint16;
    filename: bytes &size=self.filename_length;
    extra_field: bytes &size=self.extra_field_length;
    file_data: bytes &size=self.compressed_size;

    on %init {
        if ( self.signature != b"PK\x03\x04" )
            self.stop();
    }
};

on Archive::%done {
    print "ZIP Archive processed:";
    print fmt("  Number of files: %d", self.count);
    print fmt("  Total compressed size: %d bytes", self.total_size);
}