module ZIP;

type LocalFileHeader = unit {
    signature: bytes &size=4;
    version_needed: uint16;
    flags: uint16;
    compression_method: uint16;
    last_mod_time: uint16;
    last_mod_date: uint16;
    crc32: bytes &size=4;
    compressed_size: uint32;
    uncompressed_size: uint32;
    filename_length: uint16;
    extra_field_length: uint16;
    filename: bytes &size=self.filename_length;
    extra_field: bytes &size=self.extra_field_length;
};

type CentralDirectoryHeader = unit {
    signature: bytes &size=4;
    version_made_by: uint16;
    version_needed: uint16;
    flags: uint16;
    compression_method: uint16;
    last_mod_time: uint16;
    last_mod_date: uint16;
    crc32: bytes &size=4;
    compressed_size: uint32;
    uncompressed_size: uint32;
    filename_length: uint16;
    extra_field_length: uint16;
    file_comment_length: uint16;
    disk_number_start: uint16;
    internal_file_attributes: uint16;
    external_file_attributes: uint32;
    relative_offset: uint32;
    filename: bytes &size=self.filename_length;
    extra_field: bytes &size=self.extra_field_length;
    file_comment: bytes &size=self.file_comment_length;
};

type EndOfCentralDirectory = unit {
    signature: bytes &size=4;
    disk_number: uint16;
    start_disk_number: uint16;
    total_entries_disk: uint16;
    total_entries: uint16;
    central_directory_size: uint32;
    central_directory_offset: uint32;
    comment_length: uint16;
    comment: bytes &size=self.comment_length;
};

type ZIP64EndOfCentralDirectory = unit {
    signature: bytes &size=4;
    record_size: uint64;
    version_made_by: uint16;
    version_needed: uint16;
    disk_number: uint32;
    start_disk_number: uint32;
    total_entries_disk: uint64;
    total_entries: uint64;
    central_directory_size: uint64;
    central_directory_offset: uint64;
    extensible_data: bytes &size=self.record_size - 44;
};

type ZIP64EndOfCentralDirectoryLocator = unit {
    signature: bytes &size=4;
    disk_number: uint32;
    central_directory_offset: uint64;
    total_disks: uint32;
};

type DataDescriptor = unit {
    signature: bytes &size=4;
    crc32: bytes &size=4;
    compressed_size: uint32;
    uncompressed_size: uint32;
};

type ZIP64DataDescriptor = unit {
    signature: bytes &size=4;
    crc32: bytes &size=4;
    compressed_size: uint64;
    uncompressed_size: uint64;
};

public type ZIPFile = unit {
    local_headers: LocalFileHeader[];
    central_directory: CentralDirectoryHeader[];
    on %done {
        if ( ${end_of_central_directory.total_entries} == 0xFFFF ) {
            self.has_zip64 = True;
        }
    }
    var has_zip64: bool;
    zip64_end_of_central_directory: ZIP64EndOfCentralDirectory;
    zip64_end_of_central_directory_locator: ZIP64EndOfCentralDirectoryLocator;
    end_of_central_directory: EndOfCentralDirectory;
};