module ZIP;

type local_file_header_record: record {
  local_file_header_signature: uint32 = 0x04034b50;
  version_needed_to_extract: uint16;
  general_purpose_bit_flag: uint16;
  compression_method: uint16;
  last_modified_time: uint16;
  last_modified_date: uint16;
  crc32: uint32;
  compressed_size: uint32;
  uncompressed_size: uint32;
  filename_length: uint16;
  extra_field_length: uint16;
};

type extra_field_record: record {
  extra_field_data: byte[string];
};

type data_descriptor_record: record {
  data_descriptor_signature: uint32 = 0x08074b50;
  crc32: uint32;
  compressed_size: uint32;
  uncompressed_size: uint32;
};

type central_directory_record: record {
  central_directory_header_signature: uint32 = 0x02014b50;
  version_made_by: uint16;
  version_needed_to_extract: uint16;
  general_purpose_bit_flag: uint16;
  compression_method: uint16;
  last_modified_time: uint16;
  last_modified_date: uint16;
  crc32: uint32;
  compressed_size: uint32;
  uncompressed_size: uint32;
  filename_length: uint16;
  extra_field_length: uint16;
  file_comment_length: uint16;
  disk_number_start: uint16;
  internal_file_attributes: uint16;
  external_file_attributes: uint32;
  relative_offset_of_local_header: uint32;
};

type zip64_end_of_central_directory_record: record {
  zip64_eocd_signature: uint32 = 0x06064b50;
  size_of_zip64_eocd: uint64;
  version_made_by: uint16;
  version_needed_to_extract: uint16;
  number_of_this_disk: uint32;
  number_of_the_disk_where_the_central_directory_starts: uint32;
  number_of_entries_in_the_central_directory_on_this_disk: uint64;
  total_number_of_entries_in_the_central_directory: uint64;
  size_of_the_central_directory: uint64;
  offset_of_the_central_directory: uint64;
};

type end_of_central_directory_record: record {
  eocd_signature: uint32 = 0x06054b50;
  number_of_this_disk: uint16;
  number_of_the_disk_where_the_central_directory_starts: uint16;
  number_of_entries_in_the_central_directory_on_this_disk: uint16;
  total_number_of_entries_in_the_central_directory: uint16;
  size_of_the_central_directory: uint32;
  offset_of_the_central_directory: uint32;
  comment_length: uint16;
};

type zip_file_comment_record: record {
  comment: byte[string];
};

type file_name_record: record {
  filename: byte[string];
};

type file_data_record: record {
  file_data: byte[string];
};

type zip_file: record {
  local_file_header: local_file_header_record;
  file_name: file_name_record;
  extra_field: extra_field_record;
  file_data: file_data_record;
  data_descriptor: data_descriptor_record &optional;
};

type zip_archive: record {
  central_directory: central_directory_record &optional;
  zip64_end_of_central_directory: zip64_end_of_central_directory_record &optional;
  end_of_central_directory: end_of_central_directory_record;
  zip_file_comment: zip_file_comment_record &optional;
};

let zip_file_format = ftp(z => 
  z.local_file_header 
  + z.file_name 
  + z.extra_field 
  + z.file_data 
  + (z.data_descriptor &optional)
);

let zip_archive_format = ftp(z => 
  (z.central_directory &optional) 
  + (z.zip64_end_of_central_directory &optional) 
  + z.end_of_central_directory 
  + (z.zip_file_comment &optional)
);