module Modbus;

type ModbusFrame {
  transaction_id: uint16;
  protocol_id: uint16;
  length: uint16;
  unit_id: uint8;
  function_code: uint8;

  read_coils_request: optional { starting_address: uint16; quantity: uint16; };
  read_discrete_inputs_request: optional { starting_address: uint16; quantity: uint16; };
  read_holding_registers_request: optional { starting_address: uint16; quantity: uint16; };
  read_input_registers_request: optional { starting_address: uint16; quantity: uint16; };
  write_single_coil_request: optional { output_address: uint16; output_value: uint16; };
  write_single_register_request: optional { register_address: uint16; register_value: uint16; };
  write_multiple_coils_request: optional { starting_address: uint16; quantity_of_outputs: uint16; byte_count: uint8; output_values: bytes; };
  write_multiple_registers_request: optional { starting_address: uint16; quantity_of_registers: uint16; byte_count: uint8; register_values: bytes; };

  read_coils_response: optional { byte_count: uint8; coil_status: bytes; };
  read_discrete_inputs_response: optional { byte_count: uint8; input_status: bytes; };
  read_holding_registers_response: optional { byte_count: uint8; register_values: bytes; };
  read_input_registers_response: optional { byte_count: uint8; register_values: bytes; };
  write_single_coil_response: optional { output_address: uint16; output_value: uint16; };
  write_single_register_response: optional { register_address: uint16; register_value: uint16; };
  write_multiple_coils_response: optional { starting_address: uint16; quantity_of_outputs: uint16; };
  write_multiple_registers_response: optional { starting_address: uint16; quantity_of_registers: uint16; };

  exception_response: optional { exception_code: uint8; };
};
