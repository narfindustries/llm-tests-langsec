module Modbus;

type ModbusRTU = unit {
    address: uint8;
    function_code: uint8;
    data: bytes &restofdata;
    crc: uint16;
};

type ModbusTCP = unit {
    transaction_id: uint16;
    protocol_id: uint16;
    length: uint16;
    unit_id: uint8;
    function_code: uint8;
    data: bytes &size=(length - 2);
};

type ModbusMessage = unit {
    is_tcp: bool;
    body: case is_tcp {
        true  -> ModbusTCP;
        false -> ModbusRTU;
    };
};

public type ModbusException = enum(uint8) {
    IllegalFunction = 1,
    IllegalDataAddress = 2,
    IllegalDataValue = 3,
    SlaveDeviceFailure = 4,
    Acknowledge = 5,
    SlaveDeviceBusy = 6,
    MemoryParityError = 8,
    GatewayPathUnavailable = 10,
    GatewayTargetDeviceFailedToRespond = 11
};

public type ModbusFunctionCode = enum(uint8) {
    ReadCoils = 1,
    ReadDiscreteInputs = 2,
    ReadHoldingRegisters = 3,
    ReadInputRegisters = 4,
    WriteSingleCoil = 5,
    WriteSingleRegister = 6,
    WriteMultipleCoils = 15,
    WriteMultipleRegisters = 16,
    MaskWriteRegister = 22,
    ReadWriteMultipleRegisters = 23
};

public export {
    function parse_modbus_message(data: bytes, is_tcp: bool) : ModbusMessage {
        return parse(data, is_tcp);
    }
}