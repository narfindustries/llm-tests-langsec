module Modbus;

import spicy;

public type ModbusHeader = unit {
    transaction_id: uint16;
    protocol_id: uint16;
    length: uint16;
    unit_id: uint8;
    function_code: uint8;
    
    on %done {
        self.length = self.length;
    }
};

public type ModbusRequest = unit {
    header: ModbusHeader;
    
    switch ( self.header.function_code ) {
        0x01, 0x02, 0x03, 0x04 -> read_request: ReadRequest;
        0x05, 0x06 -> single_write: SingleWrite;
        0x0F, 0x10 -> multiple_write: MultipleWrite;
        * -> unknown: bytes &eod;
    };
};

public type ModbusResponse = unit {
    header: ModbusHeader;
    
    switch ( self.header.function_code ) {
        0x01, 0x02, 0x03, 0x04 -> read_response: ReadResponse;
        0x05, 0x06 -> single_write: SingleWrite;
        0x0F, 0x10 -> multiple_write_response: MultipleWriteResponse;
        0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x8F, 0x90 -> error: ErrorResponse;
        * -> unknown: bytes &eod;
    };
};

type ReadRequest = unit {
    start_address: uint16;
    quantity: uint16;
};

type ReadResponse = unit {
    byte_count: uint8;
    values: bytes &size=self.byte_count;
};

type SingleWrite = unit {
    address: uint16;
    value: uint16;
};

type MultipleWrite = unit {
    start_address: uint16;
    quantity: uint16;
    byte_count: uint8;
    values: bytes &size=self.byte_count;
};

type MultipleWriteResponse = unit {
    start_address: uint16;
    quantity: uint16;
};

type ErrorResponse = unit {
    exception_code: uint8;
};