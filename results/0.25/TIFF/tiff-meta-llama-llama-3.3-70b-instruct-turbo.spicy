module TIFF;

type tiff_header = record {
  byte_order = uint16;
  version = uint16;
};

type ifd_entry = record {
  tag = uint16;
  type = uint16;
  count = uint32;
  value = data;
};

type ifd = record {
  num_entries = uint16;
  entries = vector of ifd_entry;
  next_ifd_offset = uint32;
};

type tiff = record {
  header = tiff_header;
  ifd = ifd;
};

type data = case ifd_entry_type of {
  1 => uint8,  # BYTE
  2 => uint8,  # ASCII
  3 => uint16,  # SHORT
  4 => uint32,  # LONG
  5 => rational,  # RATIONAL
  6 => int8,  # SBYTE
  7 => uint8,  # UNDEFINED
  8 => int16,  # SSHORT
  9 => int32,  # SLONG
  10 => srational,  # SRATIONAL
};

type ifd_entry_type = uint16;

type rational = record {
  numerator = uint32;
  denominator = uint32;
};

type srational = record {
  numerator = int32;
  denominator = int32;
};

type tag_numbers = enum {
  ImageWidth,
  ImageLength,
  BitsPerSample,
  Compression,
  PhotometricInterpretation,
  Orientation,
  SamplesPerPixel,
  PlanarConfiguration,
  YCbCrSubSampling,
  YCbCrPositioning,
  XResolution,
  YResolution,
  ResolutionUnit,
  DateTime,
  Artist,
  ImageDescription,
  Make,
  Model,
  Software,
  DateTimeOriginal,
  DateTimeDigitized,
};

type compression = enum {
  None,
  CCITTGroup3,
  CCITTGroup4,
  LZW,
  PackBits,
};

type photometric_interpretation = enum {
  WhiteIsZero,
  BlackIsZero,
  RGB,
  PaletteColor,
};

type orientation = enum {
  TopLeft,
  TopRight,
  BottomRight,
  BottomLeft,
  LeftTop,
  RightTop,
  RightBottom,
  LeftBottom,
};

type planar_configuration = enum {
  Chunky,
  Planar,
};

type ycbcr_sub_sampling = enum {
  YCbCr444,
  YCbCr422,
  YCbCr420,
};

type ycbcr_positioning = enum {
  CoSited,
  NonCoSited,
};

type resolution_unit = enum {
  None,
  Inch,
  Centimeter,
};

let tiff_parser = TIFF::tiff; // parser for TIFF file format