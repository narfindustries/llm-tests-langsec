module GIF;

public type GIF = unit {
    header: Header,
    blocks: list<Block> &until=block_end,
};

type Header = unit {
    signature: string &restof=3 &eod="GIF",
    version: string &restof=3 &eod="89a" | "87a",
};

type Block = unit {
    block_type: uint8,
    body: case block_type of {
        0x2C => ImageBlock,
        0x21 => ExtensionBlock,
        0x3B => TrailerBlock,
    },
};

type ImageBlock = unit {
    left_position: uint16,
    top_position: uint16,
    width: uint16,
    height: uint16,
    packed_fields: PackedFields,
    local_color_table: bytes &size=local_color_table_size,
    image_data: ImageData,
} &check=block_type == 0x2C;

type PackedFields = bitfield {
    local_color_table_flag: bool @0,
    interlace_flag: bool @1,
    sort_flag: bool @2,
    reserved: uint8 @3 &bits=2,
    local_color_table_size_code: uint8 @5 &bits=3,
};

function local_color_table_size(p: PackedFields): uint64 {
    return p.local_color_table_flag ? 3 * (2 ** (p.local_color_table_size_code + 1)) : 0;
}

type ImageData = unit {
    lzw_minimum_code_size: uint8,
    data_sub_blocks: list<DataSubBlock>,
};

type DataSubBlock = unit {
    size: uint8,
    data: bytes &size=size,
} &until=size == 0;

type ExtensionBlock = unit {
    label: uint8,
    data: ExtensionData,
} &check=block_type == 0x21;

type ExtensionData = case label of {
    0xF9 => GraphicControlExtension,
    0xFE => CommentExtension,
    0x01 => PlainTextExtension,
    0xFF => ApplicationExtension,
};

type GraphicControlExtension = unit {
    block_size: uint8 &eod=4,
    packed_fields: GraphicControlPackedFields,
    delay_time: uint16,
    transparent_color_index: uint8,
    block_terminator: uint8 &eod=0,
};

type GraphicControlPackedFields = bitfield {
    reserved: uint8 @0 &bits=3,
    disposal_method: uint8 @3 &bits=3,
    user_input_flag: bool @6,
    transparent_color_flag: bool @7,
};

type CommentExtension = unit {
    comment_data: list<DataSubBlock>,
};

type PlainTextExtension = unit {
    block_size: uint8 &eod=12,
    text_grid_left_position: uint16,
    text_grid_top_position: uint16,
    text_grid_width: uint16,
    text_grid_height: uint16,
    character_cell_width: uint8,
    character_cell_height: uint8,
    text_foreground_color_index: uint8,
    text_background_color_index: uint8,
    plain_text_data: list<DataSubBlock>,
};

type ApplicationExtension = unit {
    block_size: uint8 &eod=11,
    application_identifier: string &restof=8,
    application_authentication_code: string &restof=3,
    application_data: list<DataSubBlock>,
};

type TrailerBlock = unit {
    trailer: uint8 &eod=0x3B,
} &check=block_type == 0x3B;

function block_end(b: Block): bool {
    return b.block_type == 0x3B;
}