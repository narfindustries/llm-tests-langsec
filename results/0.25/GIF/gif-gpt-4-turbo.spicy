module GIF;

public type RGB = unit {
    r: uint8;
    g: uint8;
    b: uint8;
};

public type LogicalScreenDescriptor = unit {
    screenWidth: uint16;
    screenHeight: uint16;
    packedFields: bitfield(8) {
        globalColorTableFlag: 1;
        colorResolution: 3;
        sortFlag: 1;
        sizeOfGlobalColorTable: 3;
    };
    backgroundColorIndex: uint8;
    pixelAspectRatio: uint8;
};

public type ColorTable = unit {
    entries: RGB[] &size=computeColorTableSize(self);
};

public type ImageDescriptor = unit {
    imageSeparator: uint8;
    imageLeftPosition: uint16;
    imageTopPosition: uint16;
    imageWidth: uint16;
    imageHeight: uint16;
    packedFields: bitfield(8) {
        localColorTableFlag: 1;
        interlaceFlag: 1;
        sortFlag: 1;
        reserved: 2;
        sizeOfLocalColorTable: 3;
    };
};

public type ImageData = unit {
    lzwMinimumCodeSize: uint8;
    dataBlocks: bytes &eod;
};

public type Extension = unit {
    extensionIntroducer: uint8;
    extensionLabel: uint8;
    blockSize: uint8;
    data: bytes &size=blockSize;
    subBlocks: bytes[] &eod;
};

public type GIFFile = unit {
    header: /[GIF8(7|9)a]/;
    logicalScreenDescriptor: LogicalScreenDescriptor;
    globalColorTable: ColorTable &requires=logicalScreenDescriptor.packedFields.globalColorTableFlag == 1;
    content: (ImageBlock | Extension | Trailer)[] &eod;
};

public type ImageBlock = unit {
    descriptor: ImageDescriptor;
    localColorTable: ColorTable &requires=descriptor.packedFields.localColorTableFlag == 1;
    imageData: ImageData;
};

public type Trailer = unit {
    trailer: uint8;
};

function computeColorTableSize(colorTable: any): uint16 {
    return (2 ** (colorTable.packedFields.sizeOfGlobalColorTable + 1)) * 3;
}