module GIF;

public type LogicalScreenDescriptor = unit {
    canvasWidth: uint16;
    canvasHeight: uint16;
    packedFields: uint8;
    backgroundColorIndex: uint8;
    pixelAspectRatio: uint8;
};

public type GlobalColorTable = unit {
    entries: vector<ColorTableEntry> &size=globalColorTableSize();
};

type ColorTableEntry = unit {
    red: uint8;
    green: uint8;
    blue: uint8;
};

public type ImageDescriptor = unit {
    leftPosition: uint16;
    topPosition: uint16;
    width: uint16;
    height: uint16;
    packedFields: uint8;
};

public type LocalColorTable = unit {
    entries: vector<ColorTableEntry> &size=localColorTableSize();
};

public type TableBasedImageData = unit {
    lzwMinimumCodeSize: uint8;
    dataBlocks: DataBlock+;
};

public type DataBlock = unit {
    blockSize: uint8;
    blockData: bytes &size=this.blockSize;
};

public type GIFFile = unit {
    header: bytes &size=6;
    logicalScreenDescriptor: LogicalScreenDescriptor;
    globalColorTable: GlobalColorTable &if=hasGlobalColorTable();
    imageDescriptor: ImageDescriptor;
    localColorTable: LocalColorTable &if=hasLocalColorTable();
    imageData: TableBasedImageData;
};

function hasGlobalColorTable() : bool {
    return (self.logicalScreenDescriptor.packedFields & 0x80) != 0;
}

function globalColorTableSize() : uint16 {
    return (1 << ((self.logicalScreenDescriptor.packedFields & 0x07) + 1)) * 3;
}

function hasLocalColorTable() : bool {
    return (self.imageDescriptor.packedFields & 0x80) != 0;
}

function localColorTableSize() : uint16 {
    return (1 << ((self.imageDescriptor.packedFields & 0x07) + 1)) * 3;
}