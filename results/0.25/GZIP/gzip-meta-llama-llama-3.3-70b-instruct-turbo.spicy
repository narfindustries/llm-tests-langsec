module GZIP;

type GzipId1 = 0x1F;
type GzipId2 = 0x8B;
type GzipCm = 8;

type Gzip = record {
  id1 = uint8;
  id2 = uint8;
  cm = uint8;
  flags = uint8;
  mtime = uint32;
  xfl = uint8;
  os = uint8;
};

type GzipExtra = bytestring;
type GzipFname = bytestring;
type GzipFcomment = bytestring;
type GzipHcrc = uint16;

type GzipFile = record {
  id1 = uint8;
  id2 = uint8;
  cm = uint8;
  flags = uint8;
  mtime = uint32;
  xfl = uint8;
  os = uint8;
  extra = GzipExtra &if = flags & 0x04 != 0 &length = read_uint16_le();
  fname = GzipFname &if = flags & 0x08 != 0 &length = read_until(0x00);
  fcomment = GzipFcomment &if = flags & 0x10 != 0 &length = read_until(0x00);
  hcrc = GzipHcrc &if = flags & 0x02 != 0;
  comprdata = bytestring;
  isize = uint32;
  crc32 = uint32;
};

let gzip_p = GzipFile; 

let parser = GzipFile &let {
  id1 = 0x1F;
  id2 = 0x8B;
  cm = 8;
};