module JPEG;

type JPEGFile = unit {
    soi: SOIMarker
    segments: vector<Segment> &until($$ == EOI)
    eoi: EOIMarker
};

type SOIMarker = unit {
    marker: uint16 &equals= 0xffd8
};

type EOIMarker = unit {
    marker: uint16 &equals= 0xffd9
};

type Segment = unit {
    marker: uint16
    body: bytes &length= (length - 2)
} &switch(marker) {
    case 0xffe0: APP0
    case 0xffe1: APP1
    case 0xffe2: APPn
    case 0xffe3: APPn
    case 0xffe4: APPn
    case 0xffe5: APPn
    case 0xffe6: APPn
    case 0xffe7: APPn
    case 0xffe8: APPn
    case 0xffe9: APPn
    case 0xffea: APPn
    case 0xffeb: APPn
    case 0xffec: APPn
    case 0xffed: APPn
    case 0xffee: APPn
    case 0xffef: APPn
    case 0xffdb: DQT
    case 0xffc0: SOF0
    case 0xffc2: SOF2
    case 0xffc4: DHT
    case 0xffda: SOS
    case 0xffdd: DRI
    case 0xfffe: COM
    case 0xffd0: RSTn
    case 0xffd1: RSTn
    case 0xffd2: RSTn
    case 0xffd3: RSTn
    case 0xffd4: RSTn
    case 0xffd5: RSTn
    case 0xffd6: RSTn
    case 0xffd7: RSTn
};

type APP0 = unit {
    length: uint16
    identifier: bytes &length= 5
    version: uint16
    units: uint8
    x_density: uint16
    y_density: uint16
    x_thumbnail: uint8
    y_thumbnail: uint8
    thumbnail_data: bytes &length= (x_thumbnail * y_thumbnail * 3)
};

type APP1 = unit {
    length: uint16
    exif_data: bytes &length= (length - 2)
};

type APPn = unit {
    length: uint16
    data: bytes &length= (length - 2)
};

type DQT = unit {
    length: uint16
    tables: vector<QuantizationTable> &until($input.length() == 0)
};

type QuantizationTable = unit {
    info: uint8
    values: bytes &length= 64
};

type SOF0 = unit {
    length: uint16
    precision: uint8
    height: uint16
    width: uint16
    components_count: uint8
    components: vector<Component> &length= components_count
};

type SOF2 = SOF0;

type Component = unit {
    id: uint8
    sampling_factors: uint8
    quantization_table_id: uint8
};

type DHT = unit {
    length: uint16
    tables: vector<HuffmanTable> &until($input.length() == 0)
};

type HuffmanTable = unit {
    info: uint8
    lengths: bytes &length= 16
    values: bytes &length= sum(lengths)
};

type SOS = unit {
    length: uint16
    components_count: uint8
    components: vector<SOSComponent> &length= components_count
    start_spectral: uint8
    end_spectral: uint8
    approx: uint8
    compressed_data: bytes &until($input.length() == 0)
};

type SOSComponent = unit {
    id: uint8
    huffman_table_ids: uint8
};

type DRI = unit {
    length: uint16
    restart_interval: uint16
};

type COM = unit {
    length: uint16
    comment: bytes &length= (length - 2)
};

type RSTn = unit {
    marker: uint16
};