module NTP;

public type Packet = unit {
    flags: uint8;
    stratum: uint8;
    poll: int8;
    precision: int8;
    root_delay: int32;
    root_dispersion: uint32;
    reference_id: bytes &size=4;
    reference_timestamp: uint64;
    origin_timestamp: uint64;
    receive_timestamp: uint64;
    transmit_timestamp: uint64;
    extensions: Extension[];

    var leap_indicator: uint8;
    var version: uint8;
    var mode: uint8;

    on flags {
        self.leap_indicator = ($$ & 0xC0) >> 6;
        self.version = ($$ & 0x38) >> 3;
        self.mode = $$ & 0x07;

        if (self.leap_indicator > 3)
            throw "invalid leap indicator";
        if (self.version != 4)
            throw "unsupported NTP version";
        if (self.mode == 0 || self.mode == 7)
            throw "reserved mode";
    }

    on stratum {
        if ($$ > 15 && $$ != 0)
            throw "invalid stratum";
    }

    on poll {
        if ($$ < 4 || $$ > 17)
            throw "invalid poll value";
    }
};

type Extension = unit {
    field_type: uint16;
    length: uint16;
    value: bytes &size=self.length;
    padding: bytes &size=(4 - (self.length % 4)) if (self.length % 4 != 0);
};

type MAC = unit {
    key_id: uint32;
    digest: bytes &size=self.digest_size;

    var digest_size: uint64 = 20;
};