module Bitcoin;

type VarInt = unit {
    value: uint64;
    on %init {
        self.value = 0;
        local b: uint8;
        local base: uint64 = 1;
        while (true) {
            b = self.%context.read<uint8>();
            self.value += (b & 0x7F) * base;
            if ((b & 0x80) == 0)
                break;
            base <<= 7;
        }
    }
};

type TxIn = unit {
    prev_output: bytes &size=32;
    prev_index: uint32;
    script_len: VarInt;
    script_sig: bytes &size=script_len.value;
    sequence: uint32;
};

type TxOut = unit {
    value: uint64;
    script_len: VarInt;
    script_pub_key: bytes &size=script_len.value;
};

type Transaction = unit {
    version: int32;
    input_count: VarInt;
    inputs: TxIn[] &size=input_count.value;
    output_count: VarInt;
    outputs: TxOut[] &size=output_count.value;
    lock_time: uint32;
};

public type BitcoinTransaction = unit {
    transactions: Transaction[];
};