module BitcoinTransactions;

type uint32le = uint32 & little-endian;
type uint64le = uint64 & little-endian;

type var_int = uint8 | uint16le | uint32le | uint64le;

type bytestring = byte[];

type BitcoinTransaction = record {
  version: uint32le;
  tx_in_count: var_int;
  tx_in: array of InputTransaction;
  tx_out_count: var_int;
  tx_out: array of OutputTransaction;
  lock_time: uint32le;
};

type InputTransaction = record {
  previous_output_hash: bytestring & length=32;
  previous_output_index: uint32le;
  script_length: var_int;
  script: bytestring;
  sequence_number: uint32le;
};

type OutputTransaction = record {
  value: uint64le;
  pk_script_length: var_int;
  pk_script: bytestring;
};

type Block = record {
  block_header: BlockHeader;
  transaction_count: var_int;
  transactions: array of BitcoinTransaction;
};

type BlockHeader = record {
  version: uint32le;
  previous_block_hash: bytestring & length=32;
  merkle_root: bytestring & length=32;
  timestamp: uint32le;
  target: uint32le;
  nonce: uint32le;
};

type Script = bytestring;

type OpCode = uint8;

type PushData = bytestring;

type ScriptOperation = record {
  op_code: OpCode;
  push_data: PushData;
};

type VarString = bytestring;

let bitcoin_transaction = BitcoinTransaction;