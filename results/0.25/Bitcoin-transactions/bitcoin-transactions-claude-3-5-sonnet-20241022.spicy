module Bitcoin;

public type Transaction = unit {
    version: int32;
    tx_in_count: VarInt;
    tx_in: TxIn[self.tx_in_count.int_value];
    tx_out_count: VarInt;
    tx_out: TxOut[self.tx_out_count.int_value];
    lock_time: uint32;
};

type VarInt = unit {
    prefix: uint8;
    var int_value: uint64;

    on prefix {
        if (self.prefix < 0xfd)
            self.int_value = self.prefix;
        else if (self.prefix == 0xfd)
            self.int_value = self.uint16_value;
        else if (self.prefix == 0xfe)
            self.int_value = self.uint32_value;
        else
            self.int_value = self.uint64_value;
    }

    switch(self.prefix) {
        0xfd -> uint16_value: uint16;
        0xfe -> uint32_value: uint32;
        0xff -> uint64_value: uint64;
    };
};

type TxIn = unit {
    previous_output: OutPoint;
    script_length: VarInt;
    signature_script: bytes &size=self.script_length.int_value;
    sequence: uint32;
};

type OutPoint = unit {
    hash: bytes &size=32;
    index: uint32;
};

type TxOut = unit {
    amount: uint64;
    script_length: VarInt;
    pk_script: bytes &size=self.script_length.int_value;
};