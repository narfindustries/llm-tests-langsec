{"$message_type":"diagnostic","message":"the trait bound `(impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], char), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Vec<u8>), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], u64), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], u64), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u16), nom::Err<_>>): nom::sequence::Tuple<_, _, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":2724,"byte_end":4111,"line_start":143,"line_end":176,"column_start":16,"column_end":6,"is_primary":true,"text":[{"text":"    )) = tuple((","highlight_start":16,"highlight_end":17},{"text":"        parse_fixed_length_string(4),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(5),","highlight_start":1,"highlight_end":38},{"text":"        map_res(take(2), |b| std::str::from_utf8(b).unwrap().parse::<u8>()),","highlight_start":1,"highlight_end":77},{"text":"        parse_fixed_length_string(4),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(10),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(14),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(80),","highlight_start":1,"highlight_end":39},{"text":"        map(take(1), |b: &[u8]| b[0] as char),","highlight_start":1,"highlight_end":47},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(11),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(20),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(4),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(1),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(43),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(1),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(40),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(1),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(15),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(5),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(5),","highlight_start":1,"highlight_end":38},{"text":"        map_res(take(1), |b| std::str::from_utf8(b).unwrap().parse::<u8>()),","highlight_start":1,"highlight_end":77},{"text":"        count(map_res(take(1), |b: &[u8]| Ok::<_, nom::error::Error<&[u8]>>(b[0])), 3),","highlight_start":1,"highlight_end":88},{"text":"        parse_fixed_length_string(24),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(18),","highlight_start":1,"highlight_end":39},{"text":"        parse_numeric(12),","highlight_start":1,"highlight_end":27},{"text":"        parse_numeric(6),","highlight_start":1,"highlight_end":26},{"text":"        map_res(take(3), |b| std::str::from_utf8(b).unwrap().parse::<u16>()),","highlight_start":1,"highlight_end":78},{"text":"    ))(input)?;","highlight_start":1,"highlight_end":6}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":2718,"byte_end":2723,"line_start":143,"line_end":143,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"    )) = tuple((","highlight_start":10,"highlight_end":15}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `nom::sequence::Tuple<_, _, _>` is not implemented for `(impl Fn(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `nom::sequence::Tuple<I, O, E>`:\n  `()` implements `nom::sequence::Tuple<I, (), E>`\n  `(F,)` implements `nom::sequence::Tuple<Input, (Output,), Error>`\n  `(FnA, FnB)` implements `nom::sequence::Tuple<Input, (A, B), Error>`\n  `(FnA, FnB, FnC)` implements `nom::sequence::Tuple<Input, (A, B, C), Error>`\n  `(FnA, FnB, FnC, FnD)` implements `nom::sequence::Tuple<Input, (A, B, C, D), Error>`\n  `(FnA, FnB, FnC, FnD, FnE)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E), Error>`\n  `(FnA, FnB, FnC, FnD, FnE, FnF)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F), Error>`\n  `(FnA, FnB, FnC, FnD, FnE, FnF, FnG)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>`\nand 14 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tuple`","code":null,"level":"note","spans":[{"file_name":"/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/sequence/mod.rs","byte_start":8673,"byte_end":8687,"line_start":275,"line_end":275,"column_start":44,"column_end":58,"is_primary":true,"text":[{"text":"pub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(","highlight_start":44,"highlight_end":58}],"label":"required by this bound in `tuple`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `(impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], char), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Vec<u8>), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], u64), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], u64), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u16), nom::Err<_>>): nom::sequence::Tuple<_, _, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:143:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    )) = tuple((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m __________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        parse_fixed_length_string(4),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        parse_fixed_length_string(5),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map_res(take(2), |b| std::str::from_utf8(b).unwrap().parse::<u8>()),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map_res(take(3), |b| std::str::from_utf8(b).unwrap().parse::<u16>()),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ))(input)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `nom::sequence::Tuple<_, _, _>` is not implemented for `(impl Fn(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nom::sequence::Tuple<I, O, E>`:\u001b[0m\n\u001b[0m              `()` implements `nom::sequence::Tuple<I, (), E>`\u001b[0m\n\u001b[0m              `(F,)` implements `nom::sequence::Tuple<Input, (Output,), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB)` implements `nom::sequence::Tuple<Input, (A, B), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC)` implements `nom::sequence::Tuple<Input, (A, B, C), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD)` implements `nom::sequence::Tuple<Input, (A, B, C, D), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE, FnF)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE, FnF, FnG)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>`\u001b[0m\n\u001b[0m            and 14 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tuple`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/sequence/mod.rs:275:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `tuple`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `(impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], char), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Vec<u8>), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], u64), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], u64), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u16), nom::Err<_>>): nom::sequence::Tuple<_, _, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":2718,"byte_end":4112,"line_start":143,"line_end":176,"column_start":10,"column_end":7,"is_primary":true,"text":[{"text":"    )) = tuple((","highlight_start":10,"highlight_end":17},{"text":"        parse_fixed_length_string(4),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(5),","highlight_start":1,"highlight_end":38},{"text":"        map_res(take(2), |b| std::str::from_utf8(b).unwrap().parse::<u8>()),","highlight_start":1,"highlight_end":77},{"text":"        parse_fixed_length_string(4),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(10),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(14),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(80),","highlight_start":1,"highlight_end":39},{"text":"        map(take(1), |b: &[u8]| b[0] as char),","highlight_start":1,"highlight_end":47},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(11),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(20),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(4),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(1),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(43),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(1),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(40),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(1),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(15),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(5),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(5),","highlight_start":1,"highlight_end":38},{"text":"        map_res(take(1), |b| std::str::from_utf8(b).unwrap().parse::<u8>()),","highlight_start":1,"highlight_end":77},{"text":"        count(map_res(take(1), |b: &[u8]| Ok::<_, nom::error::Error<&[u8]>>(b[0])), 3),","highlight_start":1,"highlight_end":88},{"text":"        parse_fixed_length_string(24),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(18),","highlight_start":1,"highlight_end":39},{"text":"        parse_numeric(12),","highlight_start":1,"highlight_end":27},{"text":"        parse_numeric(6),","highlight_start":1,"highlight_end":26},{"text":"        map_res(take(3), |b| std::str::from_utf8(b).unwrap().parse::<u16>()),","highlight_start":1,"highlight_end":78},{"text":"    ))(input)?;","highlight_start":1,"highlight_end":7}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `nom::sequence::Tuple<_, _, _>` is not implemented for `(impl Fn(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `nom::sequence::Tuple<I, O, E>`:\n  `()` implements `nom::sequence::Tuple<I, (), E>`\n  `(F,)` implements `nom::sequence::Tuple<Input, (Output,), Error>`\n  `(FnA, FnB)` implements `nom::sequence::Tuple<Input, (A, B), Error>`\n  `(FnA, FnB, FnC)` implements `nom::sequence::Tuple<Input, (A, B, C), Error>`\n  `(FnA, FnB, FnC, FnD)` implements `nom::sequence::Tuple<Input, (A, B, C, D), Error>`\n  `(FnA, FnB, FnC, FnD, FnE)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E), Error>`\n  `(FnA, FnB, FnC, FnD, FnE, FnF)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F), Error>`\n  `(FnA, FnB, FnC, FnD, FnE, FnF, FnG)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>`\nand 14 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tuple`","code":null,"level":"note","spans":[{"file_name":"/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/sequence/mod.rs","byte_start":8673,"byte_end":8687,"line_start":275,"line_end":275,"column_start":44,"column_end":58,"is_primary":true,"text":[{"text":"pub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(","highlight_start":44,"highlight_end":58}],"label":"required by this bound in `tuple`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `(impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], char), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Vec<u8>), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], u64), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], u64), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u16), nom::Err<_>>): nom::sequence::Tuple<_, _, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:143:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    )) = tuple((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m __________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        parse_fixed_length_string(4),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        parse_fixed_length_string(5),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map_res(take(2), |b| std::str::from_utf8(b).unwrap().parse::<u8>()),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map_res(take(3), |b| std::str::from_utf8(b).unwrap().parse::<u16>()),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ))(input)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `nom::sequence::Tuple<_, _, _>` is not implemented for `(impl Fn(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nom::sequence::Tuple<I, O, E>`:\u001b[0m\n\u001b[0m              `()` implements `nom::sequence::Tuple<I, (), E>`\u001b[0m\n\u001b[0m              `(F,)` implements `nom::sequence::Tuple<Input, (Output,), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB)` implements `nom::sequence::Tuple<Input, (A, B), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC)` implements `nom::sequence::Tuple<Input, (A, B, C), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD)` implements `nom::sequence::Tuple<Input, (A, B, C, D), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE, FnF)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE, FnF, FnG)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>`\u001b[0m\n\u001b[0m            and 14 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tuple`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/sequence/mod.rs:275:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `tuple`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `(impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], char), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Vec<u8>), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], u64), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], u64), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u16), nom::Err<_>>): nom::sequence::Tuple<_, _, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":2718,"byte_end":4119,"line_start":143,"line_end":176,"column_start":10,"column_end":14,"is_primary":true,"text":[{"text":"    )) = tuple((","highlight_start":10,"highlight_end":17},{"text":"        parse_fixed_length_string(4),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(5),","highlight_start":1,"highlight_end":38},{"text":"        map_res(take(2), |b| std::str::from_utf8(b).unwrap().parse::<u8>()),","highlight_start":1,"highlight_end":77},{"text":"        parse_fixed_length_string(4),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(10),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(14),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(80),","highlight_start":1,"highlight_end":39},{"text":"        map(take(1), |b: &[u8]| b[0] as char),","highlight_start":1,"highlight_end":47},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(11),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(20),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(4),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(1),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(43),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(1),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(40),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(1),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(15),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(5),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(5),","highlight_start":1,"highlight_end":38},{"text":"        map_res(take(1), |b| std::str::from_utf8(b).unwrap().parse::<u8>()),","highlight_start":1,"highlight_end":77},{"text":"        count(map_res(take(1), |b: &[u8]| Ok::<_, nom::error::Error<&[u8]>>(b[0])), 3),","highlight_start":1,"highlight_end":88},{"text":"        parse_fixed_length_string(24),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(18),","highlight_start":1,"highlight_end":39},{"text":"        parse_numeric(12),","highlight_start":1,"highlight_end":27},{"text":"        parse_numeric(6),","highlight_start":1,"highlight_end":26},{"text":"        map_res(take(3), |b| std::str::from_utf8(b).unwrap().parse::<u16>()),","highlight_start":1,"highlight_end":78},{"text":"    ))(input)?;","highlight_start":1,"highlight_end":14}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `nom::sequence::Tuple<_, _, _>` is not implemented for `(impl Fn(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `nom::sequence::Tuple<I, O, E>`:\n  `()` implements `nom::sequence::Tuple<I, (), E>`\n  `(F,)` implements `nom::sequence::Tuple<Input, (Output,), Error>`\n  `(FnA, FnB)` implements `nom::sequence::Tuple<Input, (A, B), Error>`\n  `(FnA, FnB, FnC)` implements `nom::sequence::Tuple<Input, (A, B, C), Error>`\n  `(FnA, FnB, FnC, FnD)` implements `nom::sequence::Tuple<Input, (A, B, C, D), Error>`\n  `(FnA, FnB, FnC, FnD, FnE)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E), Error>`\n  `(FnA, FnB, FnC, FnD, FnE, FnF)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F), Error>`\n  `(FnA, FnB, FnC, FnD, FnE, FnF, FnG)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>`\nand 14 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tuple`","code":null,"level":"note","spans":[{"file_name":"/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/sequence/mod.rs","byte_start":8673,"byte_end":8687,"line_start":275,"line_end":275,"column_start":44,"column_end":58,"is_primary":true,"text":[{"text":"pub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(","highlight_start":44,"highlight_end":58}],"label":"required by this bound in `tuple`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `(impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], char), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Vec<u8>), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], u64), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], u64), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u16), nom::Err<_>>): nom::sequence::Tuple<_, _, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:143:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    )) = tuple((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m __________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        parse_fixed_length_string(4),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        parse_fixed_length_string(5),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map_res(take(2), |b| std::str::from_utf8(b).unwrap().parse::<u8>()),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map_res(take(3), |b| std::str::from_utf8(b).unwrap().parse::<u16>()),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ))(input)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `nom::sequence::Tuple<_, _, _>` is not implemented for `(impl Fn(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nom::sequence::Tuple<I, O, E>`:\u001b[0m\n\u001b[0m              `()` implements `nom::sequence::Tuple<I, (), E>`\u001b[0m\n\u001b[0m              `(F,)` implements `nom::sequence::Tuple<Input, (Output,), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB)` implements `nom::sequence::Tuple<Input, (A, B), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC)` implements `nom::sequence::Tuple<Input, (A, B, C), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD)` implements `nom::sequence::Tuple<Input, (A, B, C, D), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE, FnF)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE, FnF, FnG)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>`\u001b[0m\n\u001b[0m            and 14 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tuple`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/sequence/mod.rs:275:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `tuple`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `(impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], char), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u32), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], u32), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], char), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<char>), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<String>), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], u16), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<String>), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], u16), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<u16>), nom::Err<_>>): nom::sequence::Tuple<_, _, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5352,"byte_end":7337,"line_start":253,"line_end":291,"column_start":16,"column_end":6,"is_primary":true,"text":[{"text":"    )) = tuple((","highlight_start":16,"highlight_end":17},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(10),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(14),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(17),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(80),","highlight_start":1,"highlight_end":39},{"text":"        map(take(1), |b: &[u8]| b[0] as char),","highlight_start":1,"highlight_end":47},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(11),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(20),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(4),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(1),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(43),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(1),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(40),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(1),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(15),","highlight_start":1,"highlight_end":39},{"text":"        map_res(take(1), |b| std::str::from_utf8(b).unwrap().parse::<u8>()),","highlight_start":1,"highlight_end":77},{"text":"        parse_fixed_length_string(42),","highlight_start":1,"highlight_end":39},{"text":"        map_res(take(8), |b| std::str::from_utf8(b).unwrap().parse::<u32>()),","highlight_start":1,"highlight_end":78},{"text":"        map_res(take(8), |b| std::str::from_utf8(b).unwrap().parse::<u32>()),","highlight_start":1,"highlight_end":78},{"text":"        parse_fixed_length_string(3),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        map_res(take(2), |b| std::str::from_utf8(b).unwrap().parse::<u8>()),","highlight_start":1,"highlight_end":77},{"text":"        map(take(1), |b: &[u8]| b[0] as char),","highlight_start":1,"highlight_end":47},{"text":"        map(take(1), |b: &[u8]| if b[0] == b' ' { None } else { Some(b[0] as char) }),","highlight_start":1,"highlight_end":87},{"text":"        map(take(60), |b: &[u8]| if b[0] == b' ' { None } else { Some(String::from_utf8_lossy(b).trim().to_string()) }),","highlight_start":1,"highlight_end":121},{"text":"        map_res(take(1), |b| std::str::from_utf8(b).unwrap().parse::<u16>()),","highlight_start":1,"highlight_end":78},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        map(take(4), |b: &[u8]| if b[0] == b' ' { None } else { Some(String::from_utf8_lossy(b).trim().to_string()) }),","highlight_start":1,"highlight_end":120},{"text":"        map_res(take(1), |b| std::str::from_utf8(b).unwrap().parse::<u16>()),","highlight_start":1,"highlight_end":78},{"text":"        map(take(5), |b: &[u8]| if b[0] == b' ' { None } else { Some(std::str::from_utf8(b).unwrap().parse::<u16>().unwrap()) }),","highlight_start":1,"highlight_end":130},{"text":"    ))(input)?;","highlight_start":1,"highlight_end":6}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":5346,"byte_end":5351,"line_start":253,"line_end":253,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"    )) = tuple((","highlight_start":10,"highlight_end":15}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `nom::sequence::Tuple<_, _, _>` is not implemented for `(impl Fn(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `nom::sequence::Tuple<I, O, E>`:\n  `()` implements `nom::sequence::Tuple<I, (), E>`\n  `(F,)` implements `nom::sequence::Tuple<Input, (Output,), Error>`\n  `(FnA, FnB)` implements `nom::sequence::Tuple<Input, (A, B), Error>`\n  `(FnA, FnB, FnC)` implements `nom::sequence::Tuple<Input, (A, B, C), Error>`\n  `(FnA, FnB, FnC, FnD)` implements `nom::sequence::Tuple<Input, (A, B, C, D), Error>`\n  `(FnA, FnB, FnC, FnD, FnE)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E), Error>`\n  `(FnA, FnB, FnC, FnD, FnE, FnF)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F), Error>`\n  `(FnA, FnB, FnC, FnD, FnE, FnF, FnG)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>`\nand 14 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tuple`","code":null,"level":"note","spans":[{"file_name":"/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/sequence/mod.rs","byte_start":8673,"byte_end":8687,"line_start":275,"line_end":275,"column_start":44,"column_end":58,"is_primary":true,"text":[{"text":"pub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(","highlight_start":44,"highlight_end":58}],"label":"required by this bound in `tuple`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `(impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], char), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u32), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], u32), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], char), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<char>), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<String>), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], u16), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<String>), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], u16), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<u16>), nom::Err<_>>): nom::sequence::Tuple<_, _, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:253:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    )) = tuple((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m __________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m254\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        parse_fixed_length_string(2),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        parse_fixed_length_string(10),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        parse_fixed_length_string(14),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m290\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map(take(5), |b: &[u8]| if b[0] == b' ' { None } else { Some(std::str::from_utf8(b).unwrap().parse::<u16>().unwrap()) }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m291\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ))(input)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `nom::sequence::Tuple<_, _, _>` is not implemented for `(impl Fn(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nom::sequence::Tuple<I, O, E>`:\u001b[0m\n\u001b[0m              `()` implements `nom::sequence::Tuple<I, (), E>`\u001b[0m\n\u001b[0m              `(F,)` implements `nom::sequence::Tuple<Input, (Output,), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB)` implements `nom::sequence::Tuple<Input, (A, B), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC)` implements `nom::sequence::Tuple<Input, (A, B, C), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD)` implements `nom::sequence::Tuple<Input, (A, B, C, D), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE, FnF)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE, FnF, FnG)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>`\u001b[0m\n\u001b[0m            and 14 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tuple`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/sequence/mod.rs:275:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `tuple`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `(impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], char), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u32), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], u32), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], char), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<char>), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<String>), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], u16), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<String>), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], u16), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<u16>), nom::Err<_>>): nom::sequence::Tuple<_, _, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5346,"byte_end":7338,"line_start":253,"line_end":291,"column_start":10,"column_end":7,"is_primary":true,"text":[{"text":"    )) = tuple((","highlight_start":10,"highlight_end":17},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(10),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(14),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(17),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(80),","highlight_start":1,"highlight_end":39},{"text":"        map(take(1), |b: &[u8]| b[0] as char),","highlight_start":1,"highlight_end":47},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(11),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(20),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(4),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(1),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(43),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(1),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(40),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(1),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(15),","highlight_start":1,"highlight_end":39},{"text":"        map_res(take(1), |b| std::str::from_utf8(b).unwrap().parse::<u8>()),","highlight_start":1,"highlight_end":77},{"text":"        parse_fixed_length_string(42),","highlight_start":1,"highlight_end":39},{"text":"        map_res(take(8), |b| std::str::from_utf8(b).unwrap().parse::<u32>()),","highlight_start":1,"highlight_end":78},{"text":"        map_res(take(8), |b| std::str::from_utf8(b).unwrap().parse::<u32>()),","highlight_start":1,"highlight_end":78},{"text":"        parse_fixed_length_string(3),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        map_res(take(2), |b| std::str::from_utf8(b).unwrap().parse::<u8>()),","highlight_start":1,"highlight_end":77},{"text":"        map(take(1), |b: &[u8]| b[0] as char),","highlight_start":1,"highlight_end":47},{"text":"        map(take(1), |b: &[u8]| if b[0] == b' ' { None } else { Some(b[0] as char) }),","highlight_start":1,"highlight_end":87},{"text":"        map(take(60), |b: &[u8]| if b[0] == b' ' { None } else { Some(String::from_utf8_lossy(b).trim().to_string()) }),","highlight_start":1,"highlight_end":121},{"text":"        map_res(take(1), |b| std::str::from_utf8(b).unwrap().parse::<u16>()),","highlight_start":1,"highlight_end":78},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        map(take(4), |b: &[u8]| if b[0] == b' ' { None } else { Some(String::from_utf8_lossy(b).trim().to_string()) }),","highlight_start":1,"highlight_end":120},{"text":"        map_res(take(1), |b| std::str::from_utf8(b).unwrap().parse::<u16>()),","highlight_start":1,"highlight_end":78},{"text":"        map(take(5), |b: &[u8]| if b[0] == b' ' { None } else { Some(std::str::from_utf8(b).unwrap().parse::<u16>().unwrap()) }),","highlight_start":1,"highlight_end":130},{"text":"    ))(input)?;","highlight_start":1,"highlight_end":7}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `nom::sequence::Tuple<_, _, _>` is not implemented for `(impl Fn(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `nom::sequence::Tuple<I, O, E>`:\n  `()` implements `nom::sequence::Tuple<I, (), E>`\n  `(F,)` implements `nom::sequence::Tuple<Input, (Output,), Error>`\n  `(FnA, FnB)` implements `nom::sequence::Tuple<Input, (A, B), Error>`\n  `(FnA, FnB, FnC)` implements `nom::sequence::Tuple<Input, (A, B, C), Error>`\n  `(FnA, FnB, FnC, FnD)` implements `nom::sequence::Tuple<Input, (A, B, C, D), Error>`\n  `(FnA, FnB, FnC, FnD, FnE)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E), Error>`\n  `(FnA, FnB, FnC, FnD, FnE, FnF)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F), Error>`\n  `(FnA, FnB, FnC, FnD, FnE, FnF, FnG)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>`\nand 14 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tuple`","code":null,"level":"note","spans":[{"file_name":"/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/sequence/mod.rs","byte_start":8673,"byte_end":8687,"line_start":275,"line_end":275,"column_start":44,"column_end":58,"is_primary":true,"text":[{"text":"pub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(","highlight_start":44,"highlight_end":58}],"label":"required by this bound in `tuple`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `(impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], char), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u32), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], u32), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], char), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<char>), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<String>), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], u16), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<String>), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], u16), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<u16>), nom::Err<_>>): nom::sequence::Tuple<_, _, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:253:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    )) = tuple((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m __________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m254\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        parse_fixed_length_string(2),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        parse_fixed_length_string(10),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        parse_fixed_length_string(14),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m290\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map(take(5), |b: &[u8]| if b[0] == b' ' { None } else { Some(std::str::from_utf8(b).unwrap().parse::<u16>().unwrap()) }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m291\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ))(input)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `nom::sequence::Tuple<_, _, _>` is not implemented for `(impl Fn(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nom::sequence::Tuple<I, O, E>`:\u001b[0m\n\u001b[0m              `()` implements `nom::sequence::Tuple<I, (), E>`\u001b[0m\n\u001b[0m              `(F,)` implements `nom::sequence::Tuple<Input, (Output,), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB)` implements `nom::sequence::Tuple<Input, (A, B), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC)` implements `nom::sequence::Tuple<Input, (A, B, C), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD)` implements `nom::sequence::Tuple<Input, (A, B, C, D), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE, FnF)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE, FnF, FnG)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>`\u001b[0m\n\u001b[0m            and 14 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tuple`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/sequence/mod.rs:275:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `tuple`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `(impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], char), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u32), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], u32), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], char), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<char>), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<String>), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], u16), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<String>), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], u16), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<u16>), nom::Err<_>>): nom::sequence::Tuple<_, _, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5346,"byte_end":7345,"line_start":253,"line_end":291,"column_start":10,"column_end":14,"is_primary":true,"text":[{"text":"    )) = tuple((","highlight_start":10,"highlight_end":17},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(10),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(14),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(17),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(80),","highlight_start":1,"highlight_end":39},{"text":"        map(take(1), |b: &[u8]| b[0] as char),","highlight_start":1,"highlight_end":47},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(11),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(20),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(4),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(1),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(43),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(1),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(40),","highlight_start":1,"highlight_end":39},{"text":"        parse_fixed_length_string(1),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(15),","highlight_start":1,"highlight_end":39},{"text":"        map_res(take(1), |b| std::str::from_utf8(b).unwrap().parse::<u8>()),","highlight_start":1,"highlight_end":77},{"text":"        parse_fixed_length_string(42),","highlight_start":1,"highlight_end":39},{"text":"        map_res(take(8), |b| std::str::from_utf8(b).unwrap().parse::<u32>()),","highlight_start":1,"highlight_end":78},{"text":"        map_res(take(8), |b| std::str::from_utf8(b).unwrap().parse::<u32>()),","highlight_start":1,"highlight_end":78},{"text":"        parse_fixed_length_string(3),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        parse_fixed_length_string(8),","highlight_start":1,"highlight_end":38},{"text":"        map_res(take(2), |b| std::str::from_utf8(b).unwrap().parse::<u8>()),","highlight_start":1,"highlight_end":77},{"text":"        map(take(1), |b: &[u8]| b[0] as char),","highlight_start":1,"highlight_end":47},{"text":"        map(take(1), |b: &[u8]| if b[0] == b' ' { None } else { Some(b[0] as char) }),","highlight_start":1,"highlight_end":87},{"text":"        map(take(60), |b: &[u8]| if b[0] == b' ' { None } else { Some(String::from_utf8_lossy(b).trim().to_string()) }),","highlight_start":1,"highlight_end":121},{"text":"        map_res(take(1), |b| std::str::from_utf8(b).unwrap().parse::<u16>()),","highlight_start":1,"highlight_end":78},{"text":"        parse_fixed_length_string(2),","highlight_start":1,"highlight_end":38},{"text":"        map(take(4), |b: &[u8]| if b[0] == b' ' { None } else { Some(String::from_utf8_lossy(b).trim().to_string()) }),","highlight_start":1,"highlight_end":120},{"text":"        map_res(take(1), |b| std::str::from_utf8(b).unwrap().parse::<u16>()),","highlight_start":1,"highlight_end":78},{"text":"        map(take(5), |b: &[u8]| if b[0] == b' ' { None } else { Some(std::str::from_utf8(b).unwrap().parse::<u16>().unwrap()) }),","highlight_start":1,"highlight_end":130},{"text":"    ))(input)?;","highlight_start":1,"highlight_end":14}],"label":"unsatisfied trait bound","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `nom::sequence::Tuple<_, _, _>` is not implemented for `(impl Fn(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `nom::sequence::Tuple<I, O, E>`:\n  `()` implements `nom::sequence::Tuple<I, (), E>`\n  `(F,)` implements `nom::sequence::Tuple<Input, (Output,), Error>`\n  `(FnA, FnB)` implements `nom::sequence::Tuple<Input, (A, B), Error>`\n  `(FnA, FnB, FnC)` implements `nom::sequence::Tuple<Input, (A, B, C), Error>`\n  `(FnA, FnB, FnC, FnD)` implements `nom::sequence::Tuple<Input, (A, B, C, D), Error>`\n  `(FnA, FnB, FnC, FnD, FnE)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E), Error>`\n  `(FnA, FnB, FnC, FnD, FnE, FnF)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F), Error>`\n  `(FnA, FnB, FnC, FnD, FnE, FnF, FnG)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>`\nand 14 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tuple`","code":null,"level":"note","spans":[{"file_name":"/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/sequence/mod.rs","byte_start":8673,"byte_end":8687,"line_start":275,"line_end":275,"column_start":44,"column_end":58,"is_primary":true,"text":[{"text":"pub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(","highlight_start":44,"highlight_end":58}],"label":"required by this bound in `tuple`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `(impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], char), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u32), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], u32), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], u8), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], char), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<char>), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<String>), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], u16), nom::Err<_>>, impl for<'a> Fn(&'a [u8]) -> for<'a> Result<(&'a [u8], String), nom::Err<nom::error::Error<&'a [u8]>>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<String>), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], u16), nom::Err<_>>, impl FnMut(&[u8]) -> Result<(&[u8], Option<u16>), nom::Err<_>>): nom::sequence::Tuple<_, _, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:253:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    )) = tuple((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m __________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m254\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        parse_fixed_length_string(2),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        parse_fixed_length_string(10),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        parse_fixed_length_string(14),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m290\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        map(take(5), |b: &[u8]| if b[0] == b' ' { None } else { Some(std::str::from_utf8(b).unwrap().parse::<u16>().unwrap()) }),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m291\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ))(input)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munsatisfied trait bound\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `nom::sequence::Tuple<_, _, _>` is not implemented for `(impl Fn(...) -> ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ..., ...)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `nom::sequence::Tuple<I, O, E>`:\u001b[0m\n\u001b[0m              `()` implements `nom::sequence::Tuple<I, (), E>`\u001b[0m\n\u001b[0m              `(F,)` implements `nom::sequence::Tuple<Input, (Output,), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB)` implements `nom::sequence::Tuple<Input, (A, B), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC)` implements `nom::sequence::Tuple<Input, (A, B, C), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD)` implements `nom::sequence::Tuple<Input, (A, B, C, D), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE, FnF)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F), Error>`\u001b[0m\n\u001b[0m              `(FnA, FnB, FnC, FnD, FnE, FnF, FnG)` implements `nom::sequence::Tuple<Input, (A, B, C, D, E, F, G), Error>`\u001b[0m\n\u001b[0m            and 14 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tuple`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nom-7.1.3/src/sequence/mod.rs:275:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn tuple<I, O, E: ParseError<I>, List: Tuple<I, O, E>>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `tuple`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Parser`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":126,"byte_end":132,"line_start":7,"line_end":7,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Parser,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Parser`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Parser,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 6 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 6 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
