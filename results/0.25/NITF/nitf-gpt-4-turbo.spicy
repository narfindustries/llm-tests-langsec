module NITF;

public type FileHeader = unit {
    fileTypeID: /[A-Z0-9]{9}/;
    fileTitle: /[A-Z0-9]{80}/;
    fileSecurityClass: /[A-Z]{1}/;
    fileCopyNumber: /[0-9]{5}/;
    fileNumOfCopies: /[0-9]{5}/;
    encryption: /[0-9]{1}/;
    fileBgColor: /[A-Z0-9]{3}/;
    originStationID: /[A-Z0-9]{10}/;
    fileDateTime: /[0-9]{14}/;
    fileHeaderLength: uint16;
    fileUserDataLength: uint16;
    : skip &length=(fileHeaderLength - 112);
    userData: bytes &size=fileUserDataLength;
};

public type ImageSegmentHeader = unit {
    imageID: /[A-Z0-9]{10}/;
    imageDateTime: /[0-9]{14}/;
    targetID: /[A-Z0-9]{17}/;
    imageTitle: /[A-Z0-9]{80}/;
    imageSecurityClass: /[A-Z]{1}/;
    encryption: /[0-9]{1}/;
    imageFormat: /[A-Z]{1}/;
    numBlocksPerRow: uint16;
    numBlocksPerCol: uint16;
    numPixelsPerBlockHorz: uint16;
    numPixelsPerBlockVert: uint16;
    numBitsPerPixel: uint16;
    imageCompression: /[A-Z0-9]{2}/;
    imageCompressionRateCode: /[A-Z0-9]{4}/;
    imageHeaderLength: uint16;
    : skip &length=(imageHeaderLength - 133);
};

public type ImageData = unit {
    data: bytes &size;
};

public type ImageSegment = unit {
    header: ImageSegmentHeader;
    imageData: ImageData;
};

public type NITFFile = unit {
    header: FileHeader;
    imageSegments: ImageSegment[] &size=header.numImageSegments;
    on %done {
        print self;
    }
};