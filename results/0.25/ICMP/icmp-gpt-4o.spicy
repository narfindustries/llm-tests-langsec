module ICMP;

public type ICMPMessage = unit {
    icmp_type: uint8;
    code: uint8;
    checksum: uint16;
    body: case (icmp_type) of {
        0, 8 => EchoMessage,
        3 => DestinationUnreachable,
        4 => SourceQuench,
        5 => RedirectMessage,
        11 => TimeExceeded,
        12 => ParameterProblem,
        13, 14 => TimestampMessage,
        17, 18 => AddressMaskMessage,
        // Add additional cases for other types if needed
        : bytes &restofdata;
    };
};

type EchoMessage = unit {
    identifier: uint16;
    sequence_number: uint16;
    data: bytes &restofdata;
};

type DestinationUnreachable = unit {
    unused: uint32;
    original_datagram: OriginalDatagram;
};

type SourceQuench = unit {
    unused: uint32;
    original_datagram: OriginalDatagram;
};

type RedirectMessage = unit {
    gateway_internet_address: uint32;
    original_datagram: OriginalDatagram;
};

type TimeExceeded = unit {
    unused: uint32;
    original_datagram: OriginalDatagram;
};

type ParameterProblem = unit {
    pointer: uint8;
    unused: uint24;
    original_datagram: OriginalDatagram;
};

type TimestampMessage = unit {
    identifier: uint16;
    sequence_number: uint16;
    originate_timestamp: uint32;
    receive_timestamp: uint32;
    transmit_timestamp: uint32;
};

type AddressMaskMessage = unit {
    identifier: uint16;
    sequence_number: uint16;
    address_mask: uint32;
};

type OriginalDatagram = unit {
    ip_header: bytes &length=20; // Assuming no IP options
    first_8_bytes: bytes &length=8;
};