#ifndef _ICMP_GEMINI_1_5_FLASH_SPICY_H_
#define _ICMP_GEMINI_1_5_FLASH_SPICY_H_

#include <stdint.h>

// Define structures for ICMP packets (adjust as needed for your specific ICMP types)
typedef struct {
    uint8_t type;
    uint8_t code;
    uint16_t checksum;
    uint16_t identifier;
    uint16_t sequence_number;
} icmp_echo_request_t;

typedef struct {
    uint8_t type;
    uint8_t code;
    uint16_t checksum;
    uint16_t identifier;
    uint16_t sequence_number;
} icmp_echo_reply_t;


// Function to calculate ICMP checksum (replace with your actual checksum calculation)
uint16_t calculate_icmp_checksum(const void* data, size_t len) {
    uint32_t sum = 0;
    const uint16_t* ptr = (const uint16_t*)data;
    while (len > 1) {
        sum += *ptr++;
        len -= 2;
    }
    if (len == 1) {
        sum += *(const uint8_t*)ptr;
    }
    sum = (sum >> 16) + (sum & 0xFFFF);
    sum += (sum >> 16);
    return ~sum;
}


// Example Spicy function to process ICMP packets (replace with your actual logic)
int process_icmp_packet(const uint8_t* packet, size_t len) {
    // Check packet length
    if (len < 8) return 0; // Minimum ICMP header size

    // Extract ICMP type and code
    uint8_t type = packet[0];
    uint8_t code = packet[1];

    // Process based on ICMP type
    if (type == 8) { // ICMP Echo Request
        icmp_echo_request_t* req = (icmp_echo_request_t*)packet;
        // Perform actions for echo request
        // ... your code here ...
        return 1;
    } else if (type == 0) { // ICMP Echo Reply
        icmp_echo_reply_t* reply = (icmp_echo_reply_t*)packet;
        // Perform actions for echo reply
        // ... your code here ...
        return 1;
    } else {
        // Handle other ICMP types
        // ... your code here ...
        return 0;
    }
}


#endif // _ICMP_GEMINI_1_5_FLASH_SPICY_H_
