module MQTT;

import spicy;

type VarInt = unit {
    value: bytes;
};

type Properties = unit {
    length: VarInt;
    properties: list<Property>;
};

type Property = unit {
    identifier: VarInt;
    value: PropertyValue(identifier.value);
};

type PropertyValue = unit(identifier: uint32) {
    switch (identifier) {
        0x11 => payload_format_indicator: uint8;
        0x02 => message_expiry_interval: uint32;
        0x23 => content_type: bytes;
        0x08 => response_topic: bytes;
        0x09 => correlation_data: bytes;
        0x26 => subscription_identifier: VarInt;
        0x21 => session_expiry_interval: uint32;
        0x12 => server_keep_alive: uint16;
        0x1F => authentication_method: bytes;
        0x20 => authentication_data: bytes;
        0x25 => request_problem_information: uint8;
        0x17 => request_response_information: uint8;
        0x22 => receive_maximum: uint16;
        0x24 => topic_alias_maximum: uint16;
        0x26 => topic_alias: uint16;
        0x1A => user_properties: list<UserProperty>;
        * => unknown_data: bytes;
    };
};

type UserProperty = unit {
    key: bytes;
    value: bytes;
};

type Connect = unit {
    protocol_name: bytes;
    protocol_version: uint8;
    connect_flags: bitfield(8) {
        username_flag: 7..7;
        password_flag: 6..6;
        will_retain: 5..5;
        will_qos: 3..4;
        will_flag: 2..2;
        clean_start: 1..1;
    };
    keep_alive: uint16;
    properties: Properties;
    client_id: bytes;
    will_properties: Properties;
    will_topic: bytes;
    will_payload: bytes;
    username: bytes;
    password: bytes;
};

type Publish = unit {
    topic_name: bytes;
    packet_identifier: uint16;
    properties: Properties;
    payload: bytes;
};

type Subscribe = unit {
    packet_identifier: uint16;
    properties: Properties;
    subscriptions: list<Subscription>;
};

type Subscription = unit {
    topic_filter: bytes;
    options: bitfield(8) {
        max_qos: 0..1;
        no_local: 2..2;
        retain_as_published: 3..3;
        retain_handling: 4..5;
    };
};

type Unsubscribe = unit {
    packet_identifier: uint16;
    properties: Properties;
    topic_filters: list<bytes>;
};

type Disconnect = unit {
    reason_code: uint8;
    properties: Properties;
};

type Auth = unit {
    reason_code: uint8;
    properties: Properties;
};

public type MQTTPacket = unit {
    packet_type: bitfield(8) {
        type: 4..7;
        flags: 0..3;
    };
    remaining_length: VarInt;
    payload: bytes;
};