module MQTT;

public type MQTT = unit {
    var fixed_header: FixedHeader;
    var remaining_data: bytes;
    
    packet: ControlPacket;
};

type ControlPacket = unit {
    header: FixedHeader;
    payload: bytes &eod;
};

type FixedHeader = unit {
    packet_type: bitfield(8) {
        message_type: 0..3;
        flags: 4..7;
    };
    remaining_length: VarInt;
};

type VarInt = unit {
    var value: uint64 = 0;
    var multiplier: uint64 = 1;
    var current: uint8;
    
    bytes_: bytes &until-including=(self.current & 0x80 == 0) {
        self.value += (self.current & 0x7F) * self.multiplier;
        self.multiplier *= 128;
    }
};

type StringProp = unit {
    length: uint16;
    value: bytes &size=self.length;
};

type BinaryProp = unit {
    length: uint16;
    value: bytes &size=self.length;
};

type UserProp = unit {
    key_length: uint16;
    key: bytes &size=self.key_length;
    value_length: uint16;
    value: bytes &size=self.value_length;
};

type Property = unit {
    identifier: uint8;
    value: PropertyValue(self.identifier);
};

type PropertyValue = unit(id: uint8) {
    switch(id) {
        0x01 -> payload_format: uint8;
        0x02 -> message_expiry: uint32;
        0x03 -> content_type: StringProp;
        0x08 -> response_topic: StringProp;
        0x09 -> correlation_data: BinaryProp;
        0x0B -> subscription_id: VarInt;
        0x11 -> session_expiry: uint32;
        0x12 -> client_id: StringProp;
        0x13 -> keep_alive: uint16;
        0x15 -> auth_method: StringProp;
        0x16 -> auth_data: BinaryProp;
        0x17 -> request_problem: uint8;
        0x19 -> request_response: uint8;
        0x1A -> response_info: StringProp;
        0x1C -> server_ref: StringProp;
        0x1F -> reason: StringProp;
        0x21 -> receive_max: uint16;
        0x22 -> topic_alias_max: uint16;
        0x23 -> topic_alias: uint16;
        0x24 -> max_qos: uint8;
        0x25 -> retain_available: uint8;
        0x26 -> user_property: UserProp;
        0x27 -> max_packet_size: uint32;
        0x28 -> wildcard_sub: uint8;
        0x29 -> sub_id_available: uint8;
        0x2A -> shared_sub: uint8;
    };
};

type TopicFilter = unit {
    length: uint16;
    filter: bytes &size=self.length;
    options: uint8;
};

type ConnectFlags = unit {
    flags: bitfield(8) {
        reserved: 0;
        clean_start: 1;
        will_flag: 2;
        will_qos: 3..4;
        will_retain: 5;
        password_flag: 6;
        username_flag: 7;
    };
};

type ConnectPacket = unit {
    protocol_name_length: uint16;
    protocol_name: bytes &size=self.protocol_name_length;
    protocol_version: uint8;
    flags: ConnectFlags;
    keep_alive: uint16;
    prop_length: VarInt;
    properties: Property[];
};

type PublishPacket = unit {
    topic_length: uint16;
    topic: bytes &size=self.topic_length;
    packet_id: uint16;
    prop_length: VarInt;
    properties: Property[];
    payload: bytes &eod;
};

type SubscribePacket = unit {
    packet_id: uint16;
    prop_length: VarInt;
    properties: Property[];
    topics: TopicFilter[];
};

type UnsubscribePacket = unit {
    packet_id: uint16;
    prop_length: VarInt;
    properties: Property[];
    topics: TopicFilter[];
};

type DisconnectPacket = unit {
    reason_code: uint8;
    prop_length: VarInt;
    properties: Property[];
};

type AuthPacket = unit {
    reason_code: uint8;
    prop_length: VarInt;
    properties: Property[];
};