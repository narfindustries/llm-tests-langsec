module HTTP;

type HTTPMessage = unit {
    # Start line
    start_line: StartLine

    # Headers
    headers: Headers

    # Optional body
    body: bytes &optional &restofdata;
};

type StartLine = unit {
    line: /[^\r\n]+/ &convert=to_string
    on %done {
        if ( line.startswith("HTTP/") )
            self = StartLine::Response(line);
        else
            self = StartLine::Request(line);
    }
};

type StartLine::Request = unit {
    method: /[A-Z]+/
    _ws1: /\s+/
    uri: /[^\s]+/
    _ws2: /\s+/
    version: /HTTP\/\d+\.\d+/
    _newline: /\r?\n/
};

type StartLine::Response = unit {
    version: /HTTP\/\d+\.\d+/
    _ws1: /\s+/
    status_code: /\d{3}/
    _ws2: /\s+/
    reason_phrase: /[^\r\n]+/
    _newline: /\r?\n/
};

type Headers = unit {
    fields: HeaderField[] &until=->end_of_headers
    end_of_headers: /\r?\n/
};

type HeaderField = unit {
    name: /[A-Za-z0-9-]+/
    _colon: ":"
    _ws: /\s*/
    value: /[^\r\n]+/
    _newline: /\r?\n/
};

# Helper function to convert regex match to string
function to_string(s: bytes): string {
    return s.to_string();
}