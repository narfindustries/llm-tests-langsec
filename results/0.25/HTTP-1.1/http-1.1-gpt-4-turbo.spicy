module HTTP;

import spicy;

type HTTPVersion = unit {
    major: uint8;
    minor: uint8;
    : parse {
        self.major = self.major - b'0';
        self.minor = self.minor - b'0';
    }
};

type RequestLine = unit {
    method: bytes &eod;
    uri: bytes &eod;
    version: HTTPVersion;
};

type ResponseLine = unit {
    version: HTTPVersion;
    status_code: uint16;
    reason_phrase: bytes &eod;
};

type Header = unit {
    name: bytes &until(b":");
    value: bytes &eod;
};

type Headers = unit {
    headers: Header[] &eod;
};

type Message = unit {
    start_line: variant {
        request: RequestLine,
        response: ResponseLine,
    };
    headers: Headers;
    body: bytes &size=body_length(self.headers);
    
    on %done {
        print self;
    }
    
    : parse {
        self.body = b"";
        if (|self.headers.headers| > 0) {
            local content_length = b"";
            for (h in self.headers.headers) {
                if (h.name.to_lower() == b"content-length") {
                    content_length = h.value.strip();
                    break;
                }
            }
            if (content_length != b"") {
                self.body = self.body &size=bytes_to_count(content_length);
            }
        }
    }
};

public type HTTP_Stream = unit {
    messages: Message[];
};

function bytes_to_count(b: bytes): uint64 {
    return to_uint64(b) &requires=|b| > 0;
}

function to_uint64(b: bytes): uint64 {
    local result: uint64 = 0;
    for (c in b) {
        result = result * 10 + (c - b'0');
    }
    return result;
}