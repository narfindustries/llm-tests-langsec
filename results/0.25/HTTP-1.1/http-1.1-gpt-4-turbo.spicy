module HTTP;

import spicy;

type Header = unit {
    name: bytes &eod;
    value: bytes &eod;
    : skip_line;
};

type Headers = unit {
    entries: vector<Header> &eod;
};

type RequestLine = unit {
    method: bytes &eod;
    uri: bytes &eod;
    version: bytes &eod;
    : skip_line;
};

type StatusLine = unit {
    version: bytes &eod;
    code: bytes &eod;
    reason: bytes &eod;
    : skip_line;
};

type Request = unit {
    request_line: RequestLine;
    headers: Headers;
    body: bytes &size=body_size(self.headers);
    : skip_line;
};

type Response = unit {
    status_line: StatusLine;
    headers: Headers;
    body: bytes &size=body_size(self.headers);
    : skip_line;
};

public type HTTPMessage = unit {
    is_request: bool &requires=($context.flow.is_orig);
    message: switch (self.is_request) {
        true -> Request;
        false -> Response;
    };
};

function skip_line(unit: unit) {
    : /[^\n]*\n/;
}

function body_size(headers: Headers): uint64 {
    for (h in headers.entries) {
        if (h.name == b"Content-Length") {
            return spicy::bytes_to_uint(h.value, byte_order=spicy::ByteOrder::Big);
        }
    }
    return 0;
}