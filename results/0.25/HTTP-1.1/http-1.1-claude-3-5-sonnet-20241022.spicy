module HTTP;

import spicy;

public type HTTP_Message = unit {
    request_line: Request_Line &try;
    status_line: Status_Line &try if (!request_line);
    headers: HTTP_Headers;
    body: bytes &eod if (headers.content_length > 0);
};

type Request_Line = unit {
    method: /GET|POST|PUT|DELETE|HEAD|OPTIONS|TRACE|CONNECT/;
    : /[ ]+/;
    uri: /[^ \r\n]+/;
    : /[ ]+/;
    version: /HTTP\/[0-9]\.[0-9]/;
    : /\r?\n/;
};

type Status_Line = unit {
    version: /HTTP\/[0-9]\.[0-9]/;
    : /[ ]+/;
    status: /[0-9]{3}/;
    : /[ ]+/;
    reason: /[^\r\n]+/;
    : /\r?\n/;
};

type HTTP_Headers = unit {
    headers: HTTP_Header[] &until(/^\r?\n/);
    : /\r?\n/;

    var content_length: uint64;

    on headers {
        for ( h in self.headers ) {
            if ( h.name.lower() == "content-length" )
                self.content_length = to_uint(h.value);
        }
    }
};

type HTTP_Header = unit {
    name: /[^:\r\n]+/;
    : /:/;
    : /[ ]*/;
    value: /[^\r\n]+/;
    : /\r?\n/;
};

type GeneralHeaders = unit {
    cache_control: /no-cache|no-store|max-age=[0-9]+|must-revalidate|public|private|no-transform|proxy-revalidate/;
    connection: /close|keep-alive/;
    date: /[A-Za-z]+, [0-9]{2} [A-Za-z]+ [0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2} GMT/;
    pragma: /no-cache/;
    transfer_encoding: /chunked|compress|deflate|gzip|identity/;
};

type RequestHeaders = unit {
    accept: /[^,\r\n]+(,[ ]*[^,\r\n]+)*/;
    accept_charset: /[^,\r\n]+(,[ ]*[^,\r\n]+)*/;
    accept_encoding: /gzip|compress|deflate|br|identity|\*/;
    accept_language: /[^,\r\n]+(,[ ]*[^,\r\n]+)*/;
    authorization: /(Basic|Bearer|Digest)[ ]+[^\r\n]+/;
    expect: /100-continue/;
    from: /[^@]+@[^@\r\n]+/;
    host: /[^:\r\n]+(:[0-9]+)?/;
    if_match: /(?:"[^"]*"|\*)(?:,[ ]*(?:"[^"]*"|\*))*/ &optional;
    if_modified_since: /[A-Za-z]+, [0-9]{2} [A-Za-z]+ [0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2} GMT/;
    if_none_match: /(?:"[^"]*"|\*)(?:,[ ]*(?:"[^"]*"|\*))*/ &optional;
    if_range: /(?:"[^"]*"|[A-Za-z]+, [0-9]{2} [A-Za-z]+ [0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2} GMT)/;
    if_unmodified_since: /[A-Za-z]+, [0-9]{2} [A-Za-z]+ [0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2} GMT/;
    max_forwards: /[0-9]+/;
    proxy_authorization: /[^\r\n]+/;
    range: /bytes=[0-9]+-[0-9]*/;
    referer: /[^\r\n]+/;
    user_agent: /[^\r\n]+/;
};

type ResponseHeaders = unit {
    accept_ranges: /bytes|none/;
    age: /[0-9]+/;
    etag: /"[^"]*"/;
    location: /[^\r\n]+/;
    proxy_authenticate: /[^\r\n]+/;
    retry_after: /(?:[0-9]+|[A-Za-z]+, [0-9]{2} [A-Za-z]+ [0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2} GMT)/;
    server: /[^\r\n]+/;
    vary: /\*|[^,\r\n]+(,[ ]*[^,\r\n]+)*/;
    www_authenticate: /[^\r\n]+/;
};

type EntityHeaders = unit {
    allow: /[A-Z]+(,[ ]*[A-Z]+)*/;
    content_encoding: /gzip|compress|deflate|identity/;
    content_language: /[^,\r\n]+(,[ ]*[^,\r\n]+)*/;
    content_length: /[0-9]+/;
    content_location: /[^\r\n]+/;
    content_md5: /[A-Za-z0-9+\/=]{24}/;
    content_range: /bytes [0-9]+-[0-9]+\/[0-9]+/;
    content_type: /[^\/]+\/[^;\r\n]+(;[ ]*[^\r\n]+)*/;
    expires: /[A-Za-z]+, [0-9]{2} [A-Za-z]+ [0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2} GMT/;
    last_modified: /[A-Za-z]+, [0-9]{2} [A-Za-z]+ [0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2} GMT/;
};

type ChunkedBody = unit {
    chunks: ChunkedData[] &until(/^0\r?\n/);
    : /0\r?\n\r?\n/;
};

type ChunkedData = unit {
    size: /[0-9a-fA-F]+/;
    : /\r?\n/;
    data: bytes &size=convert_hex(size);
    : /\r?\n/;
};

function convert_hex(s: string): uint64 {
    return to_uint(s, 16);
}