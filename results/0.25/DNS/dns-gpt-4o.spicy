module DNS;

type DNSMessage = unit {
    id: uint16;
    flags: DNSFlags;
    qdcount: uint16;
    ancount: uint16;
    nscount: uint16;
    arcount: uint16;
    questions: array of DNSQuestion &length=qdcount;
    answers: array of DNSResourceRecord &length=ancount;
    authorities: array of DNSResourceRecord &length=nscount;
    additionals: array of DNSResourceRecord &length=arcount;
};

type DNSFlags = bitfield {
    qr: bool;        # Query/Response
    opcode: uint8 &bits=4;  # Operation code
    aa: bool;        # Authoritative Answer
    tc: bool;        # Truncation
    rd: bool;        # Recursion Desired
    ra: bool;        # Recursion Available
    z: uint8 &bits=3;  # Reserved
    rcode: uint8 &bits=4;  # Response code
};

type DNSQuestion = unit {
    qname: DNSName;
    qtype: DNSType;
    qclass: DNSClass;
};

type DNSResourceRecord = unit {
    name: DNSName;
    type: DNSType;
    class: DNSClass;
    ttl: uint32;
    rdlength: uint16;
    rdata: bytes &length=rdlength;
};

type DNSName = unit {
    labels: array of DNSLabel &until($input[0] == 0);
    terminator: uint8 &assert(terminator == 0);
};

type DNSLabel = unit {
    length: uint8;
    label: bytes &length=length;
};

enum DNSType : uint16 {
    A = 1,
    NS = 2,
    CNAME = 5,
    SOA = 6,
    PTR = 12,
    MX = 15,
    AAAA = 28,
    ANY = 255
};

enum DNSClass : uint16 {
    IN = 1,
    CH = 3,
    HS = 4,
    ANY = 255
};