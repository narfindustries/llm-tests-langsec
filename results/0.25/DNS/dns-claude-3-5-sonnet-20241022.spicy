module DNS;

import spicy;

public type Message = unit {
    header: Header {
        self.questions_count = $$.qdcount;
        self.answers_count = $$.ancount;
        self.authorities_count = $$.nscount;
        self.additionals_count = $$.arcount;
    }
    questions: Question[self.questions_count];
    answers: ResourceRecord[self.answers_count];
    authorities: ResourceRecord[self.authorities_count];
    additionals: ResourceRecord[self.additionals_count];

    var questions_count: uint16;
    var answers_count: uint16;
    var authorities_count: uint16;
    var additionals_count: uint16;
};

type Header = unit {
    id: uint16;
    flags: bitfield(16) {
        qr: 0;
        opcode: 1..4;
        aa: 5;
        tc: 6;
        rd: 7;
        ra: 8;
        z: 9..11;
        rcode: 12..15;
    };
    qdcount: uint16;
    ancount: uint16;
    nscount: uint16;
    arcount: uint16;
};

type Question = unit {
    name: Name;
    qtype: uint16;
    qclass: uint16;
};

type ResourceRecord = unit {
    name: Name;
    type_: uint16;
    class: uint16;
    ttl: uint32;
    rdlength: uint16;
    rdata: bytes &size=self.rdlength;
};

type Name = unit {
    labels: Label[];
    terminator: uint8;
};

type Label = unit {
    length: uint8;
    label: bytes &size=self.length if (self.length > 0);
};

const TYPE_A = 1;
const TYPE_NS = 2;
const TYPE_CNAME = 5;
const TYPE_SOA = 6;
const TYPE_PTR = 12;
const TYPE_HINFO = 13;
const TYPE_MX = 15;
const TYPE_AAAA = 28;
const TYPE_AXFR = 252;
const TYPE_ANY = 255;

const CLASS_IN = 1;
const CLASS_CS = 2;
const CLASS_CH = 3;
const CLASS_HS = 4;
const CLASS_ANY = 255;

const RCODE_NOERROR = 0;
const RCODE_FORMERR = 1;
const RCODE_SERVFAIL = 2;
const RCODE_NXDOMAIN = 3;
const RCODE_NOTIMP = 4;
const RCODE_REFUSED = 5;

const OPCODE_QUERY = 0;
const OPCODE_IQUERY = 1;
const OPCODE_STATUS = 2;