module DNS;

type uint4 = uint8;
type uint16_type = uint16;
type uint32_type = uint32;

type dns_header = record {
  id: uint16_type,
  qr: bool,
  opcode: uint8 & 0x0f,
  aa: bool,
  tc: bool,
  rd: bool,
  ra: bool,
  z: uint8 & 0x07,
  rcode: uint8 & 0x0f,
}

type domain = bytestring;

type ip4 = uint32_type;
type ip6 = bytestring;

type text = bytestring;

type soa = record {
  mname: domain,
  rname: domain,
  serial: uint32_type,
  refresh: uint32_type,
  retry: uint32_type,
  expire: uint32_type,
  minimum: uint32_type,
}

type mail_exchange = record {
  preference: uint16_type,
  exchange: domain,
}

type dns_rr = record {
  name: domain,
  type: uint16_type,
  class: uint16_type,
  ttl: uint32_type,
  rdlength: uint16_type,
  rdata: case type of {
    1 => ip4,  # A
    2 => domain,  # NS
    5 => domain,  # CNAME
    6 => soa,  # SOA
    12 => domain,  # PTR
    15 => mail_exchange,  # MX
    16 => text,  # TXT
    28 => ip6,  # AAAA
    _ => bytestring,
  },
}

type dns_question = record {
  qname: domain,
  qtype: uint16_type,
  qclass: uint16_type,
}

type dns_message = record {
  header: dns_header,
  questions: vector[dns_question],
  answers: vector[dns_rr],
  authorities: vector[dns_rr],
  additionals: vector[dns_rr],
}