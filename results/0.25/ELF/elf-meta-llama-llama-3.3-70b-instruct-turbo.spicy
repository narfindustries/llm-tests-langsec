module Elf;

type ElfIdent: uint8 = uint8;
type ElfClass: uint8 = uint8;
type ElfData: uint8 = uint8;
type ElfOsabi: uint8 = uint8;
type ElfType: uint16 = uint16;
type ElfMachine: uint16 = uint16;
type ElfVersion: uint32 = uint32;
type ElfEntry: uint32 or uint64 = uint32 or uint64;
type ElfPhoff: uint32 or uint64 = uint32 or uint64;
type ElfShoff: uint32 or uint64 = uint32 or uint64;
type ElfFlags: uint32 = uint32;
type ElfEhsize: uint16 = uint16;
type ElfPhentsize: uint16 = uint16;
type ElfPhnum: uint16 = uint16;
type ElfShentsize: uint16 = uint16;
type ElfShnum: uint16 = uint16;
type ElfShstrndx: uint16 = uint16;

type ProgramHeader = struct {
  p_type: uint32;
  p_offset: uint32 or uint64;
  p_vaddr: uint32 or uint64;
  p_paddr: uint32 or uint64;
  p_filesz: uint32 or uint64;
  p_memsz: uint32 or uint64;
  p_flags: uint32;
  p_align: uint32 or uint64;
};

type SectionHeader = struct {
  sh_name: uint32;
  sh_type: uint32;
  sh_flags: uint32;
  sh_addr: uint32 or uint64;
  sh_offset: uint32 or uint64;
  sh_size: uint32 or uint64;
  sh_link: uint32;
  sh_info: uint32;
  sh_addralign: uint32 or uint64;
  sh_entsize: uint32 or uint64;
};

type SymbolTableEntry = struct {
  st_name: uint32;
  st_value: uint32 or uint64;
  st_size: uint32 or uint64;
  st_info: uint8;
  st_other: uint8;
  st_shndx: uint16;
};

type RelocationEntry = struct {
  r_offset: uint32 or uint64;
  r_info: uint32 or uint64;
  r_type: uint32 or uint64;
};

let elf_file = struct {
  e_ident: ElfIdent;
  e_type: ElfType;
  e_machine: ElfMachine;
  e_version: ElfVersion;
  e_entry: ElfEntry;
  e_phoff: ElfPhoff;
  e_shoff: ElfShoff;
  e_flags: ElfFlags;
  e_ehsize: ElfEhsize;
  e_phentsize: ElfPhentsize;
  e_phnum: ElfPhnum;
  e_shentsize: ElfShentsize;
  e_shnum: ElfShnum;
  e_shstrndx: ElfShstrndx;
  program_headers: ProgramHeader;
  section_headers: SectionHeader;
  symbol_table: SymbolTableEntry;
  relocation_table: RelocationEntry;
};