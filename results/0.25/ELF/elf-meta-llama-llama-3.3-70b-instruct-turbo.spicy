# Spicy specification for parsing ELF files

type Elf64_Ehdr = record {
  e_ident: bytestring(16);
  e_type: uint16;
  e_machine: uint16;
  e_version: uint32;
  e_entry: uint64;
  e_phoff: uint64;
  e_shoff: uint64;
  e_flags: uint32;
  e_ehsize: uint16;
  e_phentsize: uint16;
  e_phnum: uint16;
  e_shentsize: uint16;
  e_shnum: uint16;
  e_shstrndx: uint16;
};

type Elf64_Shdr = record {
  sh_name: uint32;
  sh_type: uint32;
  sh_flags: uint64;
  sh_addr: uint64;
  sh_offset: uint64;
  sh_size: uint64;
  sh_link: uint32;
  sh_info: uint32;
  sh_addralign: uint64;
  sh_entsize: uint64;
};

type Elf64_Phdr = record {
  p_type: uint32;
  p_flags: uint32;
  p_offset: uint64;
  p_vaddr: uint64;
  p_paddr: uint64;
  p_filesz: uint64;
  p_memsz: uint64;
  p_align: uint64;
};

type ElfFile = record {
  hdr: Elf64_Ehdr;
  phdrs: array(Elf64_Phdr);
  shdrs: array(Elf64_Shdr);
};

parser on elf: ElfFile {
  # Parse ELF file header
  hdr = Elf64_Ehdr;

  # Parse program headers
  phdrs = array(Elf64_Phdr) with length = hdr.e_phnum;
  for (i = 0; i < hdr.e_phnum; i++) {
    phdrs[i] = Elf64_Phdr at offset = hdr.e_phoff + (i * hdr.e_phentsize);
  }

  # Parse section headers
  shdrs = array(Elf64_Shdr) with length = hdr.e_shnum;
  for (i = 0; i < hdr.e_shnum; i++) {
    shdrs[i] = Elf64_Shdr at offset = hdr.e_shoff + (i * hdr.e_shentsize);
  }
};

event zeek::zeek_init() {
  Input::add_event([$source="elf-file", $name="elf-parser", $reader=elf]);
}