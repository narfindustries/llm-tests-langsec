# ZIP file format specification in Zeek Spicy

type ZipLocalFileHeader = record {
    local_file_header_signature: uint16 = 0x04034b50;
    version_needed_to_extract: uint16;
    general_purpose_bit_flag: uint16;
    compression_method: uint16;
    last_modification_time: uint16;
    last_modification_date: uint16;
    crc32: uint32;
    compressed_size: uint32;
    uncompressed_size: uint32;
    file_name_length: uint16;
    extra_field_length: uint16;
};

type ZipCentralDirectoryEntry = record {
    central_directory_signature: uint32 = 0x02014b50;
    version_made_by: uint16;
    version_needed_to_extract: uint16;
    general_purpose_bit_flag: uint16;
    compression_method: uint16;
    last_modification_time: uint16;
    last_modification_date: uint16;
    crc32: uint32;
    compressed_size: uint32;
    uncompressed_size: uint32;
    file_name_length: uint16;
    extra_field_length: uint16;
    file_comment_length: uint16;
    disk_number_start: uint16;
    internal_file_attributes: uint16;
    external_file_attributes: uint32;
    relative_offset_local_header: uint32;
};

type ZipEndOfCentralDirectory = record {
    end_of_central_directory_signature: uint32 = 0x06054b50;
    number_of_this_disk: uint16;
    number_of_the_disk_where_the_central_directory_starts: uint16;
    total_number_of_entries_in_the_central_directory_on_this_disk: uint16;
    total_number_of_entries_in_the_central_directory: uint16;
    size_of_the_central_directory: uint32;
    offset_of_start_of_central_directory_with_respect_to_the_starting_disk_number: uint32;
    zip_file_comment_length: uint16;
};

type ZipArchive = sequence of record {
    local_file_header: ZipLocalFileHeader;
    file_name: bytestring(local_file_header.file_name_length);
    extra_field: bytestring(local_file_header.extra_field_length);
    file_data: bytestring(local_file_header.compressed_size);
};

type ZipCentralDirectory = sequence of record {
    central_directory_entry: ZipCentralDirectoryEntry;
    file_name: bytestring(central_directory_entry.file_name_length);
    extra_field: bytestring(central_directory_entry.extra_field_length);
    file_comment: bytestring(central_directory_entry.file_comment_length);
};

type ZipFile = record {
    zip_archive: ZipArchive;
    central_directory: ZipCentralDirectory;
    end_of_central_directory: ZipEndOfCentralDirectory;
};

event zeek::-spicy::file_sniff(f: fa_file, meta: fa_metadata) {
    # Skip non-ZIP files
    if (metaà¸‘ype != "application/zip") {
        return;
    }

    # Extract file contents
    local contents = f$contents;

    # Parse ZIP file structure
    local zip_file: ZipFile;
    try {
        zip_file = contents;
    } catch (e) {
        # Handle parsing errors
        print("Error parsing ZIP file:", e);
        return;
    }

    # Process each file in the ZIP archive
    for (local_file_header in zip_file.zip_archive) {
        # Extract file name and data
        local file_name = local_file_header.file_name;
        local file_data = local_file_header.file_data;

        # Process file data
        # ... (add custom processing logic here)
    }
}