module ZIP;

type LocalHeader = struct {
  local_header_signature: uint32;
  version_needed_to_extract: uint16;
  general_purpose_bit_flag: uint16;
  compression_method: uint16;
  last_mod_time: uint16;
  last_mod_date: uint16;
  crc_32: uint32;
  compressed_size: uint32;
  uncompressed_size: uint32;
  filename_length: uint16;
  extra_field_length: uint16;
};

type CentralDirectoryHeader = struct {
  central_header_signature: uint32;
  version_made_by: uint16;
  version_needed_to_extract: uint16;
  general_purpose_bit_flag: uint16;
  compression_method: uint16;
  last_mod_time: uint16;
  last_mod_date: uint16;
  crc_32: uint32;
  compressed_size: uint32;
  uncompressed_size: uint32;
  filename_length: uint16;
  extra_field_length: uint16;
  file_comment_length: uint16;
  disk_number_start: uint16;
  int_attributes: uint16;
  ext_attributes: uint32;
};

type EndOfCentralDirectoryRecord = struct {
  end_of_central_dir_signature: uint32;
  number_of_this_disk: uint16;
  number_of_the_disk_where_the_central_directory_starts: uint16;
  total_number_of_entries_in_the_central_directory_on_this_disk: uint16;
  total_number_of_entries_in_the_central_directory: uint16;
  size_of_the_central_directory: uint32;
  offset_of_start_of_central_directory_with_respect_to_the_starting_disk_number: uint32;
  zip_file_comment_length: uint16;
};

type GeneralPurposeBitFlag = struct {
  encrypted_file: bool;
  compression_option: bool;
  descriptor: bool;
  enhanced_deflate: bool;
  compressed_patched_data: bool;
  strong_encryption: bool;
};

type InternalFileAttributes = struct {
  text_file: bool;
};

type ExternalFileAttributes = struct {
  file_type: uint16;
  file_permissions: uint16;
};

type CompressionMethod = enum {
  STORED,
  SHRUNK,
  IMPLoded,
  TOKENIZED,
  DEFLATED,
  IMPLoded_DICTIONARY,
  RESERVED_6,
  RESERVED_7,
  DEFLATED64,
  IMPLoded_DICTIONARY_COMPRESSED_DATA_DESCRIPTOR,
};

let zip_file: struct {
  local_headers: array[LocalHeader];
  central_directory_headers: array[CentralDirectoryHeader];
  end_of_central_directory_record: EndOfCentralDirectoryRecord;
};

let local_header: struct {
  local_header_signature: uint32;
  version_needed_to_extract: uint16;
  general_purpose_bit_flag: uint16;
  compression_method: uint16;
  last_mod_time: uint16;
  last_mod_date: uint16;
  crc_32: uint32;
  compressed_size: uint32;
  uncompressed_size: uint32;
  filename_length: uint16;
  extra_field_length: uint16;
};

let central_directory_header: struct {
  central_header_signature: uint32;
  version_made_by: uint16;
  version_needed_to_extract: uint16;
  general_purpose_bit_flag: uint16;
  compression_method: uint16;
  last_mod_time: uint16;
  last_mod_date: uint16;
  crc_32: uint32;
  compressed_size: uint32;
  uncompressed_size: uint32;
  filename_length: uint16;
  extra_field_length: uint16;
  file_comment_length: uint16;
  disk_number_start: uint16;
  int_attributes: uint16;
  ext_attributes: uint32;
};

let end_of_central_directory_record: struct {
  end_of_central_dir_signature: uint32;
  number_of_this_disk: uint16;
  number_of_the_disk_where_the_central_directory_starts: uint16;
  total_number_of_entries_in_the_central_directory_on_this_disk: uint16;
  total_number_of_entries_in_the_central_directory: uint16;
  size_of_the_central_directory: uint32;
  offset_of_start_of_central_directory_with_respect_to_the_starting_disk_number: uint32;
  zip_file_comment_length: uint16;
};