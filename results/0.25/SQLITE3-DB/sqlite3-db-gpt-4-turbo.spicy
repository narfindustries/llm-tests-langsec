module SQLite;

import spicy;

type HeaderString = unit {
    magic: bytes &size=16;
};

type DatabaseHeader = unit {
    headerString: HeaderString;
    pageSize: uint16;
    writeVersion: uint8;
    readVersion: uint8;
    reservedSpace: uint8;
    maxPayloadFrac: uint8;
    minPayloadFrac: uint8;
    leafPayloadFrac: uint8;
    changeCounter: uint32;
    dbSizePages: uint32;
    firstFreelistTrunkPage: uint32;
    totalFreelistPages: uint32;
    schemaCookie: uint32;
    schemaFormat: uint32;
    defaultCacheSize: uint32;
    largestRootBTreePage: uint32;
    dbTextEncoding: uint32;
    userVersion: uint32;
    vacuumMode: uint32;
    applicationID: uint32;
    reserved: bytes &size=20;
    versionValidFor: uint32;
    sqliteVersion: uint32;
};

type PageHeader = unit {
    pageType: uint8;
    firstFreeblock: uint16;
    numCells: uint16;
    cellContentOffset: uint16;
    numFragmentedFreeBytes: uint8;
};

type CellPointer = unit {
    offset: uint16;
};

type BTreePage = unit {
    header: PageHeader;
    cellPointers: vector<CellPointer> &size=this.header.numCells;
    // Additional fields would be needed here to parse the cells based on the page type
};

type DatabaseFile = unit {
    header: DatabaseHeader;
    pages: vector<BTreePage> &eod;
};

public type SQLiteDB = unit {
    dbFile: DatabaseFile;
};