module sqlite3;

type SQLite3 = unit {
    header: Header;
};

type Header = unit {
    magic: bytes &size=16 &check=($$ == "SQLite format 3\000");

    page_size: uint16 &check=(page_size == 1 || (page_size >= 512 && page_size <= 65536 && (page_size & (page_size - 1)) == 0));

    write_version: uint8 &check=(write_version == 1 || write_version == 2);

    read_version: uint8 &check=(read_version == 1 || read_version == 2);

    reserved_space: uint8;

    max_embedded_payload_fraction: uint8 &check=(max_embedded_payload_fraction == 64);

    min_embedded_payload_fraction: uint8 &check=(min_embedded_payload_fraction == 32);

    leaf_payload_fraction: uint8 &check=(leaf_payload_fraction == 32);

    file_change_counter: uint32;

    database_size_in_pages: uint32;

    first_freelist_page: uint32;

    total_freelist_pages: uint32;

    schema_cookie: uint32;

    schema_format_number: uint32 &check=(schema_format_number >= 1 && schema_format_number <= 4);

    default_page_cache_size: uint32;

    largest_root_btree_page_number: uint32;

    text_encoding: uint32 &check=(text_encoding == 1 || text_encoding == 2 || text_encoding == 3);

    user_version: uint32;

    incremental_vacuum_mode: uint32 &check=(incremental_vacuum_mode == 0 || incremental_vacuum_mode == 1);

    application_id: uint32;

    reserved_for_expansion: bytes &size=20 &check=(all(reserved_for_expansion == 0));

    version_valid_for_number: uint32;

    sqlite_version_number: uint32;
};