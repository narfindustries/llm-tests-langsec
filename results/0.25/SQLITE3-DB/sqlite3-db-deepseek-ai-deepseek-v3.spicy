module SQLite3;

import spicy;

type Header = unit {
    magic: bytes &size=16;
    page_size: uint16;
    write_version: uint8;
    read_version: uint8;
    reserved_space: uint8;
    max_payload_fraction: uint8;
    min_payload_fraction: uint8;
    leaf_payload_fraction: uint8;
    file_change_counter: uint32;
    db_size_in_pages: uint32;
    first_freelist_page: uint32;
    freelist_page_count: uint32;
    schema_cookie: uint32;
    schema_format_number: uint32;
    default_page_cache_size: uint32;
    largest_btree_page: uint32;
    db_text_encoding: uint32;
    user_version: uint32;
    incremental_vacuum_mode: uint32;
    application_id: uint32;
    reserved: bytes &size=20;
    version_valid_for: uint32;
    sqlite_version_number: uint32;
};

type BTreePage = unit {
    flags: uint8;
    cell_count: uint16;
    rightmost_child_pointer: uint32;
    cells: bytes &size=(self.context.page_size - 8);
};

type OverflowPage = unit {
    next_overflow_page: uint32;
    payload: bytes &size=(self.context.page_size - 4);
};

type FreelistPage = unit {
    next_freelist_page: uint32;
    free_page_count: uint32;
    free_page_numbers: uint32[] &size=self.free_page_count;
};

type LockBytePage = unit {
    lock_bytes: bytes &size=self.context.page_size;
};

type WALHeader = unit {
    magic_number: uint32;
    file_format_version: uint32;
    page_size: uint32;
    checkpoint_sequence: uint32;
    salt_values: uint32[2];
    checksum: uint32;
};

type WALFrame = unit {
    page_number: uint32;
    data: bytes &size=self.context.page_size;
};

type WALFile = unit {
    header: WALHeader;
    frames: WALFrame[] &size=self.header.page_size;
};

type SQLite3DB = unit {
    header: Header;
    btree_pages: BTreePage[] &size=self.header.db_size_in_pages;
    overflow_pages: OverflowPage[];
    freelist_pages: FreelistPage[];
    lock_byte_page: LockBytePage;
    wal_file: WALFile;
};