# Example of SQLite database file format parsing
# using Zeek Spicy
module SQLite;

export {
  redef enum Log::ID += { SQLite::LOG };
}

type sqlite_master: record {
  type: uint32; # 0 for table, 1 for index
  name: string;
  rootpage: uint32;
};

type sqlite_db_header: record {
  magic: string &length=16;
  page_size: uint16;
  write_version: uint8;
  read_version: uint8;
  reserved_space: uint8;
  max_payload_fraction: uint8;
  min_payload_fraction: uint8;
  leaf_payload_fraction: uint8;
  file_format_version: uint8;
  size_of_database_file_in_pages: uint32;
};

event zeek_init() {
  Log::add_filter(SQLite::LOG, [$name = "sqlite"]);
}

event zeek_done() {
  Log::remove_filter(SQLite::LOG, [$name = "sqlite"]);
}

event file_sniff(f: fa_file, meta: fa_metadata) {
  # Magic bytes of SQLite database files
  if ( f$contents =~ /^\x53\x51\x4c\x69\x74\x65\x20\x66\x6f\x72\x6d\x61\x74\x20\x33\x00/ ) {
    local sqlite_meta = [$name = "sqlite", $source = f$id];
    Files::add_analyzer(f, Files::ANALYZER_SQLITE, sqlite_meta);
  }
}

event file_override_fallback(f: fa_file) {
  # Create an empty file content for parsing
  local empty_string = "";
  local sqlite_db = file_xml_to_sqlite(empty_string);
  if ( sqlite_db != "" ) {
    add sqlite_db;
  }
}

function file_xml_to_sqlite(xml_string: string): string {
  local sqlite_db_header_rec: sqlite_db_header;
  local file_content: string = xml_string;
  
  # Trying to match the SQLite DB header 
  if ( |file_content| > 100 ) {
    sqlite_db_header_rec = unpack_file(file_content, /sqlite_db_header/);
    if ( sqlite_db_header_rec$magic == "SQLite format 3" ) {
      return file_content;
    }
  }
  
  return "";
}

function unpack_file(data: string, type_name: string): any {
  local unpacked_data: any;
  when ( local success = unpack_data(data, type_name, unpacked_data) ) {
    return unpacked_data;
  }
  return "";
}

event Files::file_analyzed(f: fa_file, meta: fa_metadata) {
  local description = "";
  # Analyze SQLite database file
  if ( [f$id] in Files::analyzed && [f$id] in Files::analysis_complete ) {
    Log::write(SQLite::LOG, [$src = f$id, $msg = description]);
  }
}