module SQLite3;

public type Header = unit {
    magic: bytes &size=16;
    page_size: uint16;
    file_format_write_version: uint8;
    file_format_read_version: uint8;
    reserved_space: uint8;
    max_embedded_payload_fraction: uint8;
    min_embedded_payload_fraction: uint8;
    leaf_payload_fraction: uint8;
    file_change_counter: uint32;
    db_size_pages: uint32;
    first_freelist_trunk_page: uint32;
    total_freelist_pages: uint32;
    schema_cookie: uint32;
    schema_format: uint32;
    default_page_cache_size: uint32;
    largest_root_btree_page: uint32;
    text_encoding: uint32;
    user_version: uint32;
    incremental_vacuum_mode: uint32;
    application_id: uint32;
    reserved: bytes &size=20;
    version_valid: uint32;
    sqlite_version: uint32;
};

type BTreePageHeader = unit {
    page_type: uint8;
    first_freeblock: uint16;
    cell_count: uint16;
    cell_content_offset: uint16;
    fragmented_free_bytes: uint8;
    right_child: uint32 if (self.page_type == 0x02 || self.page_type == 0x05);
};

type Varint = unit {
    var value: uint64;
    var bytes_read: uint8;
    data: bytes &eod &chunked;
};

type TableLeafCell = unit {
    payload_size: Varint;
    row_id: Varint;
    payload: bytes &size=self.payload_size.value;
};

type TableInteriorCell = unit {
    left_child: uint32;
    row_id: Varint;
};

type IndexLeafCell = unit {
    payload_size: Varint;
    payload: bytes &size=self.payload_size.value;
};

type IndexInteriorCell = unit {
    left_child: uint32;
    payload_size: Varint;
    payload: bytes &size=self.payload_size.value;
};

type Page = unit {
    header: BTreePageHeader;
    cells: bytes &size=self.header.cell_count;
};

public type Database = unit {
    header: Header;
    pages: Page[];
};

on Header::magic {
    if ( self.magic != b"SQLite format 3\x00" )
        throw "invalid SQLite magic";
}

on Header::page_size {
    if ( self.page_size < 512 || self.page_size > 32768 || (self.page_size & (self.page_size - 1)) != 0 )
        throw "invalid page size";
}

on Header::text_encoding {
    if ( self.text_encoding != 1 && self.text_encoding != 2 && self.text_encoding != 3 )
        throw "invalid text encoding";
}

on Header::schema_format {
    if ( self.schema_format < 1 || self.schema_format > 4 )
        throw "invalid schema format";
}