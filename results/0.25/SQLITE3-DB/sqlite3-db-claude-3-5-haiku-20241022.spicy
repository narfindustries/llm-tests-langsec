module SQLite3;

import spicy;

public type FileHeader = unit {
    magic: bytes &size=16 &validate(self == b"SQLite format 3\x00");
    page_size: uint16 &validate(self >= 512 && self <= 65536 && (self & (self - 1)) == 0);
    write_version: uint8 &validate(self == 1 || self == 2);
    read_version: uint8 &validate(self == 1 || self == 2);
    reserved_space: uint8;
    max_payload_fraction: uint8 &default=64;
    min_payload_fraction: uint8 &default=32;
    leaf_payload_fraction: uint8 &default=32;
    file_change_counter: uint32;
    database_size_pages: uint32;
    first_freelist_trunk_page: uint32;
    total_freelist_pages: uint32;
    schema_cookie: uint32;
    schema_format: uint32 &validate(self >= 1 && self <= 4);
    default_encoding: uint32 &validate(self >= 1 && self <= 3);
    user_version: uint32;
    incremental_vacuum_mode: uint32;
    reserved: bytes &size=20;
};

public type VarInt = unit {
    value: bytes &until(!(self[-1] & 0x80)) &convert=$$.to_uint();
};

public type PageHeader = unit {
    page_type: uint8 &validate(self >= 2 && self <= 5);
    first_freeblock: uint16;
    cell_count: uint16;
    cell_content_start: uint16;
    fragmented_free_bytes: uint8;
};

public type BTreeTableLeafCell = unit {
    payload_size: VarInt;
    row_id: VarInt;
    payload: bytes &size=payload_size.value;
};

public type BTreeTableInteriorCell = unit {
    left_child_page: uint32;
    row_id: VarInt;
};

public type BTreeIndexLeafCell = unit {
    payload_size: VarInt;
    payload: bytes &size=payload_size.value;
};

public type BTreeIndexInteriorCell = unit {
    left_child_page: uint32;
    payload_size: VarInt;
    payload: bytes &size=payload_size.value;
};

public type Cell = unit {
    cell: (BTreeTableLeafCell | BTreeTableInteriorCell | BTreeIndexLeafCell | BTreeIndexInteriorCell);
};

public type Page = unit {
    header: PageHeader;
    cells: vector<Cell>;
};

public type SQLite3Database = unit {
    header: FileHeader;
    pages: vector<Page>;
};

public type SQLite3Parser = unit {
    database: SQLite3Database;

    parse = method() -> SQLite3Database {
        self.database.header = parse<FileHeader>(input[0:100]);
        return self.database;
    };
};

public function parse(data: bytes) : SQLite3Database {
    local parser = new SQLite3Parser(data);
    return parser.parse();
}