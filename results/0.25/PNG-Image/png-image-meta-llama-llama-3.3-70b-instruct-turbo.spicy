module PNGImage;

type png_signature = byte[8] = { 89, 50, 4E, 47, 0D, 0A, 1A, 0A };
type png_chunk_length = uint32;
type png_chunk_type = enum { IHDR, PLTE, IDAT, IEND, cHRM, gAMA, iCCP, sBIT, sRGB, tEXt, tIME, bKGD, hIST, pHYs, sCAL, tRNS, oFFs, pCAL, sPLT, acTL, fcTL, fdAT };

type png_chunk = record {
  length: uint32;
  type: png_chunk_type;
  data: byte[length];
  crc: uint32;
};

type png_ihdr = record {
  width: uint32;
  height: uint32;
  bit_depth: uint8;
  color_type: uint8;
  compression_method: uint8;
  filter_method: uint8;
  interlace_method: uint8;
};

type png_plte = record {
  palette_entries: byte[3][*];
};

type png_idat = record {
  compressed_image_data: byte[*];
};

type png_iend = record { };

type png_chrm = record {
  white_point_x: uint32;
  white_point_y: uint32;
  red_x: uint32;
  red_y: uint32;
  green_x: uint32;
  green_y: uint32;
  blue_x: uint32;
  blue_y: uint32;
};

type png_gama = record {
  gamma_value: uint32;
};

type png_iccp = record {
  profile_name: byte[*];
  compression_method: uint8;
  compressed_profile: byte[*];
};

type png_sbit = record {
  significant_bits: uint8[4];
};

type png_srgb = record {
  rendering_intent: uint8;
};

type png_text = record {
  keyword: byte[*];
  text: byte[*];
};

type png_time = record {
  year: uint16;
  month: uint8;
  day: uint8;
  hour: uint8;
  minute: uint8;
  second: uint8;
};

type png_bkgd = record {
  background_color: byte[1] | byte[3] | byte[6];
};

type png_hist = record {
  histogram_entries: uint16[*];
};

type png_phys = record {
  pixels_per_unit_x: uint32;
  pixels_per_unit_y: uint32;
  unit: uint8;
};

type png_scal = record {
  unit: uint8;
  width: byte[*];
  height: byte[*];
};

type png_trns = record {
  transparency_data: byte[1] | byte[3] | byte[6];
};

type png_offs = record {
  x_offset: int32;
  y_offset: int32;
  unit: uint8;
};

type png_pcal = record {
  calibration_name: byte[*];
  calibration_data: byte[*];
};

type png_splt = record {
  palette_name: byte[*];
  palette_entries: record {
    red: uint8;
    green: uint8;
    blue: uint8;
    frequency: uint16;
  }[*];
};

type png_actl = record {
  number_of_frames: uint32;
  number_of_plays: uint32;
};

type png_fctl = record {
  sequence_number: uint32;
  width: uint32;
  height: uint32;
  x_offset: int32;
  y_offset: int32;
  delay_num: uint16;
  delay_den: uint16;
  dispose_op: uint8;
  blend_op: uint8;
};

type png_fdta = record {
  sequence_number: uint32;
  frame_data: byte[*];
};

type png_image = record {
  signature: png_signature;
  chunks: png_chunk[*];
};