module gzip;

import spicy;

public type Header = struct {
    magic: bytes[2];
    compression_method: uint8;
    flags: uint8;
    mtime: uint32;
    extra_flags: uint8;
    os: uint8;
} &validate($$.magic == b"\x1f\x8b")
  &validate($$.compression_method == 0x08);

type ExtraFields = struct {
    length: uint16;
    data: bytes;
};

type OptionalFields = struct {
    extra: optional<ExtraFields>;
    filename: optional<string>;
    comment: optional<string>;
    header_crc: optional<uint16>;
};

public type File = struct {
    header: Header;
    optional_fields: OptionalFields;
    compressed_data: bytes;
    crc32: uint32;
    uncompressed_size: uint32;
};

public type Parser = parser {
    header: Header;
    optional_fields: OptionalFields;
    compressed_data: bytes;
    crc32: uint32;
    uncompressed_size: uint32;

    parse: sequence {
        self.header = parse Header;
        self.optional_fields = parse OptionalFields;
        self.compressed_data = parse bytes;
        self.crc32 = parse uint32;
        self.uncompressed_size = parse uint32;
    }
}

public function parse(data: bytes): File {
    local p = Parser(data);
    p.parse();
    return File(
        header: p.header,
        optional_fields: p.optional_fields,
        compressed_data: p.compressed_data,
        crc32: p.crc32,
        uncompressed_size: p.uncompressed_size
    );
}