module MQTT;

import spicy;

type MQTTFixedHeader = unit {
    type: uint8 &convert=(self & 0xF0) >> 4;
    flags: uint8 &convert=self & 0x0F;
    remaining_length: uint8 &convert=self & 0x7F;
};

type MQTTConnect = unit {
    protocol_name: bytes &size=2;
    protocol_level: uint8;
    connect_flags: uint8;
    keep_alive: uint16;
    client_id: bytes &until=b"\x00";
};

type MQTTConnAck = unit {
    acknowledge_flags: uint8;
    return_code: uint8;
};

type MQTTSubscribe = unit {
    packet_id: uint16;
    topic_filters: bytes[] &until=b"\x00";
};

type MQTTSubAck = unit {
    packet_id: uint16;
    return_codes: uint8[];
};

type MQTTPublish = unit {
    topic_name: bytes &until=b"\x00";
    packet_id: uint16;
    payload: bytes &size=remaining_length - 2 - len(topic_name);
};

type MQTTPacket = unit {
    fixed_header: MQTTFixedHeader;
    switch (fixed_header.type) {
        1 -> connect: MQTTConnect;
        2 -> connack: MQTTConnAck;
        3 -> publish: MQTTPublish;
        8 -> subscribe: MQTTSubscribe;
        9 -> suback: MQTTSubAck;
    };
};

on MQTTPacket::%done {
    print self;
}