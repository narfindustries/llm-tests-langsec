module MQTT;

type mqtt_fixed_header = record {
  byte0 = uint8;
  byte1 = uint8;
};

type mqtt_packet_identifier = record {
  identifier = uint16;
};

type mqtt_connect_flags = record {
  clean_start = bool;
  will_flag = bool;
  will_qos = uint8;
  will_retain = bool;
  password_flag = bool;
  username_flag = bool;
};

type mqtt_connect_properties = record {
  session_expiry_interval = uint32;
  authentication_method = string;
  authentication_data = bytes;
  will_delay_interval = uint32;
  will_properties = mqtt_will_properties;
};

type mqtt_will_properties = record {
  payload_format_indicator = bool;
  message_expiry_interval = uint32;
  content_type = string;
  response_topic = string;
  correlation_data = bytes;
  user_properties = array[string];
};

type mqtt_connect = record {
  protocol_name = string;
  protocol_level = uint8;
  connect_flags = mqtt_connect_flags;
  keep_alive = uint16;
  properties = mqtt_connect_properties;
  username = string;
  password = string;
};

type mqtt_connack_properties = record {
  session_expiry_interval = uint32;
  reason_string = string;
  user_properties = array[string];
  server_reference = string;
};

type mqtt_connack = record {
  session_present = bool;
  return_code = uint8;
  properties = mqtt_connack_properties;
};

type mqtt_publish_properties = record {
  payload_format_indicator = bool;
  message_expiry_interval = uint32;
  content_type = string;
  response_topic = string;
  correlation_data = bytes;
  subscription_identifier = uint32;
  user_properties = array[string];
};

type mqtt_publish = record {
  dup = bool;
  qos = uint8;
  retain = bool;
  topic_name = string;
  packet_identifier = mqtt_packet_identifier;
  properties = mqtt_publish_properties;
  payload = bytes;
};

type mqtt_puback_properties = record {
  reason_string = string;
  user_properties = array[string];
};

type mqtt_puback = record {
  packet_identifier = mqtt_packet_identifier;
  reason_code = uint8;
  properties = mqtt_puback_properties;
};

type mqtt_pubrec_properties = record {
  reason_string = string;
  user_properties = array[string];
};

type mqtt_pubrec = record {
  packet_identifier = mqtt_packet_identifier;
  reason_code = uint8;
  properties = mqtt_pubrec_properties;
};

type mqtt_pubrel_properties = record {
  reason_string = string;
  user_properties = array[string];
};

type mqtt_pubrel = record {
  packet_identifier = mqtt_packet_identifier;
  reason_code = uint8;
  properties = mqtt_pubrel_properties;
};

type mqtt_pubcomp_properties = record {
  reason_string = string;
  user_properties = array[string];
};

type mqtt_pubcomp = record {
  packet_identifier = mqtt_packet_identifier;
  reason_code = uint8;
  properties = mqtt_pubcomp_properties;
};

type mqtt_subscribe_properties = record {
  subscription_identifier = uint32;
  user_properties = array[string];
};

type mqtt_subscribe = record {
  packet_identifier = mqtt_packet_identifier;
  properties = mqtt_subscribe_properties;
  topic_filters = array[string];
};

type mqtt_suback_properties = record {
  reason_string = string;
  user_properties = array[string];
};

type mqtt_suback = record {
  packet_identifier = mqtt_packet_identifier;
  reason_codes = array[uint8];
  properties = mqtt_suback_properties;
};

type mqtt_unsubscribe_properties = record {
  user_properties = array[string];
};

type mqtt_unsubscribe = record {
  packet_identifier = mqtt_packet_identifier;
  properties = mqtt_unsubscribe_properties;
  topic_filters = array[string];
};

type mqtt_unsuback_properties = record {
  reason_string = string;
  user_properties = array[string];
};

type mqtt_unsuback = record {
  packet_identifier = mqtt_packet_identifier;
  reason_codes = array[uint8];
  properties = mqtt_unsuback_properties;
};

type mqtt_disconnect_properties = record {
  session_expiry_interval = uint32;
  reason_string = string;
  user_properties = array[string];
  server_reference = string;
};

type mqtt_disconnect = record {
  reason_code = uint8;
  properties = mqtt_disconnect_properties;
};

let mqtt_parser = 
  $(mqtt_fixed_header)
  -> $(mqtt_connect)
  -> $(mqtt_connack)
  -> $(mqtt_publish)
  -> $(mqtt_puback)
  -> $(mqtt_pubrec)
  -> $(mqtt_pubrel)
  -> $(mqtt_pubcomp)
  -> $(mqtt_subscribe)
  -> $(mqtt_suback)
  -> $(mqtt_unsubscribe)
  -> $(mqtt_unsuback)
  -> $(mqtt_disconnect);

let mqtt = mqtt_parser;