module MQTT;

public type FixedHeader = unit {
    packet_bits: bitfield(8) {
        message_type: 0..3;
        flags: 4..7;
    };
    remaining_length: VarByteInteger;
};

type VarByteInteger = unit {
    value: bytes &until=(self.value & 0x80 == 0) &convert=bytes_to_uint;
};

type StringPair = unit {
    key_length: uint16;
    key: bytes &size=self.key_length;
    value_length: uint16;
    value: bytes &size=self.value_length;
};

type MQTTString = unit {
    length: uint16;
    value: bytes &size=self.length;
};

type BinaryData = unit {
    length: uint16;
    value: bytes &size=self.length;
};

type Properties = unit {
    length: VarByteInteger;
    properties: bytes &size=self.length.value;
};

type ConnectFlags = unit {
    flag_bits: bitfield(8) {
        username: 7;
        password: 6;
        will_retain: 5;
        will_qos: 3..4;
        will_flag: 2;
        clean_start: 1;
        reserved: 0;
    };
};

type ConnectPacket = unit {
    protocol_name: MQTTString;
    protocol_version: uint8;
    connect_flags: ConnectFlags;
    keep_alive: uint16;
    properties: Properties;
    client_id: MQTTString;
    will_properties: Properties if(self.connect_flags.flag_bits.will_flag == 1);
    will_topic: MQTTString if(self.connect_flags.flag_bits.will_flag == 1);
    will_payload: BinaryData if(self.connect_flags.flag_bits.will_flag == 1);
    username: MQTTString if(self.connect_flags.flag_bits.username == 1);
    password: BinaryData if(self.connect_flags.flag_bits.password == 1);
};

type ConnAckPacket = unit {
    acknowledge_flags: bitfield(8) {
        session_present: 0;
        reserved: 1..7;
    };
    reason_code: uint8;
    properties: Properties;
};

type PublishPacket = unit {
    topic_name: MQTTString;
    packet_identifier: uint16 if(self.parent.packet_bits.flags != 0);
    properties: Properties;
    payload: bytes &eod;
};

type PubAckPacket = unit {
    packet_identifier: uint16;
    reason_code: uint8;
    properties: Properties;
};

type SubscribePacket = unit {
    packet_identifier: uint16;
    properties: Properties;
    subscription_list: bytes &eod;
};

type SubAckPacket = unit {
    packet_identifier: uint16;
    properties: Properties;
    reason_codes: bytes &eod;
};

type UnsubscribePacket = unit {
    packet_identifier: uint16;
    properties: Properties;
    topic_filters: bytes &eod;
};

type UnsubAckPacket = unit {
    packet_identifier: uint16;
    properties: Properties;
    reason_codes: bytes &eod;
};

type DisconnectPacket = unit {
    reason_code: uint8;
    properties: Properties;
};

type AuthPacket = unit {
    reason_code: uint8;
    properties: Properties;
};

public type Message = unit {
    header: FixedHeader;
    
    switch(self.header.packet_bits.message_type) {
        1 -> connect: ConnectPacket;
        2 -> connack: ConnAckPacket;
        3 -> publish: PublishPacket;
        4 -> puback: PubAckPacket;
        5 -> pubrec: PubAckPacket;
        6 -> pubrel: PubAckPacket;
        7 -> pubcomp: PubAckPacket;
        8 -> subscribe: SubscribePacket;
        9 -> suback: SubAckPacket;
        10 -> unsubscribe: UnsubscribePacket;
        11 -> unsuback: UnsubAckPacket;
        14 -> disconnect: DisconnectPacket;
        15 -> auth: AuthPacket;
    };
};