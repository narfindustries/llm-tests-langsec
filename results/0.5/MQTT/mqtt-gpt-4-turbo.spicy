module MQTT;

import spicy;

type FixedHeader = unit {
    packetType: uint4;
    flags: uint4;
    remainingLength: uint32;
};

type ConnectFlags = unit {
    reserved: bit;
    cleanStart: bit;
    willFlag: bit;
    willQoS: uint2;
    willRetain: bit;
    passwordFlag: bit;
    usernameFlag: bit;
};

type VariableByteInteger = unit {
    value: uint32;
};

type UTF8EncodedString = unit {
    length: uint16;
    value: bytes &size=length;
};

type Property = unit {
    identifier: uint8;
    value: bytes &eod;
};

type Properties = unit {
    properties: Property[];
};

type ConnectVariableHeader = unit {
    protocolName: UTF8EncodedString;
    protocolLevel: uint8;
    connectFlags: ConnectFlags;
    keepAlive: uint16;
    properties: Properties;
};

type ConnectPayload = unit {
    clientIdentifier: UTF8EncodedString;
    willProperties: Properties &requires=self.connectFlags.willFlag;
    willTopic: UTF8EncodedString &requires=self.connectFlags.willFlag;
    willPayload: bytes &size=self.willPayloadLength &requires=self.connectFlags.willFlag;
    username: UTF8EncodedString &requires=self.connectFlags.usernameFlag;
    password: UTF8EncodedString &requires=self.connectFlags.passwordFlag;
    willPayloadLength: uint16 &requires=self.connectFlags.willFlag;
};

type ConnectPacket = unit {
    fixedHeader: FixedHeader;
    variableHeader: ConnectVariableHeader;
    payload: ConnectPayload;
};

type PublishVariableHeader = unit {
    topicName: UTF8EncodedString;
    packetIdentifier: uint16 &requires=(self.fixedHeader.flags & 0x06) != 0;
    properties: Properties;
};

type PublishPacket = unit {
    fixedHeader: FixedHeader;
    variableHeader: PublishVariableHeader;
    payload: bytes &size=self.fixedHeader.remainingLength - (|self.variableHeader| + |self.fixedHeader|);
};

type SubscribeTopic = unit {
    topicFilter: UTF8EncodedString;
    options: uint8;
};

type SubscribeVariableHeader = unit {
    packetIdentifier: uint16;
    properties: Properties;
};

type SubscribePacket = unit {
    fixedHeader: FixedHeader;
    variableHeader: SubscribeVariableHeader;
    topics: SubscribeTopic[];
};

type SubAckPacket = unit {
    fixedHeader: FixedHeader;
    packetIdentifier: uint16;
    properties: Properties;
    returnCodes: uint8[];
};

type PingReqPacket = unit {
    fixedHeader: FixedHeader;
};

type PingRespPacket = unit {
    fixedHeader: FixedHeader;
};

type DisconnectPacket = unit {
    fixedHeader: FixedHeader;
    properties: Properties;
};

public type MQTT_Packet = unit {
    packet: variant {
        connect: ConnectPacket &requires=($$.fixedHeader.packetType == 1),
        publish: PublishPacket &requires=($$.fixedHeader.packetType == 3),
        subscribe: SubscribePacket &requires=($$.fixedHeader.packetType == 8),
        subAck: SubAckPacket &requires=($$.fixedHeader.packetType == 9),
        pingReq: PingReqPacket &requires=($$.fixedHeader.packetType == 12),
        pingResp: PingRespPacket &requires=($$.fixedHeader.packetType == 13),
        disconnect: DisconnectPacket &requires=($$.fixedHeader.packetType == 14),
    };
};