module TLS;

import spicy;

public type ClientHello = unit {
    handshake_type: uint8;
    length: uint24;
    legacy_version: uint16;
    random: bytes(32);
    
    legacy_session_id_length: uint8;
    legacy_session_id: bytes(legacy_session_id_length) &optional;
    
    cipher_suites_length: uint16;
    cipher_suites: vector<uint16>;
    
    compression_methods_length: uint8;
    compression_methods: vector<uint8>;
    
    extensions_length: uint16;
    extensions: Extensions;
};

type Extensions = unit {
    extensions: vector<Extension>;
};

type Extension = unit {
    type_: uint16;
    length: uint16;
    data: bytes(length) &optional;
};

type ServerNameExtension = unit {
    list_length: uint16;
    server_names: vector<ServerName>;
};

type ServerName = unit {
    name_type: uint8;
    name_length: uint16;
    name: bytes(name_length);
};

type SupportedVersionsExtension = unit {
    versions_length: uint8;
    versions: vector<uint16>;
};

type SignatureAlgorithmsExtension = unit {
    algorithms_length: uint16;
    algorithms: vector<uint16>;
};

type SupportedGroupsExtension = unit {
    groups_length: uint16;
    groups: vector<uint16>;
};

type KeyShareExtension = unit {
    client_shares_length: uint16;
    client_shares: vector<KeyShareEntry>;
};

type KeyShareEntry = unit {
    group: uint16;
    key_exchange_length: uint16;
    key_exchange: bytes(key_exchange_length);
};

type PSKExtension = unit {
    identities_length: uint16;
    identities: vector<PSKIdentity>;
    binders_length: uint16;
    binders: vector<bytes>;
};

type PSKIdentity = unit {
    identity_length: uint16;
    identity: bytes(identity_length);
    obfuscated_ticket_age: uint32;
};

type PSKModesExtension = unit {
    modes_length: uint8;
    modes: vector<uint8>;
};