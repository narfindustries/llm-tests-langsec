module TLS;

import spicy;

public type Version = unit {
    major: uint8;
    minor: uint8;
};

public type Random = unit {
    gmt_unix_time: uint32;
    random_bytes: bytes &size=28;
};

public type SessionID = unit {
    length: uint8;
    session_id: bytes &size=this.length;
};

public type CipherSuites = unit {
    length: uint16;
    cipher_suites: bytes &size=this.length;
};

public type CompressionMethods = unit {
    length: uint8;
    methods: bytes &size=this.length;
};

public type Extension = unit {
    extension_type: uint16;
    length: uint16;
    data: bytes &size=this.length;
};

public type Extensions = unit {
    length: uint16;
    extensions: Extension[] &until($input.length() == length);
};

public type ClientHello = unit {
    version: Version;
    random: Random;
    session_id: SessionID;
    cipher_suites: CipherSuites;
    compression_methods: CompressionMethods;
    extensions: Extensions &optional;
};

public type Handshake = unit {
    handshake_type: uint8;
    length: uint24;
    content: switch (this.handshake_type) {
        1 -> client_hello: ClientHello;
        default -> unknown: bytes &size=this.length;
    };
};

public type TLSRecord = unit {
    content_type: uint8;
    version: Version;
    length: uint16;
    content: switch (this.content_type) {
        22 -> handshake: Handshake;
        default -> unknown: bytes &size=this.length;
    };
};

public type TLSRecords = unit {
    records: TLSRecord[] &eod;
};

event zeek_init() &priority=5
{
    print "Zeek module for parsing TLS protocol loaded.";
}

event zeek_done() &priority=5
{
    print "Zeek module for parsing TLS protocol unloaded.";
}