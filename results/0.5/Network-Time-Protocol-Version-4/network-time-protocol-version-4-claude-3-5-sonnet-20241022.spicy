module NTP;

import spicy;

public type NTPPacket = unit {
    header: bitfield(8) {
        li: 0..1;     # Leap Indicator
        vn: 2..4;     # Version Number
        mode: 5..7;   # Mode
    };
    stratum: uint8;            # Stratum
    poll: int8;                # Poll Interval
    precision: int8;           # Precision
    root_delay: int32;         # Root Delay (fixed-point)
    root_dispersion: uint32;   # Root Dispersion (fixed-point)
    reference_id: bytes &size=4;    # Reference ID
    reference_ts: NTPTimestamp;  # Reference Timestamp
    origin_ts: NTPTimestamp;     # Origin Timestamp
    receive_ts: NTPTimestamp;    # Receive Timestamp
    transmit_ts: NTPTimestamp;   # Transmit Timestamp

    extensions: ExtensionField[];
};

type NTPTimestamp = unit {
    seconds: uint32;     # Seconds since January 1, 1900
    fraction: uint32;    # Fractional seconds
};

type ExtensionField = unit {
    field_type: uint16;        # Extension field type
    length: uint16;      # Extension field length
    value: bytes &size=self.length - 4;  # Extension field value
    padding: bytes &size=(4 - (self.length % 4)) if self.length % 4 != 0;
};

type MAC = unit {
    key_id: uint32;      # Key ID
    digest: bytes &size=20;  # Message Digest (SHA-1 = 20 bytes)
};

on NTPPacket::header.li {
    switch ( self.header.li ) {
        0 -> print "no warning";
        1 -> print "last minute has 61 seconds";
        2 -> print "last minute has 59 seconds";
        3 -> print "alarm condition";
    }
}

on NTPPacket::header.mode {
    switch ( self.header.mode ) {
        0 -> print "reserved";
        1 -> print "symmetric active";
        2 -> print "symmetric passive";
        3 -> print "client";
        4 -> print "server";
        5 -> print "broadcast";
        6 -> print "control";
        7 -> print "private";
    }
}