module SQLite3;

type SQLite3Header = unit {
    header_string: bytes &size=16 &check=($$ == "SQLite format 3\000");
    page_size: uint16;
    write_version: uint8;
    read_version: uint8;
    reserved_space: uint8;
    max_embedded_payload_frac: uint8;
    min_embedded_payload_frac: uint8;
    leaf_payload_frac: uint8;
    file_change_counter: uint32;
    database_size: uint32;
    first_freelist_page: uint32;
    freelist_page_count: uint32;
    schema_cookie: uint32;
    schema_format_number: uint32;
    page_cache_size: uint32;
    largest_root_btree_page: uint32;
    text_encoding: uint32;
    user_version: uint32;
    incremental_vacuum_mode: uint32;
    application_id: uint32;
    reserved_for_expansion: bytes &size=20;
    version_valid_for: uint32;
    sqlite_version_number: uint32;
};

type BTreePageHeader = unit {
    page_type: uint8;
    first_freeblock_offset: uint16;
    number_of_cells: uint16;
    start_of_cell_content_area: uint16;
    fragmented_free_bytes: uint8;
};

type FreelistPage = unit {
    next_freelist_page: uint32;
    number_of_free_blocks: uint32;
};

type OverflowPage = unit {
    next_overflow_page: uint32;
};

type Cell = unit {
    payload_size: uint64; // Placeholder for varint
    row_id: uint64;      // Placeholder for varint
    left_child_pointer: uint32;
    key: uint64;         // Placeholder for varint
};

type SQLite3Page = unit {
    header: BTreePageHeader;
    cells: array of Cell &until=eod();
} &depends_on=(header.page_type in {0x02, 0x05, 0x0A, 0x0D});

type SQLite3File = unit {
    header: SQLite3Header;
    pages: array of SQLite3Page &until=eod();
};