module SQLite;

import spicy;

type Header = unit {
    magic: bytes &size=16;
    pageSize: uint16;
    writeVersion: uint8;
    readVersion: uint8;
    reservedSpace: uint8;
    maxPayloadFrac: uint8;
    minPayloadFrac: uint8;
    leafPayloadFrac: uint8;
    fileChangeCounter: uint32;
    numPages: uint32;
    firstFreelistPage: uint32;
    numFreelistPages: uint32;
    schemaCookie: uint32;
    schemaFormat: uint32;
    defaultCacheSize: uint32;
    largestBTreePage: uint32;
    textEncoding: uint32;
    userVersion: uint32;
    incrementalVacuumMode: uint32;
    applicationId: uint32;
    versionValidFor: uint32;
    sqliteVersion: uint32;
    reserved: bytes &size=20;
};

type CellPointer = unit {
    offset: uint16;
};

type Cell = unit {
    leftChildPage: uint32;
    payloadSize: uint32;
    rowId: uint32;
};

type BTreePage = unit {
    pageType: uint8;
    firstFreeblock: uint16;
    numCells: uint16;
    cellContentOffset: uint16;
    numFragmentedFreeBytes: uint8;
    rightMostPointer: uint32;
    cellPointers: CellPointer[] &size=numCells;
    cells: Cell[] &size=numCells;
};

type FreelistPage = unit {
    nextFreelistPage: uint32;
    numLeafPages: uint32;
    leafPages: uint32[] &size=numLeafPages;
};

type SQLiteDB = unit {
    header: Header;
    pages: BTreePage[] &size=(header.numPages - 1);
    freelistPages: FreelistPage[] &size=header.numFreelistPages;
};

public type File = SQLiteDB;