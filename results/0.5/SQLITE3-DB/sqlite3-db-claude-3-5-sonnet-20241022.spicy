module SQLite3;

public type Header = unit {
    magic: bytes &size=16;
    page_size: uint16;
    file_format_write_version: uint8;
    file_format_read_version: uint8;
    reserved_space: uint8;
    max_payload_fraction: uint8;
    min_payload_fraction: uint8;
    leaf_payload_fraction: uint8;
    file_change_counter: uint32;
    db_size_pages: uint32;
    first_freelist_trunk_page: uint32;
    total_freelist_pages: uint32;
    schema_cookie: uint32;
    schema_format: uint32;
    default_page_cache_size: uint32;
    largest_root_btree_page: uint32;
    text_encoding: uint32;
    user_version: uint32;
    vacuum_mode: uint32;
    application_id: uint32;
    reserved: bytes &size=20;
    version_valid_for: uint32;
    sqlite_version: uint32;
};

type BTreePageHeader = unit {
    page_type: uint8;
    first_freeblock: uint16;
    cell_count: uint16;
    cell_content_offset: uint16;
    fragmented_free_bytes: uint8;
    rightmost_pointer: uint32 if (self.page_type == 0x02 || self.page_type == 0x05);
};

type Varint = unit {
    var value: uint64;
    
    byte: uint8[] &until($$ < 0x80) {
        self.value = 0;
        for ( i in byte ) {
            self.value = (self.value << 7) | (i & 0x7F);
        }
    }
};

type TableLeafCell = unit {
    payload_length: Varint;
    row_id: Varint;
    payload_header_length: Varint;
    payload_header: bytes &size=self.payload_header_length.value;
    payload: bytes &size=self.payload_length.value;
};

type TableInteriorCell = unit {
    left_child_page: uint32;
    row_id: Varint;
};

type IndexLeafCell = unit {
    payload_length: Varint;
    payload: bytes &size=self.payload_length.value;
};

type IndexInteriorCell = unit {
    left_child_page: uint32;
    payload_length: Varint;
    payload: bytes &size=self.payload_length.value;
};

type Page = unit {
    header: BTreePageHeader;
    cells: bytes &eod;
};

public type Database = unit {
    header: Header;
    pages: Page[] &eod;
};