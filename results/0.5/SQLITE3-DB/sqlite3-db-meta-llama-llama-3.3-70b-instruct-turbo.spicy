module SQLITE3_DB;

type SQLiteDB = struct {
  magic: bytestring = "SQLite format 3",
  page_size: uint16,
  file_format_write_version: uint8,
  file_format_read_version: uint8,
  reserved_space: uint8,
  max_embedded_payload_fraction: uint8,
  min_embedded_payload_fraction: uint8,
  leaf_payload_fraction: uint8,
  file_change_counter: uint32,
  size_in_pages: uint32,
  first_freelist_trunk_page: uint32,
  number_of_freelist_pages: uint32,
  schema_cookie: uint32,
  schema_format_number: uint32,
  default_page_cache_size: uint32,
  largest_root_btree_page: uint32,
  text_encoding: uint32,
  user_version: uint32,
  incremental_vacuum_mode: uint32,
  application_id: uint32,
  reserved_for_expansion: bytestring
}

type PageHeader = struct {
  page_type: uint8,
  first_freeblock: uint16,
  cell_content_area: uint16,
  number_of_cells: uint16,
  start_of_content_area: uint16,
  fragmented_free_bytes: uint8
}

type Cell = struct {
  payload_length: uint32,
  header_length: uint32,
  payload_type: uint8,
  rowid: uint64,
  column_data: bytestring
}

type BTreeNode = struct {
  page_type: uint8,
  left_child_page: uint32,
  right_child_page: uint32,
  number_of_keys: uint16,
  key: bytestring,
  child_page: uint32
}

type FreelistTrunkPage = struct {
  page_type: uint8,
  number_of_free_pages: uint32,
  first_free_page: uint32,
  next_freelist_trunk_page: uint32
}

type WalIndexHeader = struct {
  page_type: uint8,
  wal_index_size: uint32,
  checksum: uint32,
  salt1: uint32,
  salt2: uint32
}

type MasterJournalHeader = struct {
  page_type: uint8,
  journal_size: uint32,
  checksum: uint32,
  salt1: uint32,
  salt2: uint32
}

type BackupJournalHeader = struct {
  page_type: uint8,
  journal_size: uint32,
  checksum: uint32,
  salt1: uint32,
  salt2: uint32
}

type SQLitePage = struct {
  header: PageHeader,
  data: bytestring
}

type SQLiteDBFile = struct {
  db: SQLiteDB,
  pages: bytestring
}

let sqlite_db_p = SQLiteDBFile;