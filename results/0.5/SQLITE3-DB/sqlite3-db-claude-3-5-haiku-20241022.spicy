module SQLite3;

import spicy;

public type FileHeader = struct {
    magic: bytes &size=16 &validate=($$ == b"SQLite format 3\0");
    page_size: uint16 &validate=($$ >= 512 && $$ <= 65536);
    write_version: uint8 &validate=($$ == 1 || $$ == 2);
    read_version: uint8 &validate=($$ == 1 || $$ == 2);
    unused: uint8;
    max_embedded_payload_fraction: uint8 = 64;
    min_embedded_payload_fraction: uint8 = 32;
    leaf_payload_fraction: uint8 = 32;
    file_change_counter: uint32;
    database_size_pages: uint32;
    first_freelist_page: uint32;
    total_freelist_pages: uint32;
    schema_cookie: uint32;
    schema_format: uint32 &validate=($$ >= 1 && $$ <= 4);
    default_encoding: uint32 &validate=($$ >= 1 && $$ <= 3);
    user_version: uint32;
    incremental_vacuum_mode: uint32;
    application_id: uint32;
    reserved_space: bytes &size=20;
};

public type PageHeader = struct {
    page_type: uint8 &validate=($$ == 2 || $$ == 5 || $$ == 10 || $$ == 13);
    first_freeblock: uint16;
    cell_count: uint16;
    cell_content_start: uint16;
    fragmented_free_bytes: uint8;
};

public type SerialType = enum {
    NULL,
    INT1,
    INT2,
    INT3,
    INT4,
    INT6,
    INT8,
    FLOAT,
    ZERO,
    ONE,
    RESERVED1,
    RESERVED2
};

public type Record = struct {
    header_length: varint;
    serial_types: vector<SerialType>;
    values: vector<bytes>;
};

public type SQLite3Database = struct {
    header: FileHeader;
    pages: vector<PageHeader>;
    records: vector<Record>;
};

public type Parser = parser {
    root: SQLite3Database;
    
    parse: SQLite3Database := {
        var db = new SQLite3Database();
        db.header = parse_file_header(input);
        return db;
    }
}

public function parse_file_header(data: bytes): FileHeader {
    return new FileHeader(data);
}