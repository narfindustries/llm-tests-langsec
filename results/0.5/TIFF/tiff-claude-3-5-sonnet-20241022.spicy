module TIFF;

type DataType = enum {
    BYTE = 1,
    ASCII = 2,
    SHORT = 3,
    LONG = 4,
    RATIONAL = 5,
    SBYTE = 6,
    UNDEFINED = 7,
    SSHORT = 8,
    SLONG = 9,
    SRATIONAL = 10,
    FLOAT = 11,
    DOUBLE = 12
};

type TagType = enum {
    NewSubfileType = 254,
    SubfileType = 255,
    ImageWidth = 256,
    ImageLength = 257,
    BitsPerSample = 258,
    Compression = 259,
    PhotometricInterpretation = 262,
    DocumentName = 269,
    ImageDescription = 270,
    Make = 271,
    Model = 272,
    StripOffsets = 273,
    Orientation = 274,
    SamplesPerPixel = 277,
    RowsPerStrip = 278,
    StripByteCounts = 279,
    XResolution = 282,
    YResolution = 283,
    PlanarConfiguration = 284,
    Software = 305,
    DateTime = 306,
    Artist = 315,
    HostComputer = 316,
    Predictor = 317,
    ColorMap = 320,
    TileWidth = 322,
    TileLength = 323,
    TileOffsets = 324,
    TileByteCounts = 325,
    ExtraSamples = 338,
    JPEGTables = 347,
    ResolutionUnit = 296
};

type CompressionType = enum {
    NONE = 1,
    CCITT_Group3_1D = 2,
    CCITT_Group3_Fax = 3,
    CCITT_Group4_Fax = 4,
    LZW = 5,
    JPEG_Old = 6,
    PackBits = 32773
};

type PhotometricType = enum {
    WhiteIsZero = 0,
    BlackIsZero = 1,
    RGB = 2,
    PaletteColor = 3,
    TransparencyMask = 4,
    YCbCr = 6
};

type OrientationType = enum {
    TopLeft = 1,
    TopRight = 2,
    BottomRight = 3,
    BottomLeft = 4,
    LeftTop = 5,
    RightTop = 6,
    RightBottom = 7,
    LeftBottom = 8
};

type PlanarConfigurationType = enum {
    Chunky = 1,
    Planar = 2
};

type ResolutionUnitType = enum {
    NoUnit = 1,
    Inch = 2,
    Centimeter = 3
};

type ExtraSamplesType = enum {
    Unspecified = 0,
    AssociatedAlpha = 1,
    UnassociatedAlpha = 2
};

type PredictorType = enum {
    NoPrediction = 1,
    HorizontalDifferencing = 2
};

public type Header = unit {
    byte_order: bytes &size=2;
    version: uint16;
    first_ifd_offset: uint32;
};

type IFDEntry = unit {
    tag: uint16;
    data_type: uint16;
    count: uint32;
    value_offset: uint32;
};

type IFD = unit {
    num_entries: uint16;
    entries: IFDEntry[self.num_entries];
    next_ifd_offset: uint32;
};

public type TIFF = unit {
    header: Header;
    ifd: IFD;
};