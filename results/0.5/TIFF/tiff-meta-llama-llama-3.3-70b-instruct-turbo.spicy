module TIFF;

type byte_order = uint16;
type magic = uint16;
type ifd_offset = uint32;

type tiff_header = struct {
  byte_order: byte_order;
  magic: magic;
  ifd_offset: ifd_offset;
};

type tag = uint16;
type type = uint16;
type count = uint32;
type value = uint32;

type ifd_entry = struct {
  tag: tag;
  type: type;
  count: count;
  value: value;
};

type num_entries = uint16;
type next_ifd_offset = uint32;

type ifd = struct {
  num_entries: num_entries;
  entries: array(ifd_entry, num_entries);
  next_ifd_offset: next_ifd_offset;
};

type image_data = bytes;

type tiff = struct {
  header: tiff_header;
  ifd: ifd;
  image_data: image_data;
};

type field_image_width = struct {
  tag: tag = 0x0100;
  type: type = 0x0003;
  count: count;
  value: count;
};

type field_image_length = struct {
  tag: tag = 0x0101;
  type: type = 0x0003;
  count: count;
  value: count;
};

type field_bits_per_sample = struct {
  tag: tag = 0x0102;
  type: type = 0x0003;
  count: count;
  value: count;
};

type field_compression = struct {
  tag: tag = 0x0103;
  type: type = 0x0003;
  count: count;
  value: count;
};

type field_photometric_interpretation = struct {
  tag: tag = 0x0106;
  type: type = 0x0003;
  count: count;
  value: count;
};

type field_orientation = struct {
  tag: tag = 0x010E;
  type: type = 0x0003;
  count: count;
  value: count;
};

type field_samples_per_pixel = struct {
  tag: tag = 0x010F;
  type: type = 0x0003;
  count: count;
  value: count;
};

type field_planar_configuration = struct {
  tag: tag = 0x011C;
  type: type = 0x0003;
  count: count;
  value: count;
};

type field_ycbcr_sub_sampling = struct {
  tag: tag = 0x0212;
  type: type = 0x0003;
  count: count;
  value: count;
};

type field_ycbcr_positioning = struct {
  tag: tag = 0x0213;
  type: type = 0x0003;
  count: count;
  value: count;
};

type numerator = uint32;
type denominator = uint32;

type rational = struct {
  numerator: numerator;
  denominator: denominator;
};

type field_x_resolution = struct {
  tag: tag = 0x011A;
  type: type = 0x0005;
  count: count;
  value: rational;
};

type field_y_resolution = struct {
  tag: tag = 0x011B;
  type: type = 0x0005;
  count: count;
  value: rational;
};

type field_resolution_unit = struct {
  tag: tag = 0x0128;
  type: type = 0x0003;
  count: count;
  value: count;
};

type field_date_time = struct {
  tag: tag = 0x0132;
  type: type = 0x0002;
  count: count;
  value: bytes;
};

type field_artist = struct {
  tag: tag = 0x013B;
  type: type = 0x0002;
  count: count;
  value: bytes;
};

type field_image_description = struct {
  tag: tag = 0x010E;
  type: type = 0x0002;
  count: count;
  value: bytes;
};

type field_make = struct {
  tag: tag = 0x010E;
  type: type = 0x0002;
  count: count;
  value: bytes;
};

type field_model = struct {
  tag: tag = 0x010E;
  type: type = 0x0002;
  count: count;
  value: bytes;
};

type field_software = struct {
  tag: tag = 0x0131;
  type: type = 0x0002;
  count: count;
  value: bytes;
};

type field_copyright = struct {
  tag: tag = 0x8298;
  type: type = 0x0002;
  count: count;
  value: bytes;
};

let tiff_file = file("tiff_file.tiff");
let tiff_data = read_file(tiff_file);
let tiff_parsed = TIFF::tiff(tiff_data);