module Modbus;

type ModbusPDU {
    uint8 address;
    uint8 function_code;
    optional uint8 exception_code;
    bytes data;
    uint16 crc;
};

type ModbusReadCoilsRequest {
    uint16 starting_address;
    uint16 quantity;
};

type ModbusReadCoilsResponse {
    bytes coil_status;
};

type ModbusReadDiscreteInputsRequest {
    uint16 starting_address;
    uint16 quantity;
};

type ModbusReadDiscreteInputsResponse {
    bytes discrete_input_status;
};

type ModbusReadHoldingRegistersRequest {
    uint16 starting_address;
    uint16 quantity;
};

type ModbusReadHoldingRegistersResponse {
    uint16 holding_registers[quantity];
};

type ModbusReadInputRegistersRequest {
    uint16 starting_address;
    uint16 quantity;
};

type ModbusReadInputRegistersResponse {
    uint16 input_registers[quantity];
};

type ModbusWriteSingleCoilRequest {
    uint16 output_address;
    uint16 output_value; // 0xFF00 or 0x0000
};

type ModbusWriteSingleCoilResponse {
    uint16 output_address;
    uint16 output_value; // 0xFF00 or 0x0000
};

type ModbusWriteSingleRegisterRequest {
    uint16 register_address;
    uint16 register_value;
};

type ModbusWriteSingleRegisterResponse {
    uint16 register_address;
    uint16 register_value;
};

type ModbusWriteMultipleCoilsRequest {
    uint16 starting_address;
    uint16 quantity;
    uint8 byte_count;
    bytes coil_status;
};

type ModbusWriteMultipleCoilsResponse {
    uint16 starting_address;
    uint16 quantity;
};

type ModbusWriteMultipleRegistersRequest {
    uint16 starting_address;
    uint16 quantity;
    uint8 byte_count;
    bytes register_values;
};

type ModbusWriteMultipleRegistersResponse {
    uint16 starting_address;
    uint16 quantity;
};

type ModbusReadWriteMultipleRegistersRequest {
    uint16 read_starting_address;
    uint16 read_quantity;
    uint16 write_starting_address;
    uint16 write_quantity;
    uint8 write_byte_count;
    bytes write_register_values;
};

type ModbusReadWriteMultipleRegistersResponse {
    uint16 read_register_values[read_quantity];
};

event modbus_event(ModbusPDU pdu) {
    if (pdu.function_code == 0x01) {
        local ModbusReadCoilsRequest req = pdu.data;
        # ... process read coils request ...
    } else if (pdu.function_code == 0x03) {
        local ModbusReadHoldingRegistersRequest req = pdu.data;
        # ... process read holding registers request ...
    }
    # ... handle other function codes ...
}
