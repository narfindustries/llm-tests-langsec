module Modbus;

public type MBAP = unit {
    transaction_id: uint16;
    protocol_id: uint16;
    length: uint16;
    unit_id: uint8;
};

type FunctionCode = enum {
    READ_COILS = 1,
    READ_DISCRETE_INPUTS = 2,
    READ_HOLDING_REGISTERS = 3,
    READ_INPUT_REGISTERS = 4,
    WRITE_SINGLE_COIL = 5,
    WRITE_SINGLE_REGISTER = 6,
    WRITE_MULTIPLE_COILS = 15,
    WRITE_MULTIPLE_REGISTERS = 16,
    READ_FILE_RECORD = 20,
    WRITE_FILE_RECORD = 21,
    MASK_WRITE_REGISTER = 22,
    READ_WRITE_MULTIPLE_REGISTERS = 23,
    READ_FIFO_QUEUE = 24
};

type ExceptionCode = enum {
    ILLEGAL_FUNCTION = 1,
    ILLEGAL_DATA_ADDRESS = 2,
    ILLEGAL_DATA_VALUE = 3,
    SERVER_DEVICE_FAILURE = 4,
    ACKNOWLEDGE = 5,
    SERVER_DEVICE_BUSY = 6,
    MEMORY_PARITY_ERROR = 8,
    GATEWAY_PATH_UNAVAILABLE = 10,
    GATEWAY_TARGET_DEVICE_FAILED = 11
};

public type PDU = unit {
    function_code: uint8;
    
    switch (function_code) {
        1, 2 -> read_coils_request: ReadCoilsRequest if ((function_code & 0x80) == 0);
        1, 2 -> read_coils_response: ReadCoilsResponse if ((function_code & 0x80) == 0);
        3, 4 -> read_registers_request: ReadRegistersRequest if ((function_code & 0x80) == 0);
        3, 4 -> read_registers_response: ReadRegistersResponse if ((function_code & 0x80) == 0);
        5 -> write_single_coil: WriteSingleCoil if ((function_code & 0x80) == 0);
        6 -> write_single_register: WriteSingleRegister if ((function_code & 0x80) == 0);
        15 -> write_multiple_coils_request: WriteMultipleCoilsRequest if ((function_code & 0x80) == 0);
        15 -> write_multiple_coils_response: WriteMultipleCoilsResponse if ((function_code & 0x80) == 0);
        16 -> write_multiple_registers_request: WriteMultipleRegistersRequest if ((function_code & 0x80) == 0);
        16 -> write_multiple_registers_response: WriteMultipleRegistersResponse if ((function_code & 0x80) == 0);
        22 -> mask_write_register: MaskWriteRegister if ((function_code & 0x80) == 0);
        23 -> read_write_multiple_registers_request: ReadWriteMultipleRegistersRequest if ((function_code & 0x80) == 0);
        23 -> read_write_multiple_registers_response: ReadWriteMultipleRegistersResponse if ((function_code & 0x80) == 0);
        24 -> read_fifo_queue_request: ReadFIFOQueueRequest if ((function_code & 0x80) == 0);
        24 -> read_fifo_queue_response: ReadFIFOQueueResponse if ((function_code & 0x80) == 0);
        * -> error: ExceptionResponse if ((function_code & 0x80) != 0);
    };
};

type ReadCoilsRequest = unit {
    starting_address: uint16;
    quantity: uint16;
};

type ReadCoilsResponse = unit {
    byte_count: uint8;
    coil_status: bytes &size=byte_count;
};

type ReadRegistersRequest = unit {
    starting_address: uint16;
    quantity: uint16;
};

type ReadRegistersResponse = unit {
    byte_count: uint8;
    register_values: bytes &size=byte_count;
};

type WriteSingleCoil = unit {
    output_address: uint16;
    output_value: uint16;
};

type WriteSingleRegister = unit {
    register_address: uint16;
    register_value: uint16;
};

type WriteMultipleCoilsRequest = unit {
    starting_address: uint16;
    quantity: uint16;
    byte_count: uint8;
    outputs_value: bytes &size=byte_count;
};

type WriteMultipleCoilsResponse = unit {
    starting_address: uint16;
    quantity: uint16;
};

type WriteMultipleRegistersRequest = unit {
    starting_address: uint16;
    quantity: uint16;
    byte_count: uint8;
    registers_value: bytes &size=byte_count;
};

type WriteMultipleRegistersResponse = unit {
    starting_address: uint16;
    quantity: uint16;
};

type MaskWriteRegister = unit {
    reference_address: uint16;
    and_mask: uint16;
    or_mask: uint16;
};

type ReadWriteMultipleRegistersRequest = unit {
    read_starting_address: uint16;
    quantity_to_read: uint16;
    write_starting_address: uint16;
    quantity_to_write: uint16;
    write_byte_count: uint8;
    write_registers_value: bytes &size=write_byte_count;
};

type ReadWriteMultipleRegistersResponse = unit {
    byte_count: uint8;
    read_registers_value: bytes &size=byte_count;
};

type ReadFIFOQueueRequest = unit {
    fifo_pointer_address: uint16;
};

type ReadFIFOQueueResponse = unit {
    byte_count: uint16;
    fifo_count: uint16;
    fifo_value_register: bytes &size=(byte_count - 2);
};

type ExceptionResponse = unit {
    exception_code: uint8;
};

public type Message = unit {
    mbap: MBAP;
    pdu: PDU;
};