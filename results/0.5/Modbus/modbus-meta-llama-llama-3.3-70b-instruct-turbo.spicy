module Modbus;

type Address = uint8;
type FunctionCode = uint8;
type SubFunction = uint8;
type DataValue = uint16;
type CoilStatus = uint16;
type InputStatus = uint16;
type RegisterValue = uint16;

type ModbusMessage = record {
  address: Address;
  function_code: FunctionCode;
  data: DataField;
}

type DataField = record {
  sub_function: SubFunction;
  data_values: DataValues;
}

type DataValues = record {
  values: vector[DataValue];
}

type ReadCoilStatus = record {
  starting_address: uint16;
  quantity_of_coils: uint16;
}

type ReadInputStatus = record {
  starting_address: uint16;
  quantity_of_inputs: uint16;
}

type ReadHoldingRegisters = record {
  starting_address: uint16;
  quantity_of_registers: uint16;
}

type ReadInputRegisters = record {
  starting_address: uint16;
  quantity_of_registers: uint16;
}

type WriteSingleCoil = record {
  output_address: uint16;
  output_value: uint16;
}

type WriteSingleRegister = record {
  register_address: uint16;
  register_value: uint16;
}

type WriteMultipleCoils = record {
  starting_address: uint16;
  quantity_of_coils: uint16;
  coil_values: vector[uint16];
}

type WriteMultipleRegisters = record {
  starting_address: uint16;
  quantity_of_registers: uint16;
  register_values: vector[uint16];
}

type ReportSlaveID = record {
  slave_id: uint8;
  run_indicator_status: uint8;
}

type ReadFileRecord = record {
  file_number: uint16;
  record_number: uint16;
  record_length: uint16;
}

type WriteFileRecord = record {
  file_number: uint16;
  record_number: uint16;
  record_data: vector[uint16];
}

type MaskWriteRegister = record {
  register_address: uint16;
  and_mask: uint16;
  or_mask: uint16;
}

type ReadWriteMultipleRegisters = record {
  read_starting_address: uint16;
  quantity_of_registers_to_read: uint16;
  write_starting_address: uint16;
  quantity_of_registers_to_write: uint16;
  write_register_values: vector[uint16];
}

type ReadFIFOQueue = record {
  fifo_pointer_address: uint16;
}

type EncapsulatedInterfaceTransport = record {
  protocol_id: uint16;
  protocol_data: vector[uint8];
}

let modbus_message = ModbusMessage(
  address = 0x01,
  function_code = 0x01,
  data = DataField(
    sub_function = 0x01,
    data_values = DataValues(
      values = vector[uint16](0x0001)
    )
  )
);

let read_coil_status = ReadCoilStatus(
  starting_address = 0x0000,
  quantity_of_coils = 0x0001
);

let read_input_status = ReadInputStatus(
  starting_address = 0x0000,
  quantity_of_inputs = 0x0001
);

let read_holding_registers = ReadHoldingRegisters(
  starting_address = 0x0000,
  quantity_of_registers = 0x0001
);

let read_input_registers = ReadInputRegisters(
  starting_address = 0x0000,
  quantity_of_registers = 0x0001
);

let write_single_coil = WriteSingleCoil(
  output_address = 0x0000,
  output_value = 0x0001
);

let write_single_register = WriteSingleRegister(
  register_address = 0x0000,
  register_value = 0x0001
);

let write_multiple_coils = WriteMultipleCoils(
  starting_address = 0x0000,
  quantity_of_coils = 0x0001,
  coil_values = vector[uint16](0x0001)
);

let write_multiple_registers = WriteMultipleRegisters(
  starting_address = 0x0000,
  quantity_of_registers = 0x0001,
  register_values = vector[uint16](0x0001)
);

let report_slave_id = ReportSlaveID(
  slave_id = 0x01,
  run_indicator_status = 0x01
);

let read_file_record = ReadFileRecord(
  file_number = 0x0001,
  record_number = 0x0001,
  record_length = 0x0001
);

let write_file_record = WriteFileRecord(
  file_number = 0x0001,
  record_number = 0x0001,
  record_data = vector[uint16](0x0001)
);

let mask_write_register = MaskWriteRegister(
  register_address = 0x0000,
  and_mask = 0x0001,
  or_mask = 0x0001
);

let read_write_multiple_registers = ReadWriteMultipleRegisters(
  read_starting_address = 0x0000,
  quantity_of_registers_to_read = 0x0001,
  write_starting_address = 0x0000,
  quantity_of_registers_to_write = 0x0001,
  write_register_values = vector[uint16](0x0001)
);

let read_fifo_queue = ReadFIFOQueue(
  fifo_pointer_address = 0x0000
);

let encapsulated_interface_transport = EncapsulatedInterfaceTransport(
  protocol_id = 0x0001,
  protocol_data = vector[uint8](0x01)
);