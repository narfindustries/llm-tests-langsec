module BitcoinTransactions;

type Transaction = record {
  version = uint32le,
  tx_in_count = VarInt,
  tx_ins = array[tx_in_count] of TxIn,
  tx_out_count = VarInt,
  tx_outs = array[tx_out_count] of TxOut,
  lock_time = uint32le
}

type TxIn = record {
  prev_tx = bytestring[32],
  prev_index = uint32le,
  script_sig_len = VarInt,
  script_sig = bytestring[script_sig_len],
  sequence = uint32le
}

type TxOut = record {
  value = uint64le,
  script_pub_key_len = VarInt,
  script_pub_key = bytestring[script_pub_key_len]
}

type Block = record {
  block_header = BlockHeader,
  tx_count = VarInt,
  txs = array[tx_count] of Transaction
}

type BlockHeader = record {
  version = uint32le,
  prev_block = bytestring[32],
  merkle_root = bytestring[32],
  timestamp = uint32le,
  target = uint32le,
  nonce = uint32le
}

type VarInt = uint64le &length Do(
  if this <= 0xfd then 1
  else if this <= 0xffff then 3
  else if this <= 0xffffffff then 5
  else 9
)

type Script = record {
  op_code = uint8,
  data = bytestring[*]
} &op_code Do(
  switch this {
    case 0x00 => data = bytestring[0]
    case 0x4c => data = bytestring[1]
    case 0x4d => data = bytestring[2]
    case 0x4e => data = bytestring[3]
    case 0x4f => data = bytestring[4]
    case 0x81 => data = bytestring[1]
    case 0x82 => data = bytestring[2]
    case 0x83 => data = bytestring[3]
    case 0x84 => data = bytestring[4]
    case 0x85 => data = bytestring[5]
    case 0x86 => data = bytestring[6]
    case 0x87 => data = bytestring[7]
    case 0x88 => data = bytestring[8]
    case 0x89 => data = bytestring[9]
    case 0x8a => data = bytestring[10]
    case 0x8b => data = bytestring[11]
    case 0x8c => data = bytestring[12]
    case 0x8d => data = bytestring[13]
    case 0x8e => data = bytestring[14]
    case 0x8f => data = bytestring[15]
    case 0x90 => data = bytestring[16]
    case 0x91 => data = bytestring[17]
    case 0x92 => data = bytestring[18]
    case 0x93 => data = bytestring[19]
    case 0x94 => data = bytestring[20]
    case 0x95 => data = bytestring[21]
    case 0x96 => data = bytestring[22]
    case 0x97 => data = bytestring[23]
    case 0x98 => data = bytestring[24]
    case 0x99 => data = bytestring[25]
    case 0x9a => data = bytestring[26]
    case 0x9b => data = bytestring[27]
    case 0x9c => data = bytestring[28]
    case 0x9d => data = bytestring[29]
    case 0x9e => data = bytestring[30]
    case 0x9f => data = bytestring[31]
    default => data = bytestring[*]
  }
)

let bitcoin_transactions = Transaction