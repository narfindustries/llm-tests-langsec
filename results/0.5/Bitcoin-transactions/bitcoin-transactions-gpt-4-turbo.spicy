module Bitcoin;

public type VarInt = unit {
    value: uint64;
} &byteorder=big;

public type TxIn = unit {
    prev_output: TxOutRef;
    script_len: VarInt;
    script_sig: bytes &size=this.script_len.value;
    sequence: uint32;
} &byteorder=big;

public type TxOut = unit {
    value: uint64;
    script_len: VarInt;
    script_pub_key: bytes &size=this.script_len.value;
} &byteorder=big;

public type TxOutRef = unit {
    hash: bytes &size=32;
    index: uint32;
} &byteorder=big;

public type BitcoinTransaction = unit {
    version: int32;
    input_count: VarInt;
    inputs: TxIn[] &size=this.input_count.value;
    output_count: VarInt;
    outputs: TxOut[] &size=this.output_count.value;
    locktime: uint32;
} &byteorder=big;

public type BitcoinBlock = unit {
    magic: uint32;
    blocksize: uint32;
    version: int32;
    prev_block: bytes &size=32;
    merkle_root: bytes &size=32;
    timestamp: uint32;
    bits: uint32;
    nonce: uint32;
    tx_count: VarInt;
    transactions: BitcoinTransaction[] &size=this.tx_count.value;
} &byteorder=big;