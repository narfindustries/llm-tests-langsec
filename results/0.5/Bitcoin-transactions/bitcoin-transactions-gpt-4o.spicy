module BitcoinTransaction;

import spicy;

type VarInt = unit {
    len: uint8;
    value: uint64 {
        switch (self.len) {
            case 0xfd: return self.value3;
            case 0xfe: return self.value5;
            case 0xff: return self.value9;
            default: return self.value1;
        }
    }
    value1: uint8 { len < 0xfd };
    value3: uint16 { len == 0xfd };
    value5: uint32 { len == 0xfe };
    value9: uint64 { len == 0xff };
};

type Script = bytes &size = |self|;

type Input = unit {
    previous_transaction_hash: bytes &size = 32;
    output_index: uint32;
    script_length: VarInt;
    script_sig: Script &size = script_length.value;
    sequence_number: uint32;
};

type Output = unit {
    value: uint64;
    script_length: VarInt;
    script_pub_key: Script &size = script_length.value;
};

type BitcoinTransaction = unit {
    version: uint32;
    input_count: VarInt;
    inputs: Input[] &length = input_count.value;
    output_count: VarInt;
    outputs: Output[] &length = output_count.value;
    locktime: uint32;
};