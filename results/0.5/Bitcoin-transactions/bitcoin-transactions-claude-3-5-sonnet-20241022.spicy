module Bitcoin;

import spicy;

type VarInt = unit {
    first: uint8;
    switch ( self.first ) {
        0xfd -> value16: uint16;
        0xfe -> value32: uint32;
        0xff -> value64: uint64;
        *    -> : void { self.value = self.first; }
    };

    var value: uint64;
};

type ScriptSig = unit {
    length: VarInt;
    data: bytes &size=self.length.value;
};

type ScriptPubKey = unit {
    length: VarInt;
    data: bytes &size=self.length.value;
};

type TxInput = unit {
    prev_tx_hash: bytes &size=32;
    prev_tx_index: uint32;
    script_sig: ScriptSig;
    sequence: uint32;
};

type TxOutput = unit {
    amount: uint64;
    script_pubkey: ScriptPubKey;
};

type WitnessData = unit {
    item_count: VarInt;
    items: bytes &size=self.item_count.value;
};

type Transaction = unit {
    version: int32;
    
    marker: uint8 &try;
    on marker {
        if ( self.marker == 0x00 ) 
            self.is_segwit = True;
        else
            self.is_segwit = False;
    }

    flag: uint8 if (self.is_segwit);
    on flag {
        if ( self.is_segwit && self.flag != 0x01 )
            self.is_segwit = False;
    }

    input_count: VarInt;
    inputs: TxInput[self.input_count.value];
    output_count: VarInt;
    outputs: TxOutput[self.output_count.value];
    
    witnesses: WitnessData[self.input_count.value] if (self.is_segwit);
    
    locktime: uint32;

    var is_segwit: bool;
};

public type BitcoinBlock = unit {
    magic: bytes &size=4;
    block_size: uint32;
    block_header: bytes &size=80;
    tx_count: VarInt;
    transactions: Transaction[self.tx_count.value];
};