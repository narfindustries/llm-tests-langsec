module NITF;

import spicy;

public type Header = unit {
    magic: bytes &size=4;
    version: uint8;
    security: bytes &size=3;
    system: bytes &size=10;
    origin: bytes &size=10;
    date: bytes &size=14;
    title: bytes &size=80;
    classification: bytes &size=1;
    declass: bytes &size=2;
    downgrade: bytes &size=2;
    declass_date: bytes &size=8;
    downgrade_date: bytes &size=8;
    country: bytes &size=2;
    release: bytes &size=2;
    originator: bytes &size=10;
    control: bytes &size=2;
    copy: bytes &size=5;
    origin_control: bytes &size=2;
    copy_control: bytes &size=2;
    image_segments: uint16;
    reserved: bytes &size=2;
    length: uint32;
};

public type ImageSegment = unit {
    subheader: bytes &size=4;
    data: bytes &size=length;
};

public type NITF = unit {
    header: Header;
    image_segments: ImageSegment[header.image_segments];
};

on NITF::header %{
    print "NITF Header:";
    print fmt("Magic: %s", self.magic);
    print fmt("Version: %d", self.version);
    print fmt("Security: %s", self.security);
    print fmt("System: %s", self.system);
    print fmt("Origin: %s", self.origin);
    print fmt("Date: %s", self.date);
    print fmt("Title: %s", self.title);
    print fmt("Classification: %s", self.classification);
    print fmt("Declass: %s", self.declass);
    print fmt("Downgrade: %s", self.downgrade);
    print fmt("Declass Date: %s", self.declass_date);
    print fmt("Downgrade Date: %s", self.downgrade_date);
    print fmt("Country: %s", self.country);
    print fmt("Release: %s", self.release);
    print fmt("Originator: %s", self.originator);
    print fmt("Control: %s", self.control);
    print fmt("Copy: %s", self.copy);
    print fmt("Origin Control: %s", self.origin_control);
    print fmt("Copy Control: %s", self.copy_control);
    print fmt("Image Segments: %d", self.image_segments);
    print fmt("Reserved: %s", self.reserved);
    print fmt("Length: %d", self.length);
%}

on NITF::image_segments[i] %{
    print fmt("Image Segment %d:", i);
    print fmt("Subheader: %s", self.subheader);
    print fmt("Data: %s", self.data);
%}