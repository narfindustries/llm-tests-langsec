module NITF;

type Header = unit {
    fhdr: bytes &size=4;
    fver: bytes &size=5;
    clevel: bytes &size=2;
    stype: bytes &size=4;
    ostaid: bytes &size=10;
    fdt: bytes &size=14;
    ftitle: bytes &size=80;
    fsclas: bytes &size=1;
    fsclsy: bytes &size=2;
    fscode: bytes &size=11;
    fsctlh: bytes &size=2;
    fsrel: bytes &size=20;
    fsdctp: bytes &size=2;
    fsdcdt: bytes &size=8;
    fsdcxm: bytes &size=4;
    fsdg: bytes &size=1;
    fsdgdt: bytes &size=8;
    fscltx: bytes &size=43;
    fscatp: bytes &size=1;
    fscaut: bytes &size=40;
    fscrsn: bytes &size=1;
    fssrdt: bytes &size=8;
    fsctln: bytes &size=15;
    fscop: bytes &size=5;
    fscpys: bytes &size=5;
    encryp: bytes &size=1;
    fbkgc: bytes &size=3;
    oname: bytes &size=24;
    ophone: bytes &size=18;
    fl: bytes &size=12;
    hl: bytes &size=6;
    numi: bytes &size=3 &convert=$$.to_uint();
    nums: bytes &size=3 &convert=$$.to_uint();
    numx: bytes &size=3 &convert=$$.to_uint();
    numt: bytes &size=3 &convert=$$.to_uint();
    numdes: bytes &size=3 &convert=$$.to_uint();
    numres: bytes &size=3 &convert=$$.to_uint();
    udhdl: bytes &size=5;
    udhofl: bytes &size=3;
    xhdl: bytes &size=5;

    var num_images: uint64;
    var num_graphics: uint64;
    var num_text: uint64;
    var num_data_ext: uint64;
    var num_res_ext: uint64;

    on %done {
        self.num_images = self.numi.to_uint();
        self.num_graphics = self.nums.to_uint();
        self.num_text = self.numt.to_uint();
        self.num_data_ext = self.numdes.to_uint();
        self.num_res_ext = self.numres.to_uint();
    }
};

type ImageSegment = unit {
    im: bytes &size=2;
    iid1: bytes &size=10;
    idatim: bytes &size=14;
    tgtid: bytes &size=17;
    iid2: bytes &size=80;
    isclas: bytes &size=1;
    isclsy: bytes &size=2;
    iscode: bytes &size=11;
    isctlh: bytes &size=2;
    isrel: bytes &size=20;
    isdctp: bytes &size=2;
    isdcdt: bytes &size=8;
    isdcxm: bytes &size=4;
    isdg: bytes &size=1;
    isdgdt: bytes &size=8;
    iscltx: bytes &size=43;
    iscatp: bytes &size=1;
    iscaut: bytes &size=40;
    iscrsn: bytes &size=1;
    issrdt: bytes &size=8;
    isctln: bytes &size=15;
    encryp: bytes &size=1;
    isorce: bytes &size=42;
    nrows: bytes &size=8;
    ncols: bytes &size=8;
    pvtype: bytes &size=3;
    irep: bytes &size=8;
    icat: bytes &size=8;
    abpp: bytes &size=2;
    pjust: bytes &size=1;
    icords: bytes &size=1;
    igeolo: bytes &size=60;
    nicom: bytes &size=1;
    ic: bytes &size=2;
    comrat: bytes &size=4;
    nbands: bytes &size=1;
    xbands: bytes &size=5;
};

type GraphicsSegment = unit {
    sy: bytes &size=2;
    sid: bytes &size=10;
    sname: bytes &size=20;
    ssclas: bytes &size=1;
    ssclsy: bytes &size=2;
    sscode: bytes &size=11;
    ssctlh: bytes &size=2;
    ssrel: bytes &size=20;
    ssdctp: bytes &size=2;
    ssdcdt: bytes &size=8;
    ssdcxm: bytes &size=4;
    ssdg: bytes &size=1;
    ssdgdt: bytes &size=8;
    sscltx: bytes &size=43;
    sscatp: bytes &size=1;
    sscaut: bytes &size=40;
    sscrsn: bytes &size=1;
    ssctln: bytes &size=15;
    encryp: bytes &size=1;
    sfmt: bytes &size=1;
    sstruct: bytes &size=13;
    sdlvl: bytes &size=3;
    salvl: bytes &size=3;
    sloc: bytes &size=10;
    sbnd1: bytes &size=10;
    scolor: bytes &size=1;
    sbnd2: bytes &size=10;
    sres2: bytes &size=20;
    sxshdl: bytes &size=5;
    sxsofl: bytes &size=3;
};

type TextSegment = unit {
    te: bytes &size=2;
    textid: bytes &size=7;
    txtalvl: bytes &size=3;
    txtdt: bytes &size=14;
    txtitl: bytes &size=80;
    tsclas: bytes &size=1;
    tsclsy: bytes &size=2;
    tscode: bytes &size=11;
    tsctlh: bytes &size=2;
    tsrel: bytes &size=20;
    tsdctp: bytes &size=2;
    tsdcdt: bytes &size=8;
    tsdcxm: bytes &size=4;
    tsdg: bytes &size=1;
    tsdgdt: bytes &size=8;
    tscltx: bytes &size=43;
    tscatp: bytes &size=1;
    tscaut: bytes &size=40;
    tscrsn: bytes &size=1;
    tsctln: bytes &size=15;
    encryp: bytes &size=1;
    txtfmt: bytes &size=3;
    txshdl: bytes &size=5;
    txsofl: bytes &size=3;
};

type DataExtensionSegment = unit {
    de: bytes &size=2;
    destag: bytes &size=25;
    desver: bytes &size=2;
    desclas: bytes &size=1;
    desclsy: bytes &size=2;
    descode: bytes &size=11;
    desctlh: bytes &size=2;
    desrel: bytes &size=20;
    desdctp: bytes &size=2;
    desdcdt: bytes &size=8;
    desdcxm: bytes &size=4;
    desdg: bytes &size=1;
    desdgdt: bytes &size=8;
    descltx: bytes &size=43;
    descatp: bytes &size=1;
    descaut: bytes &size=40;
    descrsn: bytes &size=1;
    dessrdt: bytes &size=8;
    desctln: bytes &size=15;
    desoflw: bytes &size=6;
    desitem: bytes &size=3;
    desshl: bytes &size=4;
};

type ReservedExtensionSegment = unit {
    re: bytes &size=2;
    resid: bytes &size=25;
    resver: bytes &size=2;
    resclas: bytes &size=1;
    resclsy: bytes &size=2;
    rescode: bytes &size=11;
    resctlh: bytes &size=2;
    resrel: bytes &size=20;
    resdctp: bytes &size=2;
    resdcdt: bytes &size=8;
    resdcxm: bytes &size=4;
    resdg: bytes &size=1;
    resdgdt: bytes &size=8;
    rescltx: bytes &size=43;
    rescatp: bytes &size=1;
    rescaut: bytes &size=40;
    rescrsn: bytes &size=1;
    ressrdt: bytes &size=8;
    resctln: bytes &size=15;
    resoflw: bytes &size=6;
    resitem: bytes &size=3;
    resshl: bytes &size=4;
};

type NITFFile = unit {
    header: Header;
    image_segments: ImageSegment[self.header.num_images];
    graphics_segments: GraphicsSegment[self.header.num_graphics];
    text_segments: TextSegment[self.header.num_text];
    data_extension_segments: DataExtensionSegment[self.header.num_data_ext];
    reserved_extension_segments: ReservedExtensionSegment[self.header.num_res_ext];
};