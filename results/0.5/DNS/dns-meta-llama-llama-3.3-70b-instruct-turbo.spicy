module DNS;

type uint4 = uint8;
type uint16_t = uint16;
type uint32_t = uint32;

type dns_header = record {
  id: uint16_t,
  qr: bool,
  opcode: uint8,
  aa: bool,
  tc: bool,
  rd: bool,
  ra: bool,
  z: uint8,
  rcode: uint8
};

type dns_name_label = bytestring &length=<64;
type dns_name = vector of dns_name_label;

type dns_question = record {
  qname: dns_name,
  qtype: uint16_t,
  qclass: uint16_t
};

type dns_rr = record {
  name: dns_name,
  type: uint16_t,
  class: uint16_t,
  ttl: uint32_t,
  rdlength: uint16_t,
  rdata: bytestring &length=rdlength
};

type dns_answer = dns_rr;
type dns_authority = dns_rr;
type dns_additional = dns_rr;

type dns_message = record {
  header: dns_header,
  questions: vector of dns_question,
  answers: vector of dns_answer,
  authorities: vector of dns_authority,
  additionals: vector of dns_additional
};

let dns_name_transcode = transcode {
  decode = function (b: bytestring): dns_name {
    var labels = vector of dns_name_label;
    var pos = 0;
    while pos < #b do
      var len = b[pos];
      pos += 1;
      if len == 0 then
        break;
      labels += b[pos:pos+len-1];
      pos += len;
    end;
    return labels;
  };

  encode = function (n: dns_name): bytestring {
    var b = vector of byte;
    for l in n do
      b += #l;
      b += l;
    end;
    b += 0;
    return bytestring_join(b);
  };
}; 

type uint3 = uint8;