module ELF;

type ELF = unit {
    header: ElfHeader;

    program_headers: array of ElfProgramHeader &length = header.e_phnum;

    section_headers: array of ElfSectionHeader &length = header.e_shnum;

    section_names: ElfStringTable &parse_from = section_headers[header.e_shstrndx].sh_offset &length = section_headers[header.e_shstrndx].sh_size;

    sections: array of ElfSection &length = header.e_shnum;
};

type ElfHeader = unit {
    e_ident: ElfIdent;
    e_type: uint16;
    e_machine: uint16;
    e_version: uint32;
    e_entry: uint32;
    e_phoff: uint32;
    e_shoff: uint32;
    e_flags: uint32;
    e_ehsize: uint16;
    e_phentsize: uint16;
    e_phnum: uint16;
    e_shentsize: uint16;
    e_shnum: uint16;
    e_shstrndx: uint16;
};

type ElfIdent = unit {
    magic: bytes &length = 4; // Should be 0x7F 'E' 'L' 'F'
    class: uint8;
    data: uint8;
    version: uint8;
    osabi: uint8;
    abiversion: uint8;
    pad: bytes &length = 7;
};

type ElfProgramHeader = unit {
    p_type: uint32;
    p_offset: uint32;
    p_vaddr: uint32;
    p_paddr: uint32;
    p_filesz: uint32;
    p_memsz: uint32;
    p_flags: uint32;
    p_align: uint32;
};

type ElfSectionHeader = unit {
    sh_name: uint32;
    sh_type: uint32;
    sh_flags: uint32;
    sh_addr: uint32;
    sh_offset: uint32;
    sh_size: uint32;
    sh_link: uint32;
    sh_info: uint32;
    sh_addralign: uint32;
    sh_entsize: uint32;
};

type ElfSection = unit {
    header: ElfSectionHeader;

    content: bytes &length = header.sh_size &parse_from = header.sh_offset;

    on (header.sh_type == 3) { // SHT_STRTAB
        strtab: ElfStringTable &parse_from = header.sh_offset &length = header.sh_size;
    }
};

type ElfStringTable = unit {
    strings: array of string &until = eos;
};