module ELF;

public type ELF = unit {
    magic: bytes &size=4 &requires=($$ == b"\x7fELF");
    ei_class: uint8 {
        if ( self.ei_class != 1 && self.ei_class != 2 )
            throw "invalid ELF class";
    }
    ei_data: uint8 {
        if ( self.ei_data != 1 && self.ei_data != 2 )
            throw "invalid data encoding";
    }
    ei_version: uint8;
    ei_osabi: uint8;
    ei_abiversion: uint8;
    ei_pad: bytes &size=7;
    e_type: uint16;
    e_machine: uint16;
    e_version: uint32;
    
    var is_64: bool;
    on ei_class {
        self.is_64 = (self.ei_class == 2);
    }

    header: ELF64 if (self.is_64) else ELF32;
};

type ELF32 = unit {
    e_entry: uint32;
    e_phoff: uint32;
    e_shoff: uint32;
    e_flags: uint32;
    e_ehsize: uint16;
    e_phentsize: uint16;
    e_phnum: uint16;
    e_shentsize: uint16;
    e_shnum: uint16;
    e_shstrndx: uint16;

    program_headers: ProgramHeader32[e_phnum];
    section_headers: SectionHeader32[e_shnum];
};

type ELF64 = unit {
    e_entry: uint64;
    e_phoff: uint64;
    e_shoff: uint64;
    e_flags: uint32;
    e_ehsize: uint16;
    e_phentsize: uint16;
    e_phnum: uint16;
    e_shentsize: uint16;
    e_shnum: uint16;
    e_shstrndx: uint16;

    program_headers: ProgramHeader64[e_phnum];
    section_headers: SectionHeader64[e_shnum];
};

type ProgramHeader32 = unit {
    p_type: uint32;
    p_offset: uint32;
    p_vaddr: uint32;
    p_paddr: uint32;
    p_filesz: uint32;
    p_memsz: uint32;
    p_flags: uint32;
    p_align: uint32;
};

type ProgramHeader64 = unit {
    p_type: uint32;
    p_flags: uint32;
    p_offset: uint64;
    p_vaddr: uint64;
    p_paddr: uint64;
    p_filesz: uint64;
    p_memsz: uint64;
    p_align: uint64;
};

type SectionHeader32 = unit {
    sh_name: uint32;
    sh_type: uint32;
    sh_flags: uint32;
    sh_addr: uint32;
    sh_offset: uint32;
    sh_size: uint32;
    sh_link: uint32;
    sh_info: uint32;
    sh_addralign: uint32;
    sh_entsize: uint32;
};

type SectionHeader64 = unit {
    sh_name: uint32;
    sh_type: uint32;
    sh_flags: uint64;
    sh_addr: uint64;
    sh_offset: uint64;
    sh_size: uint64;
    sh_link: uint32;
    sh_info: uint32;
    sh_addralign: uint64;
    sh_entsize: uint64;
};

type Symbol32 = unit {
    st_name: uint32;
    st_value: uint32;
    st_size: uint32;
    st_info: uint8;
    st_other: uint8;
    st_shndx: uint16;
};

type Symbol64 = unit {
    st_name: uint32;
    st_info: uint8;
    st_other: uint8;
    st_shndx: uint16;
    st_value: uint64;
    st_size: uint64;
};

type Rel32 = unit {
    r_offset: uint32;
    r_info: uint32;
};

type Rela32 = unit {
    r_offset: uint32;
    r_info: uint32;
    r_addend: int32;
};

type Rel64 = unit {
    r_offset: uint64;
    r_info: uint64;
};

type Rela64 = unit {
    r_offset: uint64;
    r_info: uint64;
    r_addend: int64;
};

type Dynamic = unit {
    d_tag: uint64;
    d_val: uint64;
};