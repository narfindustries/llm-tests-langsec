# zeek-spicy specification for ELF file format

# Import necessary modules
@load base/protocols/pcre
@load base/protocols/binpac

# Define the ELF file format
module ELF;

# Define the ELF header structure
type elf_header: record {
    e_ident: byte[16];
    e_type: uint16;
    e_machine: uint16;
    e_version: uint32;
    e_entry: uint64;
    e_phoff: uint64;
    e_shoff: uint64;
    e_flags: uint32;
    e_ehsize: uint16;
    e_phentsize: uint16;
    e_phnum: uint16;
    e_shentsize: uint16;
    e_shnum: uint16;
    e_shstrndx: uint16;
} &byteorder=littleendian;

# Define the ELF program header structure
type elf_phdr: record {
    p_type: uint32;
    p_flags: uint32;
    p_offset: uint64;
    p_vaddr: uint64;
    p_paddr: uint64;
    p_filesz: uint64;
    p_memsz: uint64;
    p_align: uint64;
} &byteorder=littleendian;

# Define the ELF section header structure
type elf_shdr: record {
    sh_name: uint32;
    sh_type: uint32;
    sh_flags: uint64;
    sh_addr: uint64;
    sh_offset: uint64;
    sh_size: uint64;
    sh_link: uint32;
    sh_info: uint32;
    sh_addralign: uint64;
    sh_entsize: uint64;
} &byteorder=littleendian;

# Define the events
event elf_file(header: elf_header);
event elf_program_header(phdr: elf_phdr);
event elf_section_header(shdr: elf_shdr);

# Define the parser
module ELF_Parser;

# Define the parser for the ELF header
function parse_elf_header(header: elf_header): bool
    {
    if ( header$e_ident[0] != 0x7F ||
         header$e_ident[1] != 0x45 ||
         header$e_ident[2] != 0x4c ||
         header$e_ident[3] != 0x46 )
        return false;
    event elf_file(header);
    return true;
    }

# Define the parser for the ELF program headers
function parse_elf_phdr(phdr: elf_phdr): bool
    {
    event elf_program_header(phdr);
    return true;
    }

# Define the parser for the ELF section headers
function parse_elf_shdr(shdr: elf_shdr): bool
    {
    event elf_section_header(shdr);
    return true;
    }

# Define the main parser
function parse(data: string): bool
    {
    if ( |data| < 16 )
        return false;
    local header: elf_header;
    header = data[0..15];
    if ( ! parse_elf_header(header) )
        return false;
    local phdr_offset = header$e_phoff;
    local phdr_num = header$e_phnum;
    for ( i in 1..phdr_num )
        {
        local phdr: elf_phdr = data[phdr_offset..phdr_offset+55];
        parse_elf_phdr(phdr);
        phdr_offset += 56;
        }
    local shdr_offset = header$e_shoff;
    local shdr_num = header$e_shnum;
    for ( i in 1..shdr_num )
        {
        local shdr: elf_shdr = data[shdr_offset..shdr_offset+67];
        parse_elf_shdr(shdr);
        shdr_offset += 68;
        }
    return true;
    }