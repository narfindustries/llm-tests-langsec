module PNG;

type png_chunk_header = record {
    length: uint32;
    type: string[4];
};

type png_ihdr = record {
    width: uint32;
    height: uint32;
    bit_depth: uint8;
    color_type: uint8;
    compression_method: uint8;
    filter_method: uint8;
    interlace_method: uint8;
};

type png_palette_entry = record {
    red: uint8;
    green: uint8;
    blue: uint8;
};

type png_plte = record {
    palette: vector[png_palette_entry];
};

type png_trns = record {
    transparency_data: bytes;
};

type png_idat = record {
    data: bytes;
};

type png_chunk = record {
    header: png_chunk_header;
    data: bytes;
    crc: uint32;
};

type png_file = record {
    signature: bytes[8];
    chunks: vector[png_chunk];
};

type png_gama = record {
    gamma: uint32;
};

type png_chrm = record {
    white_point_x: uint32;
    white_point_y: uint32;
    red_x: uint32;
    red_y: uint32;
    green_x: uint32;
    green_y: uint32;
    blue_x: uint32;
    blue_y: uint32;
};

type png_text = record {
    keyword: string;
    text: string;
};

type png_iCCP = record {
    profileName: string;
    compressionMethod: uint8;
    compressedProfile: bytes;
};

function parse_png(file_path: string): png_file {
    local file_data = read_file(file_path);

    if (len(file_data) < 8 || file_data[0:8] != "\x89PNG\r\n\x1a\n") {
        return {};
    }

    local png = {signature=file_data[0:8], chunks=[]};
    local offset = 8;
    while (offset < len(file_data)) {
        local chunk_header = parse_record(file_data[offset:offset+8], png_chunk_header);
        local chunk_data = file_data[offset+8:offset+8+chunk_header.length];
        local chunk_crc = parse_uint32(file_data[offset+8+chunk_header.length:offset+12+chunk_header.length]);
        offset += 12 + chunk_header.length;

        local chunk = record {header=chunk_header, data=chunk_data, crc=chunk_crc};
        png.chunks += chunk;
    }
    return png;
}
