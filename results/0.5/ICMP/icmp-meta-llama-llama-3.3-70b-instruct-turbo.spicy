# Zeek Spicy specification for ICMP protocol

%header {
    # Import necessary modules
    @load base/protocols/icmp
}

%protocol icmp {
    # Define the ICMP protocol
    %import base/protocols/icmp

    # Define the ICMP message types
    type msg_type: uint8 = {
        case 0 => echo_reply,
        case 3 => destination_unreachable,
        case 4 => source_quench,
        case 5 => redirect,
        case 8 => echo_request,
        case 9 => router_advertisement,
        case 10 => router_solicitation,
        case 11 => time_exceeded,
        case 12 => parameter_problem,
        default => unknown
    }

    # Define the ICMP message type handlers
    type echo_reply: record {
        id: uint16,
        seq: uint16,
        timestamp: uint32,
        data: bytestring &restofdata
    }

    type destination_unreachable: record {
        unused: uint32,
        next_hop_mtu: uint32,
        data: bytestring &restofdata
    }

    type source_quench: record {
        unused: uint32,
        data: bytestring &restofdata
    }

    type redirect: record {
        gateway_address: ip_addr,
        data: bytestring &restofdata
    }

    type echo_request: record {
        id: uint16,
        seq: uint16,
        timestamp: uint32,
        data: bytestring &restofdata
    }

    type router_advertisement: record {
        num_addresses: uint8,
        address_entry_size: uint8,
        lifetime: uint16,
        addresses: vector[address_entry],
        data: bytestring &restofdata
    }

    type router_solicitation: record {
        reserved: uint32,
        data: bytestring &restofdata
    }

    type time_exceeded: record {
        unused: uint32,
        data: bytestring &restofdata
    }

    type parameter_problem: record {
        pointer: uint8,
        data: bytestring &restofdata
    }

    type unknown: record {
        data: bytestring &restofdata
    }

    type address_entry: record {
        address: ip_addr,
        preference_level: uint32
    }
}