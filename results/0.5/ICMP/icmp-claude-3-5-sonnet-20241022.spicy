module ICMP;

public type Message = unit {
    msg_type: uint8 {
        if ( self.msg_type == 0 ) {
            self.message_type = MessageType::ECHO_REPLY;
        } else if ( self.msg_type == 3 ) {
            self.message_type = MessageType::DESTINATION_UNREACHABLE;
        } else if ( self.msg_type == 4 ) {
            self.message_type = MessageType::SOURCE_QUENCH;
        } else if ( self.msg_type == 5 ) {
            self.message_type = MessageType::REDIRECT;
        } else if ( self.msg_type == 8 ) {
            self.message_type = MessageType::ECHO_REQUEST;
        } else if ( self.msg_type == 11 ) {
            self.message_type = MessageType::TIME_EXCEEDED;
        } else if ( self.msg_type == 12 ) {
            self.message_type = MessageType::PARAMETER_PROBLEM;
        } else if ( self.msg_type == 13 ) {
            self.message_type = MessageType::TIMESTAMP;
        } else if ( self.msg_type == 14 ) {
            self.message_type = MessageType::TIMESTAMP_REPLY;
        } else if ( self.msg_type == 15 ) {
            self.message_type = MessageType::INFORMATION_REQUEST;
        } else if ( self.msg_type == 16 ) {
            self.message_type = MessageType::INFORMATION_REPLY;
        }
    }
    code: uint8;
    checksum: uint16;
    
    switch ( self.message_type ) {
        MessageType::ECHO_REPLY, MessageType::ECHO_REQUEST -> echo: EchoData;
        MessageType::DESTINATION_UNREACHABLE -> unused: bytes &size=4;
        MessageType::REDIRECT -> gateway: uint32;
        MessageType::PARAMETER_PROBLEM -> : bytes &size=4;
        MessageType::TIMESTAMP, MessageType::TIMESTAMP_REPLY -> timestamp: TimestampData;
        MessageType::INFORMATION_REQUEST, MessageType::INFORMATION_REPLY -> info: bytes &eod;
        * -> data: bytes &eod;
    }

    var message_type: MessageType;
};

type EchoData = unit {
    identifier: uint16;
    sequence: uint16;
    data: bytes &eod;
};

type TimestampData = unit {
    identifier: uint16;
    sequence: uint16;
    originate: uint32;
    receive: uint32;
    transmit: uint32;
};

enum MessageType {
    ECHO_REPLY = 0,
    DESTINATION_UNREACHABLE = 3,
    SOURCE_QUENCH = 4,
    REDIRECT = 5,
    ECHO_REQUEST = 8,
    TIME_EXCEEDED = 11,
    PARAMETER_PROBLEM = 12,
    TIMESTAMP = 13,
    TIMESTAMP_REPLY = 14,
    INFORMATION_REQUEST = 15,
    INFORMATION_REPLY = 16
};