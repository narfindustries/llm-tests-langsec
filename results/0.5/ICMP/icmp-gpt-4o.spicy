module ICMP;

import spicy;

public type ICMP = unit {
    type: uint8;
    code: uint8;
    checksum: uint16;
    rest_of_header: switch (type) {
        // Echo Reply and Echo Request
        0, 8 => echo: ICMP_Echo,

        // Destination Unreachable
        3 => destination_unreachable: ICMP_DestinationUnreachable,

        // Redirect
        5 => redirect: ICMP_Redirect,

        // Time Exceeded
        11 => time_exceeded: ICMP_TimeExceeded,

        // Parameter Problem
        12 => parameter_problem: ICMP_ParameterProblem,

        // Timestamp Request and Reply
        13, 14 => timestamp: ICMP_Timestamp,

        // Address Mask Request and Reply
        17, 18 => address_mask: ICMP_AddressMask,

        // Default case for unhandled types
        else => rest: bytes &restofdata
    }
};

type ICMP_Echo = unit {
    identifier: uint16;
    sequence_number: uint16;
    data: bytes &restofdata;
};

type ICMP_DestinationUnreachable = unit {
    unused: uint32;
    original_datagram: bytes &restofdata;
};

type ICMP_Redirect = unit {
    gateway_internet_address: bytes &length=4;
    original_datagram: bytes &restofdata;
};

type ICMP_TimeExceeded = unit {
    unused: uint32;
    original_datagram: bytes &restofdata;
};

type ICMP_ParameterProblem = unit {
    pointer: uint8;
    unused: bytes &length=3;
    original_datagram: bytes &restofdata;
};

type ICMP_Timestamp = unit {
    identifier: uint16;
    sequence_number: uint16;
    originate_timestamp: uint32;
    receive_timestamp: uint32;
    transmit_timestamp: uint32;
};

type ICMP_AddressMask = unit {
    identifier: uint16;
    sequence_number: uint16;
    address_mask: uint32;
};