module JPEG;

import spicy;

public type File = unit {
    start_of_image: StartOfImage;
    markers: Marker[] &until($input.is_eof());
    end_of_image: EndOfImage;
};

type StartOfImage = unit {
    magic: bytes &size=2 &validate=(|magic| == 2 && magic[0] == 0xff && magic[1] == 0xd8);
};

type EndOfImage = unit {
    magic: bytes &size=2 &validate=(|magic| == 2 && magic[0] == 0xff && magic[1] == 0xd9);
};

type Marker = unit {
    marker_type: bytes &size=2;
    length: uint16;

    switch (marker_type) {
        b"\xff\xe0" -> app0: APP0Marker(length);
        b"\xff\xe1" -> app1: APP1Marker(length);
        b"\xff\xc4" -> dht: DHTMarker(length);
        b"\xff\xdb" -> dqt: DQTMarker(length);
        b"\xff\xc0" -> sof0: SOF0Marker(length);
        b"\xff\xc2" -> sof2: SOF2Marker(length);
        b"\xff\xda" -> sos: SOSMarker(length);
        b"\xff\xdd" -> dri: DRIMarker(length);
    };
};

type APP0Marker = unit(marker_length: uint16) {
    identifier: bytes &size=5;
    version: bytes &size=2;
    density_units: uint8;
    x_density: uint16;
    y_density: uint16;
    thumbnail_width: uint8;
    thumbnail_height: uint8;
    thumbnail_data: bytes &size=(thumbnail_width * thumbnail_height * 3);
};

type APP1Marker = unit(marker_length: uint16) {
    exif_identifier: bytes &size=6;
    tiff_header: bytes &size=8;
    exif_data: bytes &size=(marker_length - 16);
};

type DHTMarker = unit(marker_length: uint16) {
    num_tables: uint8;
    tables: DHTable[] &count=num_tables;
};

type DHTable = unit {
    table_type: uint8;
    lengths: uint8[16];
    values: bytes &size=(|lengths|);
};

type DQTMarker = unit(marker_length: uint16) {
    precision: uint8;
    quantization_table: bytes &size=64;
};

type SOF0Marker = unit(marker_length: uint16) {
    precision: uint8;
    height: uint16;
    width: uint16;
    num_components: uint8;
    components: SOFComponent[] &count=num_components;
};

type SOF2Marker = unit(marker_length: uint16) {
    precision: uint8;
    height: uint16;
    width: uint16;
    num_components: uint8;
    components: SOFComponent[] &count=num_components;
};

type SOFComponent = unit {
    id: uint8;
    sampling_factors: uint8;
    quantization_table_id: uint8;
};

type SOSMarker = unit(marker_length: uint16) {
    num_components: uint8;
    components: SOSComponent[] &count=num_components;
    spectral_selection_start: uint8;
    spectral_selection_end: uint8;
    approximation_bit_pos: uint8;
};

type SOSComponent = unit {
    component_id: uint8;
    huffman_tables: uint8;
};

type DRIMarker = unit(marker_length: uint16) {
    restart_interval: uint16;
};