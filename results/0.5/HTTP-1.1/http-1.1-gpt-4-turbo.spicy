module HTTP;

import spicy;

type Method = enum {
    GET,
    HEAD,
    POST,
    PUT,
    DELETE,
    CONNECT,
    OPTIONS,
    TRACE,
    PATCH
};

type Version = unit {
    major: uint8;
    minor: uint8;
} &byte-order=big;

type StatusCode = enum {
    Continue = 100,
    SwitchingProtocols = 101,
    OK = 200,
    Created = 201,
    Accepted = 202,
    NonAuthoritativeInformation = 203,
    NoContent = 204,
    ResetContent = 205,
    PartialContent = 206,
    MultipleChoices = 300,
    MovedPermanently = 301,
    Found = 302,
    SeeOther = 303,
    NotModified = 304,
    UseProxy = 305,
    TemporaryRedirect = 307,
    BadRequest = 400,
    Unauthorized = 401,
    PaymentRequired = 402,
    Forbidden = 403,
    NotFound = 404,
    MethodNotAllowed = 405,
    NotAcceptable = 406,
    ProxyAuthenticationRequired = 407,
    RequestTimeout = 408,
    Conflict = 409,
    Gone = 410,
    LengthRequired = 411,
    PreconditionFailed = 412,
    RequestEntityTooLarge = 413,
    RequestURITooLong = 414,
    UnsupportedMediaType = 415,
    RequestedRangeNotSatisfiable = 416,
    ExpectationFailed = 417,
    InternalServerError = 500,
    NotImplemented = 501,
    BadGateway = 502,
    ServiceUnavailable = 503,
    GatewayTimeout = 504,
    HTTPVersionNotSupported = 505
};

type RequestLine = unit {
    method: Method;
    uri: spicy.Text;
    version: Version;
} &byte-order=big;

type StatusLine = unit {
    version: Version;
    code: StatusCode;
    reason: spicy.Text;
} &byte-order=big;

type Header = unit {
    name: spicy.Text;
    value: spicy.Text;
};

type Headers = unit {
    entries: vector<Header>;
};

type MessageBody = unit {
    content: bytes &size=0; // Dynamically sized based on Content-Length header or chunked transfer encoding
};

type Request = unit {
    requestLine: RequestLine;
    headers: Headers;
    body: optional<MessageBody>;
};

type Response = unit {
    statusLine: StatusLine;
    headers: Headers;
    body: optional<MessageBody>;
};

public type HTTPMessage = unit {
    isRequest: bool;
    request: optional<Request>;
    response: optional<Response>;

    on %init {
        if (self.isRequest) {
            self.request = Request();
        } else {
            self.response = Response();
        }
    }
};