module GIF;

import spicy;

public type GIFHeader = unit {
    magic: bytes &size=3;
    version: bytes &size=3;
};

public type LogicalScreenDescriptor = unit {
    width: uint16;
    height: uint16;
    packed: uint8;
    background_color_index: uint8;
    pixel_aspect_ratio: uint8;
};

public type ColorTableEntry = unit {
    red: uint8;
    green: uint8;
    blue: uint8;
};

public type GlobalColorTable = unit {
    entries: ColorTableEntry[] &until($input.size() == 0);
};

public type ImageDescriptor = unit {
    left_position: uint16;
    top_position: uint16;
    width: uint16;
    height: uint16;
    packed: uint8;
};

public type LocalColorTable = unit {
    entries: ColorTableEntry[] &until($input.size() == 0);
};

public type ImageData = unit {
    lzw_minimum_code_size: uint8;
    data: bytes &until($input.size() == 0);
};

public type GIFImage = unit {
    descriptor: ImageDescriptor;
    local_color_table: LocalColorTable &if(descriptor.packed & 0x80);
    image_data: ImageData;
};

public type GIFTrailer = unit {
    trailer: bytes &size=1;
};

public type GIF = unit {
    header: GIFHeader;
    logical_screen_descriptor: LogicalScreenDescriptor;
    global_color_table: GlobalColorTable &if(logical_screen_descriptor.packed & 0x80);
    images: GIFImage[] &until($input.size() == 0);
    trailer: GIFTrailer;
};

on GIF::header {
    if (self.magic != b"GIF") {
        print("Invalid GIF magic number");
        return;
    }
    print(f"GIF version: {self.version}");
}

on GIF::logical_screen_descriptor {
    print(f"Logical screen width: {self.width}, height: {self.height}");
}

on GIF::global_color_table {
    print(f"Global color table entries: {self.entries.size()}");
}

on GIF::images::descriptor {
    print(f"Image descriptor: left={self.left_position}, top={self.top_position}, width={self.width}, height={self.height}");
}

on GIF::images::local_color_table {
    print(f"Local color table entries: {self.entries.size()}");
}

on GIF::images::image_data {
    print(f"Image data size: {self.data.size()}");
}

on GIF::trailer {
    if (self.trailer != b";") {
        print("Invalid GIF trailer");
        return;
    }
    print("Valid GIF trailer");
}