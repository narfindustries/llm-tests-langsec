module GIF;

public type Header = unit {
    signature: bytes &size=3;
    version: bytes &size=3;
};

type LogicalScreenDescriptor = unit {
    width: uint16;
    height: uint16;
    packed: bitfield(8) {
        global_color_table_flag: 0;
        color_resolution: 1..3;
        sort_flag: 4;
        size_global_color_table: 5..7;
    };
    background_color_index: uint8;
    pixel_aspect_ratio: uint8;
    
    var global_color_table_size: uint64 = 3 * (2 ^ ($$.packed.size_global_color_table + 1));
    
    on %done {
        if ( self.packed.global_color_table_flag == 1 )
            self.global_color_table = self.global_color_table;
    }
    
    global_color_table: bytes &size=self.global_color_table_size;
};

type GraphicControlExtension = unit {
    introducer: uint8 &requires=0x21;
    label: uint8 &requires=0xF9;
    block_size: uint8 &requires=0x04;
    packed: bitfield(8) {
        reserved: 0..2;
        disposal_method: 3..5;
        user_input_flag: 6;
        transparent_color_flag: 7;
    };
    delay_time: uint16;
    transparent_color_index: uint8;
    terminator: uint8 &requires=0x00;
};

type CommentExtension = unit {
    introducer: uint8 &requires=0x21;
    label: uint8 &requires=0xFE;
    : DataSubBlocks;
};

type PlainTextExtension = unit {
    introducer: uint8 &requires=0x21;
    label: uint8 &requires=0x01;
    block_size: uint8 &requires=0x0C;
    text_grid_left: uint16;
    text_grid_top: uint16;
    text_grid_width: uint16;
    text_grid_height: uint16;
    cell_width: uint8;
    cell_height: uint8;
    foreground_color: uint8;
    background_color: uint8;
    : DataSubBlocks;
};

type ApplicationExtension = unit {
    introducer: uint8 &requires=0x21;
    label: uint8 &requires=0xFF;
    block_size: uint8 &requires=0x0B;
    identifier: bytes &size=8;
    auth_code: bytes &size=3;
    : DataSubBlocks;
};

type ImageDescriptor = unit {
    separator: uint8 &requires=0x2C;
    left: uint16;
    top: uint16;
    width: uint16;
    height: uint16;
    packed: bitfield(8) {
        local_color_table_flag: 0;
        interlace_flag: 1;
        sort_flag: 2;
        reserved: 3..4;
        size_local_color_table: 5..7;
    };
    
    var local_color_table_size: uint64 = 3 * (2 ^ ($$.packed.size_local_color_table + 1));
    
    on %done {
        if ( self.packed.local_color_table_flag == 1 )
            self.local_color_table = self.local_color_table;
    }
    
    local_color_table: bytes &size=self.local_color_table_size;
    lzw_minimum_code_size: uint8;
    : DataSubBlocks;
};

type DataSubBlock = unit {
    size: uint8;
    data: bytes &size=self.size;
};

type DataSubBlocks = unit {
    blocks: DataSubBlock[] &until-including($$.size == 0);
};

public type GIF = unit {
    header: Header;
    screen: LogicalScreenDescriptor;
    
    blocks: unit {
        block_type: uint8;
        
        switch ( self.block_type ) {
            0x21 -> extension: unit {
                label: uint8;
                switch ( self.label ) {
                    0xF9 -> graphic_control: GraphicControlExtension;
                    0xFE -> comment: CommentExtension;
                    0x01 -> plain_text: PlainTextExtension;
                    0xFF -> application: ApplicationExtension;
                };
            };
            0x2C -> image: ImageDescriptor;
            0x3B -> : void;
        };
    }[] &until-including($.blocks.block_type == 0x3B);
};