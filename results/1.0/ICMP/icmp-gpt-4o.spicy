module ICMP;

import spicy::time;
import spicy::network;

type ICMPHeader = unit {
    type: uint8;
    code: uint8;
    checksum: uint16;
    rest_of_header: bytes &size=4;

    on %done {
        if (checksum != calculated_checksum()) {
            warn fmt("Invalid checksum: %x, expected: %x", checksum, calculated_checksum());
        }
    }

    method calculated_checksum() : uint16 {
        # Calculate the ICMP header checksum.
        local hdr_bytes = type.to_bytes() + code.to_bytes() + "\x00\x00" + rest_of_header;
        return spicy::algorithm::checksum_ip(hdr_bytes);
    }
};

type ICMPMessage = unit {
    header: ICMPHeader;
    data: bytes &restof;

    on %done {
        print fmt("ICMP Message: type=%d, code=%d, data=%s", header.type, header.code, data);
    }
};

public type ICMPSession = unit {
    message: ICMPMessage;
};

public module Analyzer = spicy_analyzer {
    module: "ICMP";
    id: "ICMP-Analyzer";

    hook hook() on_start {
        add_flow("icmp");
    }

    hook hook(ip_packet: spicy::network::IP, payload: bytes) &priority=5
        if (ip_packet.protocol == spicy::network::IP::Protocol::ICMP) {
        local icmp_message = parse(payload, ICMPSession);
        print fmt("Parsed ICMP message: type=%d, code=%d", icmp_message.message.header.type, icmp_message.message.header.code);
    }
};
