module ICMP;

public type Message = unit {
    msg_type: uint8;
    code: uint8;
    checksum: uint16;

    switch ( self.msg_type ) {
        0, 8 -> echo: EchoMessage;
        3 -> dest_unreachable: DestinationUnreachable;
        4 -> source_quench: SourceQuench;
        5 -> redirect: Redirect;
        11 -> time_exceeded: TimeExceeded;
        12 -> param_problem: ParameterProblem;
        13, 14 -> timestamp: TimestampMessage;
        15, 16 -> info: InformationMessage;
    };
};

type EchoMessage = unit {
    identifier: uint16;
    sequence: uint16;
    data: bytes &eod;
};

type DestinationUnreachable = unit {
    unused: uint32;
    original_data: bytes &eod;
};

type SourceQuench = unit {
    unused: uint32;
    original_data: bytes &eod;
};

type Redirect = unit {
    gateway_address: uint32;
    original_data: bytes &eod;
};

type TimeExceeded = unit {
    unused: uint32;
    original_data: bytes &eod;
};

type ParameterProblem = unit {
    pointer: uint8;
    unused_bytes: bytes &size=3;
    original_data: bytes &eod;
};

type TimestampMessage = unit {
    identifier: uint16;
    sequence: uint16;
    originate_timestamp: uint32;
    receive_timestamp: uint32;
    transmit_timestamp: uint32;
};

type InformationMessage = unit {
    identifier: uint16;
    sequence: uint16;
};