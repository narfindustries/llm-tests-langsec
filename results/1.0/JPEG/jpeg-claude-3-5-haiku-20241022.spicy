module JPEG;

import spicy;

public type JPEG = unit {
    start_of_image: bytes &size=2 &requires=($$ == b"\xFF\xD8");

    markers: Marker[];

    end_of_image: bytes &size=2 &requires=($$ == b"\xFF\xD9");
};

type Marker = unit {
    marker_prefix: bytes &size=1 &requires=($$ == b"\xFF");
    marker_type: uint8 &convert=MarkerType($$);

    switch (marker_type) {
        MarkerType::APP0 => app0: APP0Marker;
        MarkerType::APP1 => app1: APP1Marker;
        MarkerType::SOF0 => sof0: SOF0Marker;
        MarkerType::SOF2 => sof2: SOF2Marker;
        MarkerType::DHT  => dht:  DHTMarker;
        MarkerType::DQT  => dqt:  DQTMarker;
        MarkerType::DRI  => dri:  DRIMarker;
        MarkerType::SOS  => sos:  SOSMarker;
        MarkerType::EOI  => {};
    };
};

type APP0Marker = unit {
    length: uint16;
    identifier: bytes &size=5;
    version_major: uint8;
    version_minor: uint8;
    density_units: uint8;
    x_density: uint16;
    y_density: uint16;
    thumbnail_width: uint8;
    thumbnail_height: uint8;
    thumbnail_data: bytes &size=(thumbnail_width * thumbnail_height * 3) &optional;
};

type APP1Marker = unit {
    length: uint16;
    identifier: bytes &size=6;
    exif_data: bytes &size=(length - 8);
};

type SOF0Marker = unit {
    length: uint16;
    precision: uint8;
    height: uint16;
    width: uint16;
    components: uint8;
    component_data: ComponentData[];
};

type SOF2Marker = unit {
    length: uint16;
    precision: uint8;
    height: uint16;
    width: uint16;
    components: uint8;
    component_data: ComponentData[];
};

type ComponentData = unit {
    id: uint8;
    sampling_factor: uint8;
    quantization_table_id: uint8;
};

type DHTMarker = unit {
    length: uint16;
    tables: HuffmanTable[];
};

type HuffmanTable = unit {
    table_class: uint8;
    table_destination: uint8;
    table_data: bytes &size=16;
    values: bytes;
};

type DQTMarker = unit {
    length: uint16;
    tables: QuantizationTable[];
};

type QuantizationTable = unit {
    precision: uint8;
    table_data: bytes &size=(precision == 0 ? 64 : 128);
};

type DRIMarker = unit {
    length: uint16;
    restart_interval: uint16;
};

type SOSMarker = unit {
    length: uint16;
    components: uint8;
    component_data: ScanComponentData[];
    spectral_selection_start: uint8;
    spectral_selection_end: uint8;
    approximation_bit_pos: uint8;
};

type ScanComponentData = unit {
    component_selector: uint8;
    huffman_tables: uint8;
};

enum MarkerType {
    APP0 = 0xE0,
    APP1 = 0xE1,
    SOF0 = 0xC0,
    SOF2 = 0xC2,
    DHT  = 0xC4,
    DQT  = 0xDB,
    DRI  = 0xDD,
    SOS  = 0xDA,
    EOI  = 0xD9
};