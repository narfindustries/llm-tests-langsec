module JPEG

let soi: byte[] = [0xff, 0xd8];
let app0: byte[] = [0xff, 0xe0];
let app1: byte[] = [0xff, 0xe1];
let dqt: byte[] = [0xff, 0xdb];
let sof0: byte[] = [0xff, 0xc0];
let dht: byte[] = [0xff, 0xc4];
let dri: byte[] = [0xff, 0xdd];
let sos: byte[] = [0xff, 0xda];
let eoi: byte[] = [0xff, 0xd9];
let restart_marker: byte[] = [0xff, (0xd0 | 0xd1 | 0xd2 | 0xd3 | 0xd4 | 0xd5 | 0xd6 | 0xd7)];

let jpeg = 
  soi 
  ( app0 
    ( length: uint16 
      identifier: string(5) 
      version: uint16 
      units: uint8 
      xdensity: uint16 
      ydensity: uint16 
      thumbn_width: uint8 
      thumbn_height: uint8 
    )
  )?
  ( app1 
    ( length: uint16 
      identifier: string 
      data: byte[length - 2] 
    )
  )*
  dqt
  ( dqt
    ( length: uint16 
      table_number: uint8 
      precision: uint8 
      data: byte[64] 
    )
  )*
  sof0
  ( length: uint16 
    precision: uint8 
    image_height: uint16 
    image_width: uint16 
    number_of_components: uint8 
    ( component_id: uint8 
      horizontal_sampling_factor: uint8 
      vertical_sampling_factor: uint8 
      quantization_table_number: uint8 
    )[number_of_components]
  )
  ( dht
    ( length: uint16 
      table_class: uint8 
      destination_id: uint8 
      ( number_of_codes: uint8 
        ( value: uint8 
          code: uint8 
        )[16]
      )[2]
    )
  )*
  ( dri 
    ( length: uint16 
      restart_interval: uint16 
    )
  )?
  sos
  ( length: uint16 
    number_of_components: uint8 
    ( component_selector: uint8 
      dc_table: uint8 
      ac_table: uint8 
    )[number_of_components]
    scan_data: byte[]
  )
  eoi;

let input = jpeg;