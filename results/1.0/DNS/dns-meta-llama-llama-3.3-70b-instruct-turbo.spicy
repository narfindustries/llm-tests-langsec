module DNS;

type DNS_Message: Record {
  header: DNS_Header;
  questions: Vector of DNS_Question &length = header.qdcount;
  answers: Vector of DNS_RR &length = header.ancount;
  authorities: Vector of DNS_RR &length = header.nscount;
  additionals: Vector of DNS_RR &length = header.arcount;
};

type DNS_Header: Record {
  id: uint16;
  qr: bool;
  opcode: uint4;
  aa: bool;
  tc: bool;
  rd: bool;
  ra: bool;
  z: uint3;
  rcode: uint4;
  qdcount: uint16;
  ancount: uint16;
  nscount: uint16;
  arcount: uint16;
};

type DNS_Question: Record {
  qname: DNS_Name;
  qtype: uint16;
  qclass: uint16;
};

type DNS_RR: Record {
  name: DNS_Name;
  type: uint16;
  class: uint16;
  ttl: uint32;
  rdlength: uint16;
  rdata: bytestring &length = rdlength;
};

type DNS_Name: Record {
  labels: Vector of bytestring;
};

type A_RR: Record {
  addr: uint32;
};

type AAAA_RR: Record {
  addr: bytestring &length = 16;
};

type NS_RR: Record {
  nsdname: DNS_Name;
};

type MD_RR: Record {
  madname: DNS_Name;
};

type MF_RR: Record {
  madname: DNS_Name;
};

type CNAME_RR: Record {
  cname: DNS_Name;
};

type SOA_RR: Record {
  mname: DNS_Name;
  rname: DNS_Name;
  serial: uint32;
  refresh: uint32;
  retry: uint32;
  expire: uint32;
  min_ttl: uint32;
};

type MB_RR: Record {
  madname: DNS_Name;
};

type MG_RR: Record {
  mgmname: DNS_Name;
};

type MR_RR: Record {
  newname: DNS_Name;
};

type NULL_RR: Record {
  anything: bytestring;
};

type WKS_RR: Record {
  address: uint32;
  protocol: uint8;
  bitmap: bytestring;
};

type PTR_RR: Record {
  ptrdname: DNS_Name;
};

type HINFO_RR: Record {
  cpu: bytestring;
  os: bytestring;
};

type MINFO_RR: Record {
  rmailbx: DNS_Name;
  emailbx: DNS_Name;
};

type MX_RR: Record {
  preference: uint16;
  exchange: DNS!_Name;
};

type TXT_RR: Record {
  txt_data: Vector of bytestring;
};

let dns$msg: DNS_Message;