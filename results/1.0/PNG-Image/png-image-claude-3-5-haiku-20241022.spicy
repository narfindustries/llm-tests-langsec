module PNG;

import spicy;

public type File = unit {
    signature: bytes &size=8 &requires=self == b"\x89PNG\r\n\x1a\n";
    chunks: Chunk[] &eod;
};

type Chunk = unit {
    length: uint32;
    type: bytes &size=4;
    data: Data;
    crc: uint32;

    type Data = unit {
        data: bytes &size=|self| {
            switch ( type.decode() ) {
                case "IHDR" => IHDR(data);
                case "PLTE" => PLTE(data);
                case "IDAT" => IDAT(data);
                case "IEND" => IEND(data);
                case "tRNS" => Transparency(data);
                case "gAMA" => Gamma(data);
                case "cHRM" => ChromaCoords(data);
                default => UnknownChunk(data);
            }
        }
    }
};

type IHDR = unit {
    width: uint32;
    height: uint32;
    bit_depth: uint8 &requires=self in [1, 2, 4, 8, 16];
    color_type: uint8 &requires=self in [0, 2, 3, 4, 6];
    compression: uint8 &requires=self == 0;
    filter: uint8 &requires=self == 0;
    interlace: uint8 &requires=self in [0, 1];
};

type PLTE = unit {
    entries: bytes &max_size=768;
};

type IDAT = unit {
    compressed_data: bytes;
};

type IEND = unit {};

type Transparency = unit {
    alpha_data: bytes;
};

type Gamma = unit {
    gamma_value: uint32;
};

type ChromaCoords = unit {
    white_x: uint32;
    white_y: uint32;
    red_x: uint32;
    red_y: uint32;
    green_x: uint32;
    green_y: uint32;
    blue_x: uint32;
    blue_y: uint32;
};

type UnknownChunk = unit {
    raw_data: bytes;
};