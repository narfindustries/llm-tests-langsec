module PNG_Image;

type ChunkType = enum {
  IHDR = 0x49484452,
  PLTE = 0x504c5445,
  IDAT = 0x49444154,
  IEND = 0x49454e44,
  cHRM = 0x6348524d,
  gAMA = 0x67414d41,
  iCCP = 0x69434350,
  sBIT = 0x73424954,
  sRGB = 0x73524742,
  tEXt = 0x74455874,
  zTXt = 0x7a545874,
  iTXt = 0x69445874,
  bKGD = 0x624b4744,
  hIST = 0x68495354,
  tRNS = 0x74524e53,
  pHYs = 0x70485973,
  oFFs = 0x6f464673,
  acTL = 0x6143544c,
  fcTL = 0x6663544c,
  fdAT = 0x66644154,
};

type ColorType = enum {
  Grayscale = 0,
  RGB = 2,
  Palette = 3,
  GreyscaleAlpha = 4,
  RGBA = 6,
};

type CompressionMethod = enum {
  DeflateInflate = 0,
};

type FilterMethod = enum {
  AdaptiveFiltering = 0,
};

type InterlaceMethod = enum {
  NoInterlace = 0,
  Adam7Interlace = 1,
};

type Unit = enum {
  Unknown = 0,
  Meter = 1,
};

type Blend = enum {
  Source = 0,
  Over = 1,
};

type Dispose = enum {
  NoDispose = 0,
  Replace = 1,
  Combine = 2,
};

type RenderingIntent = enum {
  Perceptual = 0,
  RelativeColorimetric = 1,
  Saturation = 2,
  AbsoluteColorimetric = 3,
};

type PNG = struct {
  chunks: Chunk;
};

type Chunk = struct {
  length: uint32;
  type: ChunkType;
  data: ChunkData;
  crc: uint32;
};

type ChunkData = union {
  case ihdr: IHDR;
  case plte: PLTE;
  case idat: IDAT;
  case iend: IEND;
  case cHRM: cHRM;
  case gAMA: gAMA;
  case iCCP: iCCP;
  case sBIT: sBIT;
  case sRGB: sRGB;
  case tEXt: tEXt;
  case zTXt: zTXt;
  case iTXt: iTXt;
  case bKGD: bKGD;
  case hIST: hIST;
  case tRNS: tRNS;
  case pHYs: pHYs;
  case oFFs: oFFs;
  case acTL: acTL;
  case fcTL: fcTL;
  case fdAT: fdAT;
};

type IHDR = struct {
  width: uint32;
  height: uint32;
  bitDepth: uint8;
  colorType: ColorType;
  compressionMethod: CompressionMethod;
  filterMethod: FilterMethod;
  interlaceMethod: InterlaceMethod;
};

type PLTE = struct {
  paletteEntries: array[ PaletteEntry ];
};

type PaletteEntry = struct {
  red: uint8;
  green: uint8;
  blue: uint8;
};

type IDAT = struct {
  compressedImageData: bytes;
};

type IEND = struct {
};

type cHRM = struct {
  whitePointX: uint32;
  whitePointY: uint32;
  redX: uint32;
  redY: uint32;
  greenX: uint32;
  greenY: uint32;
  blueX: uint32;
  blueY: uint32;
};

type gAMA = struct {
  gammaValue: uint32;
};

type iCCP = struct {
  profileName: string;
  compressedProfile: bytes;
};

type sBIT = struct {
  significantBits: uint8;
};

type sRGB = struct {
  renderingIntent: RenderingIntent;
};

type tEXt = struct {
  keyword: string;
  textData: string;
};

type zTXt = struct {
  keyword: string;
  compressedTextData: bytes;
};

type iTXt = struct {
  keyword: string;
  textData: string;
  languageTag: string;
  translatedKeyword: string;
};

type bKGD = struct {
  backgroundColor: uint8;
};

type hIST = struct {
  histogramEntries: array[ HistogramEntry ];
};

type HistogramEntry = struct {
  value: uint16;
};

type tRNS = struct {
  transparencyData: bytes;
};

type pHYs = struct {
  pixelsPerUnitX: uint32;
  pixelsPerUnitY: uint32;
  unit: Unit;
};

type oFFs = struct {
  xOffset: int32;
  yOffset: int32;
  unit: Unit;
};

type acTL = struct {
  numberOfFrames: uint32;
};

type fcTL = struct {
  width: uint32;
  height: uint32;
  xOffset: int32;
  yOffset: int32;
  delay: uint32;
  dispose: Dispose;
  blend: Blend;
};

type fdAT = struct {
  sequenceNumber: uint32;
  frameData: bytes;
};