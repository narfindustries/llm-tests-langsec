module PNG;

public type PNG = unit {
    signature: bytes &size=8;
    chunks: Chunk[] &eod;

    on signature {
        if ( self.signature != b"\x89PNG\r\n\x1a\n" )
            confirm_error("Invalid PNG signature");
    }
};

type Chunk = unit {
    length: uint32;
    type: bytes &size=4;
    data: bytes &size=self.length;
    crc: uint32;
    var data_parsed: bytes;
};

type IHDR = unit {
    width: uint32;
    height: uint32;
    bit_depth: uint8;
    color_type: uint8;
    compression_method: uint8;
    filter_method: uint8;
    interlace_method: uint8;
};

type PLTE = unit {
    entries: bytes &size=self.parent.length;
};

type IDAT = unit {
    data: bytes &size=self.parent.length;
};

type IEND = unit {
    : bytes &size=0;
};

type tRNS = unit {
    data: bytes &size=self.parent.length;
};

type cHRM = unit {
    white_point_x: uint32;
    white_point_y: uint32;
    red_x: uint32;
    red_y: uint32;
    green_x: uint32;
    green_y: uint32;
    blue_x: uint32;
    blue_y: uint32;
};

type gAMA = unit {
    gamma: uint32;
};

type iCCP = unit {
    profile_name: bytes &until=b"\x00";
    compression_method: uint8;
    compressed_profile: bytes &size=self.parent.length - (|profile_name| + 2);
};

type sBIT = unit {
    significant_bits: bytes &size=self.parent.length;
};

type sRGB = unit {
    rendering_intent: uint8;
};

type tEXt = unit {
    keyword: bytes &until=b"\x00";
    text: bytes &size=self.parent.length - (|keyword| + 1);
};

type zTXt = unit {
    keyword: bytes &until=b"\x00";
    compression_method: uint8;
    compressed_text: bytes &size=self.parent.length - (|keyword| + 2);
};

type iTXt = unit {
    keyword: bytes &until=b"\x00";
    compression_flag: uint8;
    compression_method: uint8;
    language_tag: bytes &until=b"\x00";
    translated_keyword: bytes &until=b"\x00";
    text: bytes &size=self.parent.length - (|keyword| + |language_tag| + |translated_keyword| + 5);
};

type bKGD = unit {
    data: bytes &size=self.parent.length;
};

type pHYs = unit {
    pixels_per_unit_x: uint32;
    pixels_per_unit_y: uint32;
    unit_specifier: uint8;
};

type sPLT = unit {
    palette_name: bytes &until=b"\x00";
    sample_depth: uint8;
    entries: bytes &size=self.parent.length - (|palette_name| + 2);
};

type tIME = unit {
    year: uint16;
    month: uint8;
    day: uint8;
    hour: uint8;
    minute: uint8;
    second: uint8;
};

on Chunk {
    switch ( self.type ) {
        b"IHDR" -> { self.data_parsed = parse<IHDR>(self.data); }
        b"PLTE" -> { self.data_parsed = parse<PLTE>(self.data); }
        b"IDAT" -> { self.data_parsed = parse<IDAT>(self.data); }
        b"IEND" -> { self.data_parsed = parse<IEND>(self.data); }
        b"tRNS" -> { self.data_parsed = parse<tRNS>(self.data); }
        b"cHRM" -> { self.data_parsed = parse<cHRM>(self.data); }
        b"gAMA" -> { self.data_parsed = parse<gAMA>(self.data); }
        b"iCCP" -> { self.data_parsed = parse<iCCP>(self.data); }
        b"sBIT" -> { self.data_parsed = parse<sBIT>(self.data); }
        b"sRGB" -> { self.data_parsed = parse<sRGB>(self.data); }
        b"tEXt" -> { self.data_parsed = parse<tEXt>(self.data); }
        b"zTXt" -> { self.data_parsed = parse<zTXt>(self.data); }
        b"iTXt" -> { self.data_parsed = parse<iTXt>(self.data); }
        b"bKGD" -> { self.data_parsed = parse<bKGD>(self.data); }
        b"pHYs" -> { self.data_parsed = parse<pHYs>(self.data); }
        b"sPLT" -> { self.data_parsed = parse<sPLT>(self.data); }
        b"tIME" -> { self.data_parsed = parse<tIME>(self.data); }
    };
}