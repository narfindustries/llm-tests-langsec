module BitcoinTransactions;

import spicy;

type BitcoinTransaction = unit {
    version: uint32 &convert=spicy::to_int;
    input_count: varint;
    inputs: Input[input_count];
    output_count: varint;
    outputs: Output[output_count];
    lock_time: uint32 &convert=spicy::to_int;
};

type Input = unit {
    previous_output: OutPoint;
    script_length: varint;
    script: bytes &size=script_length;
    sequence: uint32 &convert=spicy::to_int;
};

type Output = unit {
    value: uint64 &convert=spicy::to_int;
    script_length: varint;
    script: bytes &size=script_length;
};

type OutPoint = unit {
    hash: bytes &size=32;
    index: uint32 &convert=spicy::to_int;
};

type varint = unit {
    value: uint64 &convert=spicy::to_int;
    : switch (value) {
        case 0xfd: uint16;
        case 0xfe: uint32;
        case 0xff: uint64;
        default: uint8;
    };
};

on BitcoinTransaction::%done {
    print "Bitcoin transaction parsed successfully";
}