module Bitcoin;

import spicy;

type CompactSize = unit {
    var value: uint64;
    
    on %init {
        if ( input[0] < 0xfd ) {
            self.value = cast<uint64>(input[0]);
        } 
        else if ( input[0] == 0xfd ) {
            value = stream.read_uint16_little();
        } 
        else if ( input[0] == 0xfe ) {
            value = stream.read_uint32_little();
        } 
        else {
            value = stream.read_uint64_little();
        }
    }
};

type TransactionInput = unit {
    prev_tx_hash: bytes &size=32;
    prev_output_index: uint32 &byte_order=spicy::ByteOrder::Little;
    script_sig_length: CompactSize;
    script_sig: bytes &size=(self.script_sig_length.value());
    sequence_number: uint32 &byte_order=spicy::ByteOrder::Little;
};

type TransactionOutput = unit {
    amount: int64 &byte_order=spicy::ByteOrder::Little;
    script_pubkey_length: CompactSize;
    script_pubkey: bytes &size=(self.script_pubkey_length.value());
};

type WitnessItem = unit {
    item_length: CompactSize;
    item_data: bytes &size=(self.item_length.value());
};

type WitnessStack = unit {
    witness_item_count: CompactSize;
    witness_items: vector<WitnessItem> &count=(self.witness_item_count.value());
};

type Transaction = unit {
    version: uint32 &byte_order=spicy::ByteOrder::Little;
    
    input_count: CompactSize;
    inputs: vector<TransactionInput> &count=(self.input_count.value());
    
    output_count: CompactSize;
    outputs: vector<TransactionOutput> &count=(self.output_count.value());
    
    locktime: uint32 &byte_order=spicy::ByteOrder::Little;
    
    witness_data: optional<WitnessStack> &optional;
};