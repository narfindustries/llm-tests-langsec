module Bitcoin;

public type Version = uint32;

type VarInt = unit {
    prefix: uint8;
    switch ( self.prefix ) {
        0xfd -> value16: uint16;
        0xfe -> value32: uint32;
        0xff -> value64: uint64;
        *    -> : void;
    };

    var value: uint64;

    on %done {
        if ( self.prefix < 0xfd )
            self.value = self.prefix;
        else if ( self.prefix == 0xfd )
            self.value = self.value16;
        else if ( self.prefix == 0xfe )
            self.value = self.value32;
        else
            self.value = self.value64;
    }
};

type TransactionInput = unit {
    prev_tx_hash: bytes &size=32;
    prev_tx_index: uint32;
    script_length: VarInt;
    script_sig: bytes &size=self.script_length.value;
    sequence: uint32;
};

type TransactionOutput = unit {
    value: uint64;
    script_length: VarInt;
    script_pubkey: bytes &size=self.script_length.value;
};

public type Transaction = unit {
    version: Version;
    input_count: VarInt;
    inputs: TransactionInput[self.input_count.value];
    output_count: VarInt;
    outputs: TransactionOutput[self.output_count.value];
    locktime: uint32;
};