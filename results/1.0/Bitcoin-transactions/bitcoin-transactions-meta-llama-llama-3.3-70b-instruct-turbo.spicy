module BitcoinTransactions;

type Txid = bytes :size 32;
type Varint = uint8 | uint16 | uint32;
type Int32 = int32;
type Int64 = int64;
type Uint32 = uint32;
type Uint64 = uint64;
type Byte = uint8;

type Script = sequence byte, bytes;

type TxIn = struct {
  txid: Txid;
  vout: Uint32;
  scriptSig: Script;
  sequence: Uint32;
};

type TxOut = struct {
  value: Uint64;
  scriptPubKey: Script;
};

type BlockHeader = struct {
  version: Int32;
  prev_block: Txid;
  merkle_root: Txid;
  time: Uint32;
  bits: Uint32;
  nonce: Uint32;
};

type Transaction = struct {
  version: Int32;
  tx_in_count: Varint;
  tx_in: vector(TxIn);
  tx_out_count: Varint;
  tx_out: vector(TxOut);
  lock_time: Uint32;
};

type Block = struct {
  block_header: BlockHeader;
  transaction_count: Varint;
  transactions: vector(Transaction);
};

type BitcoinMessage = struct {
  magic: bytes :size 4;
  command: bytes :size 12;
  length: Uint32;
  checksum: bytes :size 4;
  payload: Block | Transaction;
};