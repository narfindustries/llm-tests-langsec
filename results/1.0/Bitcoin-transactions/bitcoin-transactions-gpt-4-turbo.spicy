module Bitcoin;

type VarInt = unit {
    value: uint64 &convert=VarIntToUInt($$);
};

public type TxIn = unit {
    prevOutHash: bytes &size=32;
    prevOutIndex: uint32;
    scriptLength: VarInt;
    scriptSig: bytes &size=this.scriptLength.value;
    seqNo: uint32;
};

public type TxOut = unit {
    value: uint64;
    scriptLength: VarInt;
    scriptPubKey: bytes &size=this.scriptLength.value;
};

public type BitcoinTransaction = unit {
    version: int32;
    inCount: VarInt;
    inputs: TxIn[] &size=this.inCount.value;
    outCount: VarInt;
    outputs: TxOut[] &size=this.outCount.value;
    lockTime: uint32;
};

public type BitcoinBlock = unit {
    blockHeader: bytes &size=80;
    txCount: VarInt;
    transactions: BitcoinTransaction[] &size=this.txCount.value;
};

global function VarIntToUInt(data: bytes): uint64 {
    local result: uint64 = 0;
    local shift: uint = 0;
    for (local i = 0; i < data.size(); ++i) {
        local byteVal: uint8 = data[i];
        local tempVal: uint64 = (byteVal & 0x7F) << shift;
        result |= tempVal;
        shift += 7;
        if ((byteVal & 0x80) == 0)
            break;
    }
    return result;
}