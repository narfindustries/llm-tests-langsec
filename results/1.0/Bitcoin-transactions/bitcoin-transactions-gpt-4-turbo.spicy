module Bitcoin;

public type Transaction = unit {
    version: int32;
    inputCount: uint8;
    inputs: Input(inputCount)[] &requires=($$ > 0);
    outputCount: uint8;
    outputs: Output(outputCount)[] &requires=($$ > 0);
    lockTime: uint32;

    on %done {
        print self;
    }
};

type Input = unit(count: uint) {
    previousOutput: HashPrevOut;
    scriptLen: Size;
    signatureScript: bytes &size=scriptLen;
    seqNo: uint32;
    
    &requires=($$ > 0);
};

type Output = unit(count: uint) {
    value: uint64;
    pubkeyScriptLen: Size;
    pubkeyScript: bytes &size=pubkeyScriptLen;
    
    &requires=($$ > 0);
};

type HashPrevOut = unit {
    hash: bytes &size=32;
    index: uint32;
};

public type Size = unit {
    size_bytes: uint8;
    on %done {
        self.size = size_bytes;
    }
    
    var size: uint;
};

event zeek_init() {
    print "Bitcoin parser initialized.";
}

event spicy_heartbeat() {
    print "Heartbeat from Spicy Bitcoin parser.";
}