module BitcoinTransaction;

type BitcoinTransaction = unit {
    version: uint32;
    input_count: varint;
    inputs: array[input_count.to_uint()] of Input;
    output_count: varint;
    outputs: array[output_count.to_uint()] of Output;
    locktime: uint32;
};

type varint = unit {
    value: uint64 &parse-from=%uint64 {
        local prefix = %uint8;
        return switch (prefix) {
            case 0xfd: %uint16;
            case 0xfe: %uint32;
            case 0xff: %uint64;
            else: prefix;
        };
    };

    function to_uint(): uint64 {
        return self.value;
    }
};

type Input = unit {
    prev_tx_hash: bytes &length=32;
    output_index: uint32;
    script_length: varint;
    script_sig: bytes &length=script_length.to_uint();
    sequence_number: uint32;
};

type Output = unit {
    value: uint64;
    script_length: varint;
    script_pubkey: bytes &length=script_length.to_uint();
};