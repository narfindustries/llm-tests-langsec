module ZIP;

public type DOSDateTime = unit {
    time: uint16;
    date: uint16;
};

public type ExtraField = unit {
    headerID: uint16;
    dataSize: uint16;
    data: bytes &size=dataSize;
};

public type LocalFileHeader = unit {
    signature: uint32 = 0x04034b50;
    versionNeededToExtract: uint16;
    generalPurposeBitFlag: uint16;
    compressionMethod: uint16;
    modTime: DOSDateTime;
    crc32: uint32;
    compressedSize: uint32;
    uncompressedSize: uint32;
    fileNameLength: uint16;
    extraFieldLength: uint16;
    fileName: bytes &size=fileNameLength;
    extraFields: vector<ExtraField> &size=extraFieldLength;
    fileData: bytes &size=(generalPurposeBitFlag & 0x0008) ? 0 : compressedSize; // DataDescriptor follows if bit 3 is set
};

public type FileDataDescriptor = unit {
    crc32: uint32;
    compressedSize: uint32;
    uncompressedSize: uint32;
};

public type CentralDirFileHeader = unit {
    signature: uint32 = 0x02014b50;
    versionMadeBy: uint16;
    versionNeededToExtract: uint16;
    generalPurposeBitFlag: uint16;
    compressionMethod: uint16;
    modTime: DOSDateTime;
    crc32: uint32;
    compressedSize: uint32;
    uncompressedSize: uint32;
    fileNameLength: uint16;
    extraFieldLength: uint16;
    fileCommentLength: uint16;
    diskNumberStart: uint16;
    internalFileAttributes: uint16;
    externalFileAttributes: uint32;
    relativeOffsetOfLocalHeader: uint32;
    fileName: bytes &size=fileNameLength;
    extraFields: vector<ExtraField> &size=extraFieldLength;
    fileComment: bytes &size=fileCommentLength;
};

public type EndOfCentralDirRecord = unit {
    signature: uint32 = 0x06054b50;
    numberOfThisDisk: uint16;
    diskWhereCentralDirStarts: uint16;
    numCentralDirRecordsOnThisDisk: uint16;
    totalNumberOfCentralDirRecords: uint16;
    sizeOfCentralDir: uint32;
    offsetOfStartOfCentralDirectory: uint32;
    ZIPFileCommentLength: uint16;
    ZIPFileComment: bytes &size=ZIPFileCommentLength;
};

public type ZIPArchive = unit {
    files: vector<LocalFileHeader>;
    centralDirectory: vector<CentralDirFileHeader>;
    endOfCentralDirectory: EndOfCentralDirRecord;
};