module TLS;

type TLS_ClientHello : Record {
  legacy_version: uint16;
  random: bytestring &length=32;
  legacy_session_id: bytestring &length=1..32;
  cipher_suites: vector of uint16;
  legacy_compression_methods: vector of uint8;
  extensions: vector of TLS_Extension;
};

type TLS_Extension : Record {
  extension_type: uint16;
  extension_length: uint16;
  extension_value: bytestring &length=extension_length-4;
} &switch (extension_type) {
  case 43: Supported_Versions_Extension;
  case 10: Supported_Groups_Extension;
  case 51: Key_Share_Extension;
  case 41: Pre_Shared_Key_Extension;
  case 40: Early_Data_Extension;
  case 44: Cookie_Extension;
  case 45: PSK_Key_Exchange_Modes_Extension;
};

type Supported_Versions_Extension : Record {
  supported_version_list: vector of uint16;
} &length=extension_length-4;

type Supported_Groups_Extension : Record {
  supported_group_list: vector of uint16;
} &length=extension_length-4;

type Key_Share_Extension : Record {
  key_share_entry_list: vector of Key_Share_Entry;
} &length=extension_length-4;

type Key_Share_Entry : Record {
  group: uint16;
  key_exchange: bytestring;
};

type Pre_Shared_Key_Extension : Record {
  psk_identity_list: vector of PSK_Identity;
} &length=extension_length-4;

type PSK_Identity : Record {
  psk_identity: bytestring;
  obfuscated_ticket_age: uint32;
};

type Early_Data_Extension : Record {
};

type Cookie_Extension : Record {
  cookie: bytestring;
} &length=extension_length-4;

type PSK_Key_Exchange_Modes_Extension : Record {
  ke_mode_list: vector of uint16;
} &length=extension_length-4;

type TLS_Message : Record {
  content: TLS_ClientHello;
} &byteorder=bigendian;