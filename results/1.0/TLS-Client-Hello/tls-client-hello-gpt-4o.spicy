module TLS;

type ProtocolVersion = unit {
    major: uint8;
    minor: uint8;
};

type Random = unit {
    data: bytes &size=32;
};

type SessionID = unit {
    length: uint8;
    id: bytes &size=length;
};

type CipherSuites = unit {
    length: uint16;
    suites: bytes &size=length;
};

type CompressionMethods = unit {
    length: uint8;
    methods: bytes &size=length;
};

type Extension = unit {
    type_: uint16; # Renamed 'type' to 'type_' to avoid reserved keyword conflict
    length: uint16;
    data: bytes &size=length;
};

type Extensions = unit {
    length: uint16;
    extensions: vector<Extension> &length=length;
};

type ClientHello = unit {
    version: ProtocolVersion;
    random: Random;
    legacy_session_id: SessionID;
    cipher_suites: CipherSuites;
    legacy_compression_methods: CompressionMethods;
    extensions: Extensions;
};