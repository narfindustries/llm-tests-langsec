module TLS;

public type ClientHello = unit {
    legacy_version: uint16;
    random: bytes &size=32;
    legacy_session_id_length: uint8;
    legacy_session_id: bytes &size=self.legacy_session_id_length;
    cipher_suites_length: uint16;
    cipher_suites: bytes &size=self.cipher_suites_length;
    compression_methods_length: uint8;
    compression_methods: bytes &size=self.compression_methods_length;
    extensions_length: uint16;
    extensions: bytes &size=self.extensions_length;
};

type Extension = unit {
    type: uint16;
    length: uint16;
    data: ExtensionData(self.type, self.length);
};

type ExtensionData = unit(ext_type: uint16, ext_length: uint16) {
    switch ( ext_type ) {
        0x0000 -> server_name: ServerNameList &size=ext_length;
        0x000a -> supported_groups: SupportedGroups &size=ext_length;
        0x000d -> signature_algorithms: SignatureAlgorithms &size=ext_length;
        0x002b -> supported_versions: SupportedVersions &size=ext_length;
        0x0033 -> key_share: KeyShareClientHello &size=ext_length;
        0x002d -> psk_key_exchange_modes: PSKKeyExchangeModes &size=ext_length;
        0x002a -> early_data: bytes &size=ext_length;
        0x002c -> cookie: bytes &size=ext_length;
        0x0029 -> pre_shared_key: PreSharedKey &size=ext_length;
        * -> data: bytes &size=ext_length;
    };
};

type ServerNameList = unit {
    length: uint16;
    server_names: ServerName[] &size=self.length;
};

type ServerName = unit {
    name_type: uint8;
    length: uint16;
    host_name: bytes &size=self.length;
};

type SupportedGroups = unit {
    length: uint16;
    groups: uint16[] &size=self.length/2;
};

type SignatureAlgorithms = unit {
    length: uint16;
    algorithms: uint16[] &size=self.length/2;
};

type SupportedVersions = unit {
    length: uint8;
    versions: uint16[] &size=self.length/2;
};

type KeyShareClientHello = unit {
    length: uint16;
    entries: KeyShareEntry[] &size=self.length;
};

type KeyShareEntry = unit {
    group: uint16;
    key_exchange_length: uint16;
    key_exchange: bytes &size=self.key_exchange_length;
};

type PSKKeyExchangeModes = unit {
    length: uint8;
    modes: uint8[] &size=self.length;
};

type PreSharedKey = unit {
    identities_length: uint16;
    identities: PSKIdentity[] &size=self.identities_length;
    binders_length: uint16;
    binders: PSKBinder[] &size=self.binders_length;
};

type PSKIdentity = unit {
    identity_length: uint16;
    identity: bytes &size=self.identity_length;
    obfuscated_ticket_age: uint32;
};

type PSKBinder = unit {
    length: uint8;
    binder: bytes &size=self.length;
};