#ifndef TLS_CLIENT_HELLO_GEMINI_1_5_FLASH_SPICY
#define TLS_CLIENT_HELLO_GEMINI_1_5_FLASH_SPICY

#include <stdint.h>

// Define structures based on your actual TLS Client Hello structure
typedef struct {
    uint8_t  version[2];
    uint8_t  random[32];
    uint16_t session_id_length;
    uint8_t  session_id[]; // Variable length
    uint16_t cipher_suites_length;
    uint8_t  cipher_suites[]; // Variable length
    uint8_t  compression_methods_length;
    uint8_t  compression_methods[]; // Variable length
    uint8_t  extensions_length;
    uint8_t  extensions[]; // Variable length
} tls_client_hello_t;

// Function to parse TLS Client Hello based on your format
int parse_tls_client_hello(const uint8_t *buffer, int len, tls_client_hello_t **result) {
    if (len < 38) { // Check minimum length of TLS Client Hello
      return -1; // Return an error
    }

    tls_client_hello_t *client_hello = (tls_client_hello_t *)malloc(sizeof(tls_client_hello_t));
    if (client_hello == NULL) {
        return -1; // Handle memory allocation error.
    }

    //Copy Header
    memcpy(client_hello->version, buffer, 2);
    memcpy(client_hello->random, buffer + 2, 32);

    //Parse Variable Length Fields
    client_hello->session_id_length = (buffer[34] << 8) | buffer[35];
    client_hello->cipher_suites_length = (buffer[36 + client_hello->session_id_length] << 8) | buffer[37 + client_hello->session_id_length];
    client_hello->compression_methods_length = buffer[38 + client_hello->session_id_length + client_hello->cipher_suites_length];

    size_t total_length = 38 + client_hello->session_id_length + client_hello->cipher_suites_length + client_hello->compression_methods_length;
    if (len < total_length) {
      free(client_hello);
      return -1;
    }

    //Allocate Memory for Variable Length fields and copy the data
    size_t session_id_size = client_hello->session_id_length;
    size_t cipher_suites_size = client_hello->cipher_suites_length;
    size_t compression_methods_size = client_hello->compression_methods_length;
    size_t extensions_size = len - total_length;

    client_hello = (tls_client_hello_t *)realloc(client_hello, sizeof(tls_client_hello_t) + session_id_size + cipher_suites_size + compression_methods_size + extensions_size);
    if (client_hello == NULL) {
        return -1; // Handle memory allocation error
    }

    memcpy(client_hello->session_id, buffer + 36, session_id_size);
    memcpy(client_hello->cipher_suites, buffer + 36 + session_id_size, cipher_suites_size);
    memcpy(client_hello->compression_methods, buffer + 36 + session_id_size + cipher_suites_size, compression_methods_size);
    if (extensions_size > 0) {
        memcpy(client_hello->extensions, buffer + total_length, extensions_size);
        client_hello->extensions_length = extensions_size;
    } else {
        client_hello->extensions_length = 0;
    }


    *result = client_hello;
    return 0;
}

#endif
