module TLS_Client_Hello;

type tls_client_hello_msg :: record {
    client_version: uint16;
    random: bytes;  # 32 bytes
    session_id: bytes; # variable length, up to 32 bytes
    cookie: bytes; # variable length
    cipher_suites: vector[uint16];
    compression_methods: vector[uint8];
    extensions: vector[tls_extension];
};

type tls_extension :: record {
    extension_type: uint16;
    extension_data: bytes; # variable length
};

# Example of some common extensions (not exhaustive)
type extension_supported_versions :: record {
    versions: vector[uint16];
};

type extension_supported_groups :: record {
    groups: vector[uint16];
};

type extension_signature_algorithms :: record {
    algorithms: vector[uint16];
};

type extension_key_share :: record {
    key_shares: vector[key_share_entry];
};

type key_share_entry :: record {
    group: uint16;
    key_exchange: bytes;
};

type extension_pre_shared_key :: record {
    identities: vector[psk_identity];
};

type psk_identity :: record {
    identity: bytes;
    obfuscated_ticket_age: uint32;
};

type extension_extended_master_secret :: record {};
type extension_psk_key_exchange_modes :: record {
    modes: vector[uint8];
};

type extension_session_ticket :: record {
    ticket: bytes;
};

type extension_server_name :: record {
    server_name_type: uint8;
    server_name: string;
};

type extension_alpn_protocols :: record {
    protocols: vector[string];
};

type extension_status_request :: record {
    ocsp_responder_url: vector[string];
    request_extension: bytes;
};

type extension_ocsp_stapling :: record {};
type extension_signed_certificate_timestamp :: record {
    sct_list: vector[bytes];
};

type extension_supported_point_formats :: record {
    point_formats: vector[uint8];
};

type extension_heartbeat :: record {
    mode: uint8;
};

type extension_early_data :: record {
    max_early_data_size: uint32;
};
