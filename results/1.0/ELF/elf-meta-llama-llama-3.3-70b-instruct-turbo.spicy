module ELF;

type ElfClass: uint8 = {
  elf32 = 1,
  elf64 = 2
};

type OsAbi: uint8 = {
  system_v = 0,
  hpux = 1,
  netbsd = 2,
  linux = 3,
  solaris = 6,
  aix = 7,
  irix = 8,
  freebsd = 9,
  tru64 = 10,
  modesto = 11,
  openbsd = 12
};

type Type: uint16 = {
  et_none = 0,
  et_rel = 1,
  et_exec = 2,
  et_dyn = 3,
  et_core = 4
};

type Machine: uint16 = {
  mno = 0,
  mewe32100 = 1,
  msparc = 2,
  mimd = 3,
  mm68k = 4,
  mm88k = 5,
  m486 = 6,
  m860 = 7,
  mips = 8,
  ms370 = 9,
  mparisc = 10,
  msparc32plus = 11,
  migg = 12,
  mi486 = 13,
  mparisc64 = 14,
  mtic6x = 15,
  m68hc12 = 16,
  m68hc16 = 17,
  tms320c3 = 18,
  tms320c4 = 19,
  sparclet = 20,
  sparc2 = 21,
  s390 = 22,
  spu = 23,
  parisc64 = 24,
  v800 = 25,
  fr20 = 26,
  rh32 = 27,
  rce = 28,
  arm = 29,
  alpha = 30,
  superh = 31,
  sparcv9 = 32,
  tricore = 33,
  arc = 34,
  h8_300 = 35,
  h8_300h = 36,
  h8s = 37,
  h8_500 = 38,
  ia64 = 39,
  mipsx = 40,
  collagen = 41,
  ppc = 42,
  ppc64 = 43,
  s390x = 44,
  ipv4 = 45,
  ipv6 = 46,
  parisc = 47,
  ncpu = 48,
  ncpu32 = 49,
  st200 = 50,
  stpc = 51,
  st110 = 52,
  st120 = 53,
  tmm_gpp = 54,
  st9plus = 55,
  st7 = 56,
  st8 = 57,
  st19 = 58,
  trimedia = 59,
  cris = 60,
  crisv32 = 61,
  crisv64 = 62,
  fdp = 63,
  pdp10 = 64,
  pdp11 = 65,
  fx66 = 66,
  st9 = 67,
  st40 = 68,
  nv1 = 69,
  st8a = 70,
  um = 71,
  nios32 = 72,
  mn10300 = 73,
  mn10200 = 74,
  pjc = 75,
  openrisc = 76,
  arc_comp = 77,
  xstormy16 = 78,
  microblaze = 79,
  m32c = 80,
  xlr = 81,
  m16c = 82,
  uc16c = 83,
  dspic30f = 84,
  ceu = 85,
  sec33 = 86,
  sep = 87,
  cap = 88,
  n420 = 89,
  nds32 = 90,
  bare = 91,
  or1k = 92,
  csky = 93,
  archembedded = 94,
  pru = 95,
  avr = 96,
  frv = 97,
  mmp = 98,
  bfin = 99,
  tcanm16 = 100,
  msp430 = 101,
  blackfin = 102,
  sec2x = 103,
  mmdspp = 104,
  mmdsp60 = 105,
  pdsp = 106,
  packtp = 107,
  dsp16 = 108,
  epiphany = 109,
  adsp = 110,
  d10v = 111,
  d30v = 112,
  ts8bdc = 113,
  shel = 114,
  s3095 = 115,
  x86_64 = 116,
  lanai = 117,
  ce = 118,
  cr16c = 119,
  c4x = 120,
  chpphy = 121,
  m32r = 122,
  fido = 123,
  dsp24 = 124,
  amo = 125,
  dfp = 126,
  ce = 127,
  m32c_old = 128,
  v850 = 129,
  v850e = 130,
  tic4x = 131,
  tic54x = 132,
  tic6x = 133,
  parisc2_0 = 134,
  epiphany_3 = 135,
  tic6x64 = 136,
  hppa64 = 137,
  bpf = 138,
  riscv = 139,
  bt = 140,
  adx = 141,
  xcore = 142,
  nds32 = 143,
  allof = 144,
  f2mc16l = 145,
  leon = 146,
  leon2 = 147,
  leon3 = 148,
  c6x = 149,
  leupx = 150,
  dtiyle = 151,
  micro32 = 152,
  pruce = 153,
  mti = 154,
  dobe = 155,
  btgrav = 156,
  octagon = 157,
  xtensa = 158,
  um = 159,
  nios2 = 183,
  nios2_custom = 184,
  moxie = 188,
};

type SectionType: uint32 = {
  sht_null = 0,
  sht_progbits = 1,
  sht_symtab = 2,
  sht_strtab = 3,
  sht_rela = 4,
  sht_hash = 5,
  sht_dynamic = 6,
  sht_note = 7,
  sht_nobits = 8,
  sht_rel = 9,
  sht_shlib = 10,
  sht_dynsym = 11,
  sht_init_array = 12,
  sht_fin_array = 13,
  sht_preinit_array = 14,
  sht_group = 15,
  sht_symtab_shndx = 16,
};

type SectionFlags: uint32 = {
  shf_write = 0x00000001,
  shf_alloc = 0x00000002,
  shf_execinstruct = 0x00000004,
  shf_merge = 0x00000010,
  shf_strings = 0x00000020,
  shf_info_link = 0x00000040,
  shf_link_order = 0x00000080,
  shf_os_nonconforming = 0x00100000,
  shf_group = 0x00200000,
  shf_tls = 0x00400000,
  shf_maskos = 0x0ff00000,
  shf_maskproc = 0xf0000000,
};

type SymbolType: uint8 = {
  no_type = 0x0,
  object = 0x1,
  func = 0x2,
  section = 0x3,
  file = 0x4,
  common = 0x5,
  tls = 0x6,
  rel = 0x7,
  rela = 0x8,
  ifunc = 0x9,
};

type SymbolBinding: uint8 = {
  local_symbol = 0x0,
  global_symbol = 0x1,
  weak_symbol = 0x2,
  proc_linkage = 0x10,
};

type SegmentFlags: uint32 = {
  pf_x = 0x00000001,
  pf_w = 0x00000002,
  pf_r = 0x00000004,
  pf_maskos = 0x0ff00000,
  pf_maskproc = 0xf0000000,
};

type ProgramHeaderOffset: uint32 or uint64 = { };

type SectionHeaderOffset: uint32 or uint64 = { };

type ElfHeader: struct {
  magic: uint8[4],
  class: ElfClass,
  data: uint8,
  version: uint8,
  abi: OsAbi,
  abiversion: uint8,
  pad: uint8[7],
  type: Type,
  machine: Machine,
  version2: uint32,
  entry: uint32 or uint64,
  phoff: ProgramHeaderOffset,
  shoff: SectionHeaderOffset,
  flags: uint32,
  ehsize: uint16,
  phentsize: uint16,
  phnum: uint16,
  shentsize: uint16,
  shnum: uint16,
  shstrndx: uint16,
};

type SectionHeader: struct {
  name: uint32,
  type: SectionType,
  flags: SectionFlags,
  addr: uint32 or uint64,
  offset: uint32 or uint64,
  size: uint32 or uint64,
  link: uint32,
  info: uint32,
  addr_align: uint32 or uint64,
  entry_size: uint32 or uint64,
};

type Symbol: struct {
  name: uint32,
  value: uint32 or uint64,
  size: uint32 or uint64,
  info: uint8,
  other: uint8,
  shndx: uint16,
};

type RelocationEntry: struct {
  offset: uint32 or uint64,
  info: uint32 or uint64,
  addend: uint32 or uint64,
};

type ProgramHeader: struct {
  type: uint32,
  offset: uint32 or uint64,
  vaddr: uint32 or uint64,
  paddr: uint32 or uint64,
  filesz: uint32 or uint64,
  memsz: uint32 or uint64,
  flags: SegmentFlags,
  align: uint32 or uint64,
};

type Section: struct {
  header: SectionHeader,
  data: bytes,
};

type Elf: struct {
  elf_header: ElfHeader,
  sections: Section[0],
  program_headers: ProgramHeader[0],
  symbol_table: Symbol[0],
  relocation_entries: RelocationEntry[0],
};