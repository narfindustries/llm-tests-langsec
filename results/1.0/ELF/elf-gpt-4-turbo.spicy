module ELF;

public type ElfHeader = unit {
    magic:      bytes &size=4;          // Magic number (\x7FELF)
    ei_class:   uint8;                 // Class (32/64-bit)
    ei_data:    uint8;                 // Data encoding
    ei_version: uint8;                 // ELF header version
    osabi:      uint8;                 // OS/ABI identification
    abiversion: uint8;                 // ABI version
    pad:        bytes &size=7;         // Padding (should be ignored)

    e_type:      uint16;              // Object file type
    e_machine:   uint16;              // Machine type
    e_version:   uint32;              // Object file version
    e_entry:     uint64;              // Entry point address
    e_phoff:     uint64;              // Program header offset
    e_shoff:     uint64;              // Section header offset
    e_flags:     uint32;              // Processor-specific flags
    e_ehsize:    uint16;              // ELF header size
    e_phentsize: uint16;              // Program header entry size
    e_phnum:     uint16;              // Number of program header entries
    e_shentsize: uint16;              // Section header entry size
    e_shnum:     uint16;              // Number of section header entries
    e_shstrndx:  uint16;              // Section header string table index
};

public type ProgramHeader = unit {
    p_type:    uint32;               // Segment type
    p_flags:   uint32;               // Segment flags
    p_offset:  uint64;               // Segment file offset
    p_vaddr:   uint64;               // Virtual address in memory
    p_paddr:   uint64;               // Reserved
    p_filesz:  uint64;               // Size of segment in the file
    p_memsz:   uint64;               // Size of segment in memory
    p_align:   uint64;               // Segment alignment
};

public type SectionHeader = unit {
    sh_name:      uint32;           // Section name (index into string table)
    sh_type:      uint32;           // Section type
    sh_flags:     uint64;           // Section flags
    sh_addr:      uint64;           // Section virtual addr at execution
    sh_offset:    uint64;           // Section file offset
    sh_size:      uint64;           // Section size in bytes
    sh_link:      uint32;           // Link to another section
    sh_info:      uint32;           // Additional section information
    sh_addralign: uint64;           // Section alignment
    sh_entsize:   uint64;           // Entry size if section holds table
};

public type ELFFile = unit {
    header: ElfHeader;
    program_headers: ProgramHeader[] &size=header.e_phnum;
    section_headers: SectionHeader[] &size=header.e_shnum;
};