module HTTP;

public type HTTPVersion = unit {
    major: uint8;
    minor: uint8;
};

public type RequestLine = unit {
    method: bytes &until= b" ";
    uri: bytes &until= b" ";
    version: HTTPVersion;
    : skip to end;
};

public type ResponseLine = unit {
    version: HTTPVersion;
    code: uint16;
    reason: bytes &until= b"\r\n";
    : skip to end;
};

public type Header = unit {
    name: bytes &until= b":";
    _: bytes &size=1; // skip space
    value: bytes &until= b"\r\n";
};

public type Headers = unit {
    entries: Header[] &until= b"\r\n";
};

public type MessageBody = unit(length: uint) {
    content: bytes &size=length;
};

public type Chunk = unit { 
    size: bytes &until=b"\r\n";
    data: bytes &size=(parseSize(size) - 2);
    _: bytes &size=2; // CRLF
};

function parseSize(data: bytes): uint64 {
    return to_uint(parse(data, 16).data);
}

public type ChunkedBody = unit {
    chunks: Chunk[] &eod;
};

public type Request = unit {
    requestLine: RequestLine;
    headers: Headers;
    body: switch (findEncoding(headers)) {
        case "chunked": ChunkedBody;
        default: MessageBody(to_uint(findContentLength(headers)));
    };
};

public type Response = unit {
    responseLine: ResponseLine;
    headers: Headers;
    body: switch (findEncoding(headers)) {
        case "chunked": ChunkedBody;
        default: MessageBody(to_uint(findContentLength(headers)));
    };
};

function findEncoding(headers: Headers): string {
    for ( entry in headers.entries ) {
        if ( to_string(entry.name) == "Transfer-Encoding" ) {
            return to_string(entry.value);
        }
    }
    return "";
}

function findContentLength(headers: Headers): string {
    for ( entry in headers.entries ) {
        if ( to_string(entry.name) == "Content-Length" ) {
            return to_string(entry.value);
        }
    }
    return "0"; // Default value if Content-Length is not specified
}