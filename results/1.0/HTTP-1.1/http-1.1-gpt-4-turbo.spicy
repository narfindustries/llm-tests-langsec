module HTTP;

import spicy;

type HTTP_Method = enum {
    GET,
    POST,
    HEAD,
    PUT,
    DELETE,
    CONNECT,
    OPTIONS,
    TRACE,
    PATCH
};

type RequestLine = unit {
    method: HTTP_Method;
    uri: bytes &eod;
    version: bytes;
    
    on %init {
        self.version = b"HTTP/1.1";
    }
};

type StatusLine = unit {
    version: bytes;
    code: uint16;
    reason: bytes &eod;
    
    on %init {
        self.version = b"HTTP/1.1";
    }
};

type Header = unit {
    name: bytes &until=b":";
    value: bytes &eod;
};

type Headers = unit {
    entries: Header[] &eod;
};

type MessageBody = unit {
    body: bytes &size=self.length;
    length: uint64;
    
    on %init {
        self.length = self.length();  # capturing length might need to be hooked or predefined
    }
};

public type Request = unit {
    line: RequestLine;
    headers: Headers;
    body: optional<MessageBody>;
    
    on %init {
        if (self.headers.getHeader("Content-Length")) {
            self.body = MessageBody(length=uint64(self.headers.getHeader("Content-Length")));
        }
    }
};

public type Response = unit {
    status: StatusLine;
    headers: Headers;
    body: optional<MessageBody>;
    
    on %init {
        if (self.headers.getHeader("Content-Length")) {
            self.body = MessageBody(length=uint64(self.headers.getHeader("Content-Length")));
        }
    }
};

public type Connection = unit {
    is_orig: bool;
    requests: Request[] &optional;
    responses: Response[] &optional;
    on %done {
        if (self.is_orig) 
            print "Completed request from originator";
        else 
            print "Completed response from responder";
    }
};