module MQTT;

type mqtt_message = record {
  fixed_header = fixed_header,
  variable_header = variable_header,
  payload = bytes
}

type fixed_header = record {
  msg_type = uint4,
  dup = bool,
  qos = uint2,
  retain = bool
}

type variable_header = record {
  packet_identifier = uint16,
  properties = seq_of property
}

type property = record {
  id = uint8,
  value = bytes
}

type connack_properties = record {
  session_present = bool,
  connect_reason_code = uint8,
  assign_client_identifier = uint8,
  reason_string = string,
  user_properties = seq_of user_property,
  wildcard_subscription_available = bool,
  subscription_identifiers_available = bool,
  shared_subscription_available = bool,
  server_keep_alive = uint16,
  response_information = string,
  server_reference = string,
  authentication_method = string,
  authentication_data = bytes
}

type connect_properties = record {
  protocol_name = string,
  protocol_level = uint8,
  connect_flags = connect_flags,
  keep_alive = uint16,
  payload_format_indicator = bool,
  message_expiry_interval = uint32,
  topic_alias_maximum = uint16,
  request_response_information = uint8,
  request_problem_information = uint8,
  user_properties = seq_of user_property,
  authentication_method = string,
  authentication_data = bytes,
  will_properties = will_properties
}

type user_property = record {
  name = string,
  value = string
}

type puback_properties = record {
  reason_code = uint8,
  properties = seq_of property
}

type pubrec_properties = record {
  reason_code = uint8,
  properties = seq_of property
}

type pubrel_properties = record {
  reason_code = uint8,
  properties = seq_of property
}

type pubcomp_properties = record {
  reason_code = uint8,
  properties = seq_of property
}

type publish_properties = record {
  payload_format_indicator = bool,
  message_expiry_interval = uint32,
  topic_alias = uint16,
  request_response_information = uint8,
  request_problem_information = uint8,
  user_properties = seq_of user_property,
  subscription_identifier = uint32,
  content_type = string,
  correlation_data = bytes,
  response_topic = string,
  response_payload = bytes
}

type suback_properties = record {
  reason_code = uint8,
  reason_string = string,
  user_properties = seq_of user_property
}

type subscribe_properties = record {
  subscription_identifier = uint32,
  user_properties = seq_of user_property
}

type unsubscribe_properties = record {
  user_properties = seq_of user_property
}

type disconnect_properties = record {
  session_expiration_interval = uint32,
  server_reference = string,
  reason_string = string,
  user_properties = seq_of user_property
}

type will_properties = record {
  payload_format_indicator = bool,
  message_expiry_interval = uint32,
  content_type = string,
  response_topic = string,
  correlation_data = bytes,
  user_properties = seq_of user_property
}

type auth_properties = record {
  reason_code = uint8,
  authentication_method = string,
  authentication_data = bytes,
  reason_string = string,
  user_properties = seq_of user_property
}

type connect_flags = record {
  username = bool,
  password = bool,
  will_retain = bool,
  will_qos = uint2,
  will_flag = bool,
  clean_start = bool
}

let mqtt_parser = $(choice {
  connect_msg = record {
    fixed_header = fixed_header,
    variable_header = record {
      protocol_name = string,
      protocol_level = uint8,
      connect_flags = connect_flags,
      keep_alive = uint16,
      payload_format_indicator = bool,
      message_expiry_interval = uint32,
      topic_alias_maximum = uint16,
      request_response_information = uint8,
      request_problem_information = uint8,
      user_properties = seq_of user_property,
      authentication_method = string,
      authentication_data = bytes,
      will_properties = will_properties
    },
    payload = bytes
  },
  connack_msg = record {
    fixed_header = fixed_header,
    variable_header = record {
      session_present = bool,
      connect_reason_code = uint8,
      assign_client_identifier = uint8,
      reason_string = string,
      user_properties = seq_of user_property,
      wildcard_subscription_available = bool,
      subscription_identifiers_available = bool,
      shared_subscription_available = bool,
      server_keep_alive = uint16,
      response_information = string,
      server_reference = string,
      authentication_method = string,
      authentication_data = bytes
    },
    payload = bytes
  },
  publish_msg = record {
    fixed_header = fixed_header,
    variable_header = record {
      topic_name = string,
      packet_identifier = uint16,
      payload_format_indicator = bool,
      message_expiry_interval = uint32,
      topic_alias = uint16,
      request_response_information = uint8,
      request_problem_information = uint8,
      user_properties = seq_of user_property,
      subscription_identifier = uint32,
      content_type = string,
      correlation_data = bytes,
      response_topic = string,
      response_payload = bytes
    },
    payload = bytes
  },
  puback_msg = record {
    fixed_header = fixed_header,
    variable_header = record {
      packet_identifier = uint16,
      reason_code = uint8,
      properties = seq_of property
    },
    payload = bytes
  },
  pubrec_msg = record {
    fixed_header = fixed_header,
    variable_header = record {
      packet_identifier = uint16,
      reason_code = uint8,
      properties = seq_of property
    },
    payload = bytes
  },
  pubrel_msg = record {
    fixed_header = fixed_header,
    variable_header = record {
      packet_identifier = uint16,
      reason_code = uint8,
      properties = seq_of property
    },
    payload = bytes
  },
  pubcomp_msg = record {
    fixed_header = fixed_header,
    variable_header = record {
      packet_identifier = uint16,
      reason_code = uint8,
      properties = seq_of property
    },
    payload = bytes
  },
  subscribe_msg = record {
    fixed_header = fixed_header,
    variable_header = record {
      packet_identifier = uint16,
      subscription_identifier = uint32,
      user_properties = seq_of user_property
    },
    payload = bytes
  },
  suback_msg = record {
    fixed_header = fixed_header,
    variable_header = record {
      packet_identifier = uint16,
      reason_code = uint8,
      reason_string = string,
      user_properties = seq_of user_property
    },
    payload = bytes
  },
  unsubscribe_msg = record {
    fixed_header = fixed_header,
    variable_header = record {
      packet_identifier = uint16,
      user_properties = seq_of user_property
    },
    payload = bytes
  },
  disconnect_msg = record {
    fixed_header = fixed_header,
    variable_header = record {
      session_expiration_interval = uint32,
      server_reference = string,
      reason_string = string,
      user_properties = seq_of user_property
    },
    payload = bytes
  },
  auth_msg = record {
    fixed_header = fixed_header,
    variable_header = record {
      reason_code = uint8,
      authentication_method = string,
      authentication_data = bytes,
      reason_string = string,
      user_properties = seq_of user_property
    },
    payload = bytes
  }
})