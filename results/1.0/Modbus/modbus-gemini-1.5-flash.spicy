module Modbus;

type ModbusRequest {
    uint16 transaction_id;
    uint16 protocol_id;
    uint16 length;
    uint8 unit_id;
    uint8 function_code;
    ModbusData data;
}

type ModbusResponse {
    uint16 transaction_id;
    uint16 protocol_id;
    uint16 length;
    uint8 unit_id;
    uint8 function_code;
    ModbusData data;
}

type ModbusData {
    read_coils: ModbusReadCoils;
    read_discrete_inputs: ModbusReadDiscreteInputs;
    read_holding_registers: ModbusReadHoldingRegisters;
    read_input_registers: ModbusReadInputRegisters;
    write_single_coil: ModbusWriteSingleCoil;
    write_single_register: ModbusWriteSingleRegister;
    write_multiple_coils: ModbusWriteMultipleCoils;
    write_multiple_registers: ModbusWriteMultipleRegisters;
    exception_code: optional uint8;
}


type ModbusReadCoils {
    uint16 starting_address;
    uint16 quantity;
    bytes byte_data;
}

type ModbusReadDiscreteInputs {
    uint16 starting_address;
    uint16 quantity;
    bytes byte_data;
}

type ModbusReadHoldingRegisters {
    uint16 starting_address;
    uint16 quantity;
    [uint16] registers;
}

type ModbusReadInputRegisters {
    uint16 starting_address;
    uint16 quantity;
    [uint16] registers;
}


type ModbusWriteSingleCoil {
    uint16 address;
    bool value;
}


type ModbusWriteSingleRegister {
    uint16 address;
    uint16 value;
}

type ModbusWriteMultipleCoils {
    uint16 starting_address;
    uint16 quantity;
    bytes byte_data;
}


type ModbusWriteMultipleRegisters {
    uint16 starting_address;
    uint16 quantity;
    [uint16] registers;
}
