module Modbus;

import spicy;

public type ModbusFrame = unit {
    slave_address: uint8;
    function_code: uint8
        where $$ >= 0x01 && $$ <= 0x17;

    switch ( function_code ) {
        0x01 -> read_coils: ReadCoilsRequest;
        0x02 -> read_discrete_inputs: ReadDiscreteInputsRequest;
        0x03 -> read_holding_registers: ReadHoldingRegistersRequest;
        0x04 -> read_input_registers: ReadInputRegistersRequest;
        0x05 -> write_single_coil: WriteSingleCoilRequest;
        0x06 -> write_single_register: WriteSingleRegisterRequest;
        0x0F -> write_multiple_coils: WriteMultipleCoilsRequest;
        0x10 -> write_multiple_registers: WriteMultipleRegistersRequest;
        0x17 -> read_write_multiple_registers: ReadWriteMultipleRegistersRequest;
    };

    crc: uint16;
};

type ReadCoilsRequest = unit {
    starting_address: uint16;
    quantity: uint16 where $$ >= 1 && $$ <= 2000;
};

type ReadDiscreteInputsRequest = unit {
    starting_address: uint16;
    quantity: uint16 where $$ >= 1 && $$ <= 2000;
};

type ReadHoldingRegistersRequest = unit {
    starting_address: uint16;
    quantity: uint16 where $$ >= 1 && $$ <= 125;
};

type ReadInputRegistersRequest = unit {
    starting_address: uint16;
    quantity: uint16 where $$ >= 1 && $$ <= 125;
};

type WriteSingleCoilRequest = unit {
    coil_address: uint16;
    coil_value: uint16 where $$ == 0x0000 || $$ == 0xFF00;
};

type WriteSingleRegisterRequest = unit {
    register_address: uint16;
    register_value: uint16;
};

type WriteMultipleCoilsRequest = unit {
    starting_address: uint16;
    quantity: uint16 where $$ >= 1 && $$ <= 2000;
    byte_count: uint8;
    coil_values: bytes(byte_count);
};

type WriteMultipleRegistersRequest = unit {
    starting_address: uint16;
    quantity: uint16 where $$ >= 1 && $$ <= 125;
    byte_count: uint8;
    register_values: bytes(byte_count);
};

type ReadWriteMultipleRegistersRequest = unit {
    read_starting_address: uint16;
    read_quantity: uint16 where $$ >= 1 && $$ <= 125;
    write_starting_address: uint16;
    write_quantity: uint16 where $$ >= 1 && $$ <= 125;
    write_byte_count: uint8;
    write_register_values: bytes(write_byte_count);
};

type ErrorResponse = unit {
    exception_code: uint8;
};