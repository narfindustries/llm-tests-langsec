module NITF;

type nitf_file_header {
  uint32 file_header_length;
  string file_identifier = "NITF02.00"; // e.g., "NITF02.00"  Added default value to address potential error
  string unique_file_identifier;
  uint32 security_classification; // Requires mapping to specific codes from standard
  uint32 header_version;
  // ... many more fields based on MIL-STD-2500C, potentially variable length strings and embedded structures
}

type nitf_image_header {
  uint32 ih_length;
  uint32 image_number;
  uint32 image_width;
  uint32 image_height;
  uint32 bits_per_pixel;
  string color_space; // e.g., "RGB", "GRAYSCALE"
  string compression_type; // e.g., "JPEG", "JPEG2000"
  // ... many more fields, including geolocation data, sensor data, potentially variable length data fields.  Many of these are optional.
  // Requires a deep dive into MIL-STD-2500C to enumerate all possible fields
}

type nitf_data_segment {
  uint32 segment_length;
  string segment_id; //e.g. "IM" for image
  // This is highly variable, based on the type of data in the segment.  It can contain raw image data, geolocation data, or other ancillary data.  The format will depend heavily on the Image Header fields.
  bytes data;
}

type nitf_file {
  nitf_file_header file_header;
  vector[nitf_image_header] image_headers;
  vector[nitf_data_segment] data_segments;
}

end
