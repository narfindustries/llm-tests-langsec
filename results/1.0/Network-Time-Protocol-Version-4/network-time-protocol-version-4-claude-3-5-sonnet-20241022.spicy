module NTP;

public type Header = unit {
    flags: uint8 {
        self.li = (flags >> 6) & 0x03;
        self.vn = (flags >> 3) & 0x07;
        self.mode = flags & 0x07;
    }
    stratum: uint8;
    poll: int8;
    precision: int8;
    root_delay: int32;
    root_dispersion: uint32;
    reference_id: bytes &size=4;
    reference_timestamp: NTPTimestamp;
    origin_timestamp: NTPTimestamp;
    receive_timestamp: NTPTimestamp;
    transmit_timestamp: NTPTimestamp;
    extension_fields: ExtensionField[] &until-including=false;
    mac: MAC &if=$$;

    var li: uint8;
    var vn: uint8;
    var mode: uint8;
};

type NTPTimestamp = unit {
    seconds: uint32;
    fraction: uint32;
};

type ExtensionField = unit {
    field_type: uint16;
    length: uint16;
    value: bytes &size=self.length - 4;
    padding: bytes &size=(4 - (self.length % 4)) % 4;
};

type MAC = unit {
    key_id: uint32;
    digest: bytes &eod;
};

const LI_NO_WARNING = 0;
const LI_LAST_MINUTE_61 = 1;
const LI_LAST_MINUTE_59 = 2;
const LI_ALARM = 3;

const MODE_RESERVED = 0;
const MODE_SYMMETRIC_ACTIVE = 1;
const MODE_SYMMETRIC_PASSIVE = 2;
const MODE_CLIENT = 3;
const MODE_SERVER = 4;
const MODE_BROADCAST = 5;
const MODE_CONTROL = 6;
const MODE_PRIVATE = 7;