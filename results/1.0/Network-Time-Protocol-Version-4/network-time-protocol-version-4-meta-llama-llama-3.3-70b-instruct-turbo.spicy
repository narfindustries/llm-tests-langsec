module NetworkTimeProtocolVersion4;

type NTP = Record {
  leap_indicator: uint2;
  version_number: uint3;
  mode: uint3;
  stratum: uint8;
  poll: uint8;
  precision: int8;
  root_delay: uint32;
  root_dispersion: uint32;
  reference_identifier: bytestring &length=4;
  reference_timestamp: uint64;
  origin_timestamp: uint64;
  receive_timestamp: uint64;
  transmit_timestamp: uint64;
}

type NTPExtension = Record {
  field_type: uint16;
  field_length: uint16;
  value: bytestring &length=.field_length;
}

type NTPOptionalFields = Record {
  key_identifier: uint32;
  duplicate_detection: uint32;
}

type NTPPacket = Record {
  header: NTP;
  extensions: vector of NTPExtension;
  optional_fields: NTPOptionalFields;
}

type NTPPacketWithOptionalExtensions = Record {
  header: NTP;
  extensions: vector of (NTPExtension | NTPOptionalFields);
}

let ntp_spec = NTPPacket;
let ntp_spec_with_optional_extensions = NTPPacketWithOptionalExtensions;

exports {
  NTP = NTP;
  NTPExtension = NTPExtension;
  NTPOptionalFields = NTPOptionalFields;
  NTPPacket = NTPPacket;
  ntp_spec = ntp_spec;
  NTPPacketWithOptionalExtensions = NTPPacketWithOptionalExtensions;
  ntp_spec_with_optional_extensions = ntp_spec_with_optional_extensions;
}