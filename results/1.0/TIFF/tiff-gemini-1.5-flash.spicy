module TIFF;

type tiff_header {
	uint16 byte_order;
	uint16 magic_number;
}

type tiff_ifd {
	uint32 num_entries;
	ifd_entry[num_entries] ifd_entries;
}

type ifd_entry {
	uint16 tag;
	uint16 type;
	uint32 count;
    value value_data;
}

type value {
	switch (type) {
		case 1: // BYTE
			uint8[count] bytes;
		case 2: // ASCII
			string ascii;
		case 3: // SHORT
			uint16[count] shorts;
		case 4: // LONG
			uint32[count] longs;
		case 5: // RATIONAL
			rational[count] rationals;
		case 6: // SBYTE
			int8[count] sbytes;
		case 7: // UNDEFINED
			uint8[count] undefined;
		case 8: // SSHORT
			int16[count] sshorts;
		case 9: // SLONG
			int32[count] slongs;
		case 10: // SRATIONAL
			srational[count] srational;
		case 11: // FLOAT
			float32[count] floats;
		case 12: // DOUBLE
			float64[count] doubles;
		default:
			uint8[0]; // Handle unknown types
	}
}

type rational {
	uint32 numerator;
	uint32 denominator;
}

type srational {
	int32 numerator;
	int32 denominator;
}

type tiff {
	tiff_header header;
	uint32 ifd_offset;
	tiff_ifd ifd;
	// Potentially multiple IFDs linked through "NextIFD" tag

	//Optional: Add support for Exif, GPS, IPTC, XMP, etc. as nested structures
}
