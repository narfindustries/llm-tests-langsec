module DICOM;

type DicomHeader = unit {
    preamble: bytes &size=128;
    magic: bytes &size=4 == b"DICM";

    patient_name: string &optional;
    patient_id: string &optional;
    patient_birth_date: time &optional;
    patient_sex: enum { Male, Female, Other } &optional;
    patient_age: uint16 &optional;

    study_instance_uid: string &optional;
    study_date: time &optional;
    study_time: time &optional;
    accession_number: string &optional;
    referring_physician: string &optional;

    series_instance_uid: string &optional;
    series_number: uint32 &optional;
    modality: enum { 
        ComputedTomography, 
        MagneticResonance, 
        Ultrasound, 
        XRayAngiography 
    } &optional;
    series_description: string &optional;

    sop_instance_uid: string &optional;
    image_number: uint32 &optional;
    rows: uint16;
    columns: uint16;
    pixel_spacing: real[] &optional;
    bits_allocated: uint8 &optional;
    pixel_representation: enum { Unsigned, Signed } &optional;

    transfer_syntax: enum { 
        ExplicitVR, 
        ImplicitVR 
    } &optional;

    endian: enum { 
        LittleEndian, 
        BigEndian 
    } &optional;
};

function parse(data: bytes): DicomHeader {
    return DicomHeader(data);
}

type DicomFile = unit {
    header: DicomHeader;
};

public type DICOM = unit {
    file: DicomFile;
};

public function parse_dicom(data: bytes): DICOM {
    return DICOM(data);
}