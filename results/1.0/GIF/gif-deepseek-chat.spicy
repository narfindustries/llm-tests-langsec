module GIF;

import spicy;

type GIFHeader = unit {
    signature: bytes &size=3;
    version: bytes &size=3;
};

type LogicalScreenDescriptor = unit {
    width: uint16;
    height: uint16;
    packed_fields: uint8;
    background_color_index: uint8;
    pixel_aspect_ratio: uint8;
};

type ColorTableEntry = unit {
    red: uint8;
    green: uint8;
    blue: uint8;
};

type ColorTable = unit {
    entries: ColorTableEntry[] &until($input.size() == 0);
};

type ImageDescriptor = unit {
    left_position: uint16;
    top_position: uint16;
    width: uint16;
    height: uint16;
    packed_fields: uint8;
};

type GIFImage = unit {
    descriptor: ImageDescriptor;
    local_color_table: ColorTable &if(descriptor.packed_fields & 0x80);
    image_data: bytes &size=(descriptor.width * descriptor.height);
};

type GIFTrailer = unit {
    trailer: uint8;
};

type GIF = unit {
    header: GIFHeader;
    logical_screen_descriptor: LogicalScreenDescriptor;
    global_color_table: ColorTable &if(logical_screen_descriptor.packed_fields & 0x80);
    images: GIFImage[];
    trailer: GIFTrailer;
};

on GIF::header::signature {
    if ( self.signature != b"GIF" )
        throw InvalidFormat("Invalid GIF signature");
}

on GIF::header::version {
    if ( self.version != b"89a" && self.version != b"87a" )
        throw InvalidFormat("Unsupported GIF version");
}

on GIF::logical_screen_descriptor::packed_fields {
    if ( (self.packed_fields & 0x80) == 0x80 ) {
        local_color_table_size = 2 << (self.packed_fields & 0x07);
    }
}

on GIF::ImageDescriptor::packed_fields {
    if ( (self.packed_fields & 0x80) == 0x80 ) {
        local_color_table_size = 2 << (self.packed_fields & 0x07);
    }
}

on GIF::trailer::trailer {
    if ( self.trailer != 0x3B )
        throw InvalidFormat("Invalid GIF trailer");
}

export GIF;