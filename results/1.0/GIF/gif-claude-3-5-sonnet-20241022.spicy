module GIF;

public type Header = unit {
    signature: bytes &size=3;
    version: bytes &size=3;
    screen_width: uint16;
    screen_height: uint16;
    packed_field: uint8;
    background_color_index: uint8;
    pixel_aspect_ratio: uint8;

    var global_color_table_flag: bool;
    var color_resolution: uint8;
    var sort_flag: bool;
    var global_color_table_size: uint8;

    on packed_field {
        self.global_color_table_flag = (self.packed_field & 0x80) != 0;
        self.color_resolution = (self.packed_field & 0x70) >> 4;
        self.sort_flag = (self.packed_field & 0x08) != 0;
        self.global_color_table_size = self.packed_field & 0x07;
    }
};

type RGB = unit {
    r: uint8;
    g: uint8;
    b: uint8;
};

type GlobalColorTable = unit {
    colors: RGB[] &count=self.size;

    var size: uint32;

    on %init {
        self.size = 1 << (parent.header.global_color_table_size + 1);
    }
};

type GraphicControlExtension = unit {
    introducer: uint8 &requires=0x21;
    label: uint8 &requires=0xF9;
    block_size: uint8 &requires=0x04;
    packed_field: uint8;
    delay_time: uint16;
    transparent_color_index: uint8;
    terminator: uint8 &requires=0x00;

    var disposal_method: uint8;
    var user_input_flag: bool;
    var transparency_flag: bool;

    on packed_field {
        self.disposal_method = (self.packed_field & 0x1C) >> 2;
        self.user_input_flag = (self.packed_field & 0x02) != 0;
        self.transparency_flag = (self.packed_field & 0x01) != 0;
    }
};

type SubBlock = unit {
    block_size: uint8;
    data: bytes &size=self.block_size if self.block_size > 0;
};

type DataSubBlocks = unit {
    blocks: SubBlock[] &while(peek_uint8(0) != 0);
    terminator: uint8 &requires=0x00;
};

type CommentExtension = unit {
    introducer: uint8 &requires=0x21;
    label: uint8 &requires=0xFE;
    sub_blocks: DataSubBlocks;
};

type PlainTextExtension = unit {
    introducer: uint8 &requires=0x21;
    label: uint8 &requires=0x01;
    block_size: uint8 &requires=0x0C;
    text_grid_left: uint16;
    text_grid_top: uint16;
    text_grid_width: uint16;
    text_grid_height: uint16;
    cell_width: uint8;
    cell_height: uint8;
    fg_color_index: uint8;
    bg_color_index: uint8;
    sub_blocks: DataSubBlocks;
};

type ApplicationExtension = unit {
    introducer: uint8 &requires=0x21;
    label: uint8 &requires=0xFF;
    block_size: uint8 &requires=0x0B;
    identifier: bytes &size=8;
    auth_code: bytes &size=3;
    sub_blocks: DataSubBlocks;
};

type ImageDescriptor = unit {
    separator: uint8 &requires=0x2C;
    left: uint16;
    top: uint16;
    width: uint16;
    height: uint16;
    packed_field: uint8;

    var local_color_table_flag: bool;
    var interlace_flag: bool;
    var sort_flag: bool;
    var local_color_table_size: uint8;

    on packed_field {
        self.local_color_table_flag = (self.packed_field & 0x80) != 0;
        self.interlace_flag = (self.packed_field & 0x40) != 0;
        self.sort_flag = (self.packed_field & 0x20) != 0;
        self.local_color_table_size = self.packed_field & 0x07;
    }
};

type LocalColorTable = unit {
    colors: RGB[] &count=self.size;

    var size: uint32;

    on %init {
        self.size = 1 << (parent.descriptor.local_color_table_size + 1);
    }
};

type ImageData = unit {
    lzw_minimum_code_size: uint8;
    sub_blocks: DataSubBlocks;
};

type Extension = unit {
    introducer: uint8 &requires=0x21;
    label: uint8;
    
    switch ( self.label ) {
        0xF9 -> gce: GraphicControlExtension;
        0xFE -> ce: CommentExtension;
        0x01 -> pte: PlainTextExtension;
        0xFF -> ae: ApplicationExtension;
    };
};

type ImageBlock = unit {
    descriptor: ImageDescriptor;
    local_color_table: LocalColorTable if self.descriptor.local_color_table_flag;
    image_data: ImageData;
};

type Block = unit {
    switch {
        -> img: ImageBlock if (peek_uint8(0) == 0x2C);
        -> ext: Extension if (peek_uint8(0) == 0x21);
    };
};

public type GIF = unit {
    header: Header;
    global_color_table: GlobalColorTable if self.header.global_color_table_flag;
    blocks: Block[] &while(peek_uint8(0) != 0x3B);
    trailer: uint8 &requires=0x3B;
};