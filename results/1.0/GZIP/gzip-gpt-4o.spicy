module GZIP;

type GZIP = unit {
    # Fixed header
    id1: uint8 &requires (self == 0x1F);
    id2: uint8 &requires (self == 0x8B);

    # Compression method
    compression_method: uint8 &requires (self == 0x08);

    # Flags
    flags: Flags;

    # Modification time
    mtime: uint32;

    # Extra flags
    xfl: uint8;

    # Operating System
    os: OperatingSystem;

    # Optional fields
    extra: ExtraData &if (flags.has_extra);
    original_filename: OriginalFilename &if (flags.has_name);
    comment: Comment &if (flags.has_comment);
    header_crc16: uint16 &if (flags.has_crc);

    # Compressed data
    compressed_data: bytes;

    # Trailer
    crc32: uint32;
    isize: uint32;
};

type Flags = unit {
    reserved: uint8 &bits=3; # Reserved bits
    has_crc: bool;  # FHCRC, bit 1
    has_extra: bool; # FEXTRA, bit 2
    has_name: bool;  # FNAME, bit 3
    has_comment: bool; # FCOMMENT, bit 4
    padding: uint8 &bits=3;
};

enum OperatingSystem: uint8 {
    FAT = 0x00,
    Amiga = 0x01,
    VMS = 0x02,
    Unix = 0x03,
    VMCMS = 0x04,
    AtariTOS = 0x05,
    HPFS = 0x06,
    Macintosh = 0x07,
    ZSystem = 0x08,
    CPM = 0x09,
    TOPS20 = 0x0A,
    NTFS = 0x0B,
    QDOS = 0x0C,
    AcornRISCOS = 0x0D,
    Unknown = 0xFF
};

type ExtraData = unit {
    length: uint16;
    data: bytes &size= length;
};

type OriginalFilename = unit {
    name: bytes &until= 0x00;
};

type Comment = unit {
    text: bytes &until= 0x00;
};