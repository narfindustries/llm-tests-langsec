module SQLite3;

import spicy;

public type FileHeader = struct {
    magic: bytes &size=16;
    page_size: uint16;
    file_format_write_version: uint8;
    file_format_read_version: uint8;
    reserved_space: uint8;
    max_embedded_payload_fraction: uint8;
    min_embedded_payload_fraction: uint8;
    leaf_payload_fraction: uint8;
    file_change_counter: uint32;
    database_size_pages: uint32;
    first_freelist_trunk_page: uint32;
    total_freelist_pages: uint32;
    schema_cookie: uint32;
    schema_format: uint32;
    default_page_cache_size: uint32;
    largest_root_page: uint32;
    text_encoding: uint32;
    user_version: uint32;
    incremental_vacuum_mode: uint32;
};

public type PageType = enum {
    INDEX_INTERIOR = 0x02,
    TABLE_INTERIOR = 0x05,
    INDEX_LEAF = 0x0A,
    TABLE_LEAF = 0x0D
};

public type SerialType = enum {
    NULL = 0,
    INT8 = 1,
    INT16 = 2,
    INT24 = 3,
    INT32 = 4,
    INT48 = 5,
    INT64 = 6,
    FLOAT64 = 7,
    ZERO = 8,
    ONE = 9
};

public type RecordHeader = struct {
    header_length: uint64;
    serial_types: vector<SerialType>;
};

public type Record = struct {
    header: RecordHeader;
    values: vector<bytes>;
};

public type Page = struct {
    type: PageType;
    records: vector<Record>;
};

public type SQLite3Database = struct {
    header: FileHeader;
    pages: vector<Page>;
};

public type Parser = parser {
    sink = bytes;
    type = SQLite3Database;
    
    method parse(data: bytes): SQLite3Database {
        local db: SQLite3Database;
        db.header = self.parse_file_header(data[0:100]);
        db.pages = self.parse_pages(data[100:]);
        return db;
    }

    method parse_file_header(data: bytes): FileHeader {
        local header: FileHeader;
        return header;
    }

    method parse_pages(data: bytes): vector<Page> {
        local pages: vector<Page>;
        return pages;
    }
};

public function parse(data: bytes): SQLite3Database {
    local parser = Parser(data);
    return parser.parse(data);
}