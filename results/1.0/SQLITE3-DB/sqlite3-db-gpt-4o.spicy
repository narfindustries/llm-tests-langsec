module SQLite3DB;

type SQLite3FileHeader = unit {
    magic: bytes &size=16 &requires=(magic == "SQLite format 3\000");
    page_size: uint16;
    write_version: uint8;
    read_version: uint8;
    reserved_space: uint8;
    max_embedded_payload_fraction: uint8;
    min_embedded_payload_fraction: uint8;
    leaf_payload_fraction: uint8;
    file_change_counter: uint32;
    in_header_database_size: uint32;
    first_freelist_trunk_page: uint32;
    total_freelist_pages: uint32;
    schema_cookie: uint32;
    schema_format_number: uint32 &requires=(schema_format_number == 1 || schema_format_number == 2 || schema_format_number == 3 || schema_format_number == 4);
    default_page_cache_size: uint32;
    largest_root_btree_page_number: uint32;
    database_text_encoding: uint32 &requires=(database_text_encoding == 1 || database_text_encoding == 2 || database_text_encoding == 3);
    user_version: uint32;
    incremental_vacuum_mode: uint32;
    application_id: uint32;
    reserved_for_expansion: bytes &size=20;
    version_valid_for: uint32;
    sqlite_version_number: uint32;
};

type BTreePageHeader = unit {
    page_type: uint8 &requires=(page_type == 0x02 || page_type == 0x05 || page_type == 0x0A || page_type == 0x0D);
    first_freeblock_offset: uint16;
    num_cells: uint16;
    start_of_cell_content_area: uint16;
    fragmented_free_bytes: uint8;
    rightmost_pointer: optional uint32 &optional = (page_type == 0x02 || page_type == 0x05);
};

type SQLite3DBFile = unit {
    header: SQLite3FileHeader;
    # Placeholder for page parsing, dependent on header page size
    # pages: [BTreePage] &size=header.in_header_database_size; 
};