module SQLITE3;

public type Database = unit {
    header: Header;
    pages: Page[] &size=self.header.db_size_pages;
};

type Header = unit {
    magic: bytes &size=16;
    page_size: uint16;
    file_format_write_version: uint8;
    file_format_read_version: uint8;
    reserved_space: uint8;
    max_payload_fraction: uint8;
    min_payload_fraction: uint8;
    leaf_payload_fraction: uint8;
    file_change_counter: uint32;
    db_size_pages: uint32;
    first_freelist_trunk_page: uint32;
    freelist_pages: uint32;
    schema_cookie: uint32;
    schema_format: uint32;
    default_page_cache_size: uint32;
    largest_root_btree: uint32;
    text_encoding: uint32;
    user_version: uint32;
    vacuum_status: uint32;
    application_id: uint32;
    reserved: bytes &size=20;
    version_valid: uint32;
    sqlite_version: uint32;
};

type BTPageHeader = unit {
    page_type: uint8;
    first_freeblock: uint16;
    cell_count: uint16;
    cell_content_offset: uint16;
    fragmented_free_bytes: uint8;
    right_child: uint32 if (self.page_type == 2 || self.page_type == 5);
};

type Varint = unit {
    value: bytes &until=$$ <= 0x80;
};

type TableInteriorCell = unit {
    left_child: uint32;
    key: Varint;
};

type TableLeafCell = unit {
    payload_size: Varint;
    row_id: Varint;
    payload: bytes &size=self.payload_size;
};

type IndexInteriorCell = unit {
    left_child: uint32;
    payload_size: Varint;
    payload: bytes &size=self.payload_size;
};

type IndexLeafCell = unit {
    payload_size: Varint;
    payload: bytes &size=self.payload_size;
};

type OverflowPage = unit {
    next_page: uint32;
    data: bytes &size=self.context.page_size - 4;
};

type FreelistTrunkPage = unit {
    next_trunk_page: uint32;
    leaf_count: uint32;
    leaf_pages: uint32[self.leaf_count];
};

type PointerMapEntry = unit {
    entry_type: uint8;
};

type Page = unit {
    header: BTPageHeader;
    cells: bytes &size=self.context.page_size - 8 - (self.header.page_type == 2 || self.header.page_type == 5 ? 4 : 0);
};

on Header::magic %done {
    if ( self.magic != b"SQLite format 3\x00" )
        print "Invalid SQLite magic";
}

on Header::page_size %done {
    if ( self.page_size != 0 && (self.page_size < 512 || self.page_size > 32768 || (self.page_size & (self.page_size - 1)) != 0) )
        print "Invalid page size";
}

on Header::text_encoding %done {
    if ( self.text_encoding != 1 && self.text_encoding != 2 && self.text_encoding != 3 )
        print "Invalid text encoding";
}