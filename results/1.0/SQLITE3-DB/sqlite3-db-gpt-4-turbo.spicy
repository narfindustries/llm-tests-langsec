module SQLite;

type FileHeader = unit {
    magic:          bytes &size=16;
    pageSize:       uint16;
    writeVersion:   uint8;
    readVersion:    uint8;
    reservedSpace:  uint8;
    maxPayloadFrac: uint8;
    minPayloadFrac: uint8;
    leafPayloadFrac:uint8;
    changeCounter:  uint32;
    sizeInPages:    uint32;
    firstFreelistPage: uint32;
    numFreelistPages: uint32;
    schemaCookie:   uint32;
    schemaFormat:   uint32;
    defaultCacheSize: uint32;
    largestBTreePage:  uint32;
    encoding:       uint32;
    userVersion:    uint32;
    vacuumMode:     uint32;
    appID:          uint32;
    reserved:       bytes &size=20;
    versionValidFor: uint32;
    sqliteVersion:  uint32;
};

type BTreePageHeader = unit {
    pageType:       uint8;
    firstFreeblock: uint16;
    numCells:       uint16;
    startOfContent: uint16;
    fragmentedFreeBytes: uint8;
};

type CellPointers = unit {
    pointers: [uint16] &size;
};

type Cell = unit {
    leftChildPage: optional<uint32>;
    payload: optional<Record>;
    rowid: optional<UVarint>;
    isTableLeaf: bool, 
    isLeaf: bool,
    isTableInterior: bool;

    on %init {
        isTableLeaf = (self.$.header.pageType == 0x0D);
        isLeaf = (self.$.header.pageType == 0x0D || self.$.header.pageType == 0x0A);
        isTableInterior = (self.$.header.pageType == 0x05);

        if (isTableInterior) {
            self.leftChildPage = uint32(self);
        }
      
        if (isLeaf) {
            self.payload = Record(self);
        }

        if (isTableLeaf) {
            self.rowid = UVarint(self);
        }
    }
};

public type Record = unit {
    header:         RecordHeader;
    columns:        [ColumnData] &size=this.header.columnSizes.length();
};

public type RecordHeader = unit {
    hdrSize:        UVarint;
    columnSizes:    [SerialType];
};

type ColumnData = unit {
    data: bytes &size;
};

type BTreePage = unit {
    header: BTreePageHeader;
    cellPointers:   CellPointers;
    cells:          [Cell] &size=this.header.numCells;
};

public type SerialType = unit {
    value: varint;
};

public type UVarint = unit {
    value: varint;
};

type Database = unit {
    header: FileHeader;
    pages: [BTreePage] &size=this.header.sizeInPages - 1;
};

public type SQLiteDB = unit {
    db: Database;
};