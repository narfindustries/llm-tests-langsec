module SQLite3;

public type Varint = unit {
    value: uint64;
};

public type MagicHeader = unit {
    magic: bytes &size=16 &requires=($$ == b"SQLite format 3\x00");
};

public type Header = unit {
    page_size: uint16 &requires=($$ == 1 || ($$ >= 512 && $$ <= 65536 && ($$ & ($$ - 1)) == 0));
    write_version: uint8;
    read_version: uint8;
    reserved_space: uint8;
    max_payload_fraction: uint8;
    min_payload_fraction: uint8;
    leaf_payload_fraction: uint8;
    file_change_counter: uint32;
    database_size_in_pages: uint32;
    first_freelist_page: uint32;
    number_of_freelist_pages: uint32;
    schema_cookie: uint32;
    schema_format_number: uint32;
    default_page_cache_size: uint32;
    largest_root_b_tree_page: uint32;
    text_encoding: uint32 &requires=($$ == 1 || $$ == 2 || $$ == 3);
    user_version: uint32;
    incremental_vacuum_mode: uint32;
    application_id: uint32;
    reserved: bytes &size=20 &requires=($$ == b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00");
    version_valid_for: uint32;
    sqlite_version_number: uint32;
};

public type BTreePage = unit {
    page_type: uint8 &requires=($$ == 2 || $$ == 5 || $$ == 10 || $$ == 13);
    number_of_cells: uint16;
    start_of_cell_content_area: uint16;
    right_child_pointer: uint32 if (self.page_type == 2 || self.page_type == 5);
};

public type TableLeafCell = unit {
    row_id: Varint;
    payload_size: Varint;
    payload: bytes &size=self.payload_size.value;
    overflow_page: uint32 if (self.payload_size.value > self.context.header.max_payload_fraction * self.context.header.page_size);
};

public type TableInteriorCell = unit {
    left_child: uint32;
    row_id: Varint;
};

public type IndexLeafCell = unit {
    key: Varint;
};

public type IndexInteriorCell = unit {
    left_child: uint32;
    key: Varint;
};

public type Cell = unit {
    table_leaf_cell: TableLeafCell if (self.context.btree_page.page_type == 13);
    table_interior_cell: TableInteriorCell if (self.context.btree_page.page_type == 5);
    index_leaf_cell: IndexLeafCell if (self.context.btree_page.page_type == 10);
    index_interior_cell: IndexInteriorCell if (self.context.btree_page.page_type == 2);
};

public type Page = unit {
    btree_page: BTreePage;
    cells: Cell[self.btree_page.number_of_cells];
};

public type SQLite3File = unit {
    magic_header: MagicHeader;
    header: Header;
    pages: Page[self.header.database_size_in_pages];
};