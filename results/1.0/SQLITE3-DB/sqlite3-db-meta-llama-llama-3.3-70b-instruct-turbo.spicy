module SQLite3DB;

type DatabaseHeader = struct {
  magic: by!tes(tring, 16) = "SQLite format 3\x00";
  file_format_write_version: u!int8;
  file_format_read_version: u!int8;
  reserved_space_1: u!int16 = 0;
  max_page_size: u!int16;
  file_change_counter: u!int32;
  database_size: u!int32;
  reserved_space_2: by!tes(tring, 20) = "\x00" * 20;
  version_valid_for_number: u!int32;
  sqlite_version_number: u!int32;
  version_valid_for: u!int32;
};

type PageType = enum {
  Pilde = 0;
  RootPage = 1;
  InternalPage = 2;
  LeafPage = 3;
  OverflowPage = 4;
  FreePage = 5;
};

type Page = struct {
  page_type: PageType;
  first_freeblock: u!int16;
  primary_page_number: u!int32;
  number_of_cells: u!int16;
  start_of_content_area: u!int16;
  fragmented_free_bytes: u!int8;
};

type BtreePage = struct {
  page_number: u!int32;
  right_child_page_number: u!int32;
  cell_offset_array: array[u!int16];
};

type Cell = struct {
  length_of_payload: u!int8;
  number_of_columns: u!int8;
  column_data: array[u!int8];
  payload: by!tes(tring);
};

type OverflowPage = struct {
  next_overflow_page_number: u!int32;
  data_area: by!tes(tring);
};

type FreePage = struct {
  next_free_page_number: u!int32;
  number_of_cells: u!int16;
};

type SQLITE3Page = union {
  page: Page;
  btree_page: BtreePage;
  cell: Cell;
  overflow_page: OverflowPage;
  free_page: FreePage;
};

type SQLITE3DB = struct {
  header: DatabaseHeader;
  pages: array[SQLITE3Page];
};