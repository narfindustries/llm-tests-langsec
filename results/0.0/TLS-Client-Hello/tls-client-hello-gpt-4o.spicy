module TLSClientHello;

import spicy;
import zeek;

public type ClientHello = unit {
    record_version: uint16;
    random: bytes &size=32;
    session_id_length: uint8;
    session_id: bytes &size=session_id_length;
    cipher_suites_length: uint16;
    cipher_suites: bytes &size=cipher_suites_length;
    compression_methods_length: uint8;
    compression_methods: bytes &size=compression_methods_length;
    extensions_length: uint16;
    extensions: bytes &size=extensions_length;
};

public type TLSHandshake = unit {
    handshake_type: uint8;
    length: uint24;
    body: case handshake_type {
        1 => ClientHello,
        // Add other handshake types here if needed
    };
};

public type TLSRecord = unit {
    content_type: uint8;
    version: uint16;
    length: uint16;
    handshake: TLSHandshake &if (content_type == 22);
};

public module TLSClientHelloAnalyzer = global {
    export {
        type Analyzer = unit {
            : TLSRecord;
        };
    }
};

event zeek_init() {
    Spicy::register_analyzer(
        Analyzer::TLSClientHelloAnalyzer::Analyzer,
        "TLSClientHello",
        "tcp"
    );
}