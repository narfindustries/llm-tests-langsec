module TLS;

public type ClientHello = unit {
    legacy_version: bytes &size=2;
    random: bytes &size=32;
    legacy_session_id_length: uint8;
    legacy_session_id: bytes &size=self.legacy_session_id_length;
    cipher_suites_length: uint16;
    cipher_suites: bytes &size=self.cipher_suites_length;
    compression_methods_length: uint8;
    compression_methods: bytes &size=self.compression_methods_length;
    extensions_length: uint16;
    extensions: bytes &size=self.extensions_length;
};

type Extension = unit {
    extension_type: uint16;
    extension_length: uint16;
    extension_data: bytes &size=self.extension_length;
};

type SupportedVersions = unit {
    supported_versions_length: uint8;
    versions: bytes &size=self.supported_versions_length;
};

type SignatureAlgorithms = unit {
    supported_signature_algorithms_length: uint16;
    signature_algorithms: bytes &size=self.supported_signature_algorithms_length;
};

type SupportedGroups = unit {
    supported_groups_length: uint16;
    supported_groups: bytes &size=self.supported_groups_length;
};

type KeyShare = unit {
    client_shares_length: uint16;
    client_shares: bytes &size=self.client_shares_length;
};

type KeyShareEntry = unit {
    group: uint16;
    key_exchange_length: uint16;
    key_exchange: bytes &size=self.key_exchange_length;
};

type ServerName = unit {
    server_name_list_length: uint16;
    server_name_list: bytes &size=self.server_name_list_length;
};

type ServerNameEntry = unit {
    name_type: uint8;
    name_length: uint16;
    host_name: bytes &size=self.name_length;
};

type PSKKeyExchangeModes = unit {
    psk_ke_modes_length: uint8;
    ke_modes: bytes &size=self.psk_ke_modes_length;
};

type PreSharedKey = unit {
    identities_length: uint16;
    identities: bytes &size=self.identities_length;
    binders_length: uint16;
    binders: bytes &size=self.binders_length;
};

type Cookie = unit {
    cookie_length: uint16;
    cookie: bytes &size=self.cookie_length;
};

public type TLSHandshake = unit {
    msg_type: uint8;
    length: bytes &size=3;
    client_hello: ClientHello if (self.msg_type == 1);
};