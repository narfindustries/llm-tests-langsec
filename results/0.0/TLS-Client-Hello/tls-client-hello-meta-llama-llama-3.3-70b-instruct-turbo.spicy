module TLSClientHello;

type ProtocolVersion = uint16[2] little-endian;

type Random = byte[32];

type opaque = byte;

type ExtensionType = uint16 little-endian;

type Extension = struct {
  extension_type: ExtensionType;
  extension_length: uint16 little-endian;
  extension_data: opaque;
};

type Extensions = vector of Extension;

type ServerNameExtension = struct {
  server_name_type: uint8;
  server_name_length: uint16 little-endian;
  server_name: opaque;
};

type SupportedGroupsExtension = struct {
  groups_list_length: uint16 little-endian;
  supported_groups: vector of uint16;
};

type KeyShareEntry = struct {
  group: uint16 little-endian;
  key_exchange_length: uint16 little-endian;
  key_exchange: opaque;
};

type KeyShareExtension = struct {
  client_shares_length: uint16 little-endian;
  client_shares: vector of KeyShareEntry;
};

type PreSharedKeyIdentity = struct {
  identity_length: uint16 little-endian;
  identity: opaque;
  obfuscated_ticket_age: uint32 little-endian;
};

type PreSharedKeyExtension = struct {
  identities_length: uint16 little-endian;
  identities: vector of PreSharedKeyIdentity;
  binders_length: uint16 little-endian;
  binders: opaque;
};

type EarlyDataExtension = struct {
  max_early_data_size: uint32 little-endian;
};

type ClientHello = struct {
  legacy_version: ProtocolVersion;
  random: Random;
  legacy_session_id: opaque;
  legacy_compression_methods: opaque;
  supported_versions: vector of ProtocolVersion;
  extensions: Extensions;
};

let client_hello = ClientHello;