module BitcoinTransaction;

public type VarInt = unit {
    var value: uint64;

    on %init {
        local first_byte = self.input.peek<uint8>();
        if ( first_byte < 0xfd ) {
            self.value = self.input.read<uint8>();
        }
        else if ( first_byte == 0xfd ) {
            self.input.skip(1);
            self.value = self.input.read<uint16>();
        }
        else if ( first_byte == 0xfe ) {
            self.input.skip(1);
            self.value = self.input.read<uint32>();
        }
        else {
            self.input.skip(1);
            self.value = self.input.read<uint64>();
        }
    }
};

public type Script = unit {
    var length: VarInt;
    var script: bytes &restofdata;
};

public type Input = unit {
    var prev_tx_hash: bytes &length=32;
    var output_index: uint32;
    var script_sig: Script;
    var sequence: uint32;
};

public type Output = unit {
    var value: uint64;
    var script_pub_key: Script;
};

public type Transaction = unit {
    var version: uint32;
    var input_count: VarInt;
    var inputs: Input[] &length=input_count.value;
    var output_count: VarInt;
    var outputs: Output[] &length=output_count.value;
    var locktime: uint32;
};