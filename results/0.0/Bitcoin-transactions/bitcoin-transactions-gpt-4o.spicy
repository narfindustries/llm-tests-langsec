module BitcoinTransactions;

import spicy;

public type BitcoinTransaction = unit {
    version: uint32;
    input_count: varint;
    inputs: array[input_count] of Input;
    output_count: varint;
    outputs: array[output_count] of Output;
    lock_time: uint32;
};

type varint = unit {
    value: uint64 &convert=to_varint;
} &byteorder=le;

function to_varint(bytes: bytes): uint64 {
    local first_byte = bytes[0];
    if ( first_byte < 0xfd )
        return first_byte;
    else if ( first_byte == 0xfd )
        return bytes[1:3].to_uint16();
    else if ( first_byte == 0xfe )
        return bytes[1:5].to_uint32();
    else
        return bytes[1:9].to_uint64();
}

public type Input = unit {
    previous_output: OutPoint;
    script_length: varint;
    script: bytes &length=script_length.value;
    sequence: uint32;
};

public type OutPoint = unit {
    hash: bytes &length=32;
    index: uint32;
};

public type Output = unit {
    value: int64;
    script_length: varint;
    script: bytes &length=script_length.value;
};

public module Parser = spicy::Parser for BitcoinTransaction {
    on %done {
        print fmt("Parsed Bitcoin transaction: version=%d, inputs=%d, outputs=%d, lock_time=%d",
                  self.version, self.input_count, self.output_count, self.lock_time);
    }
}