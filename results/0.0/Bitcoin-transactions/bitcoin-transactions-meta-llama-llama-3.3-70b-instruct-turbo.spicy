module Bitcoin;

type Int32 = int;
type Int64 = int;
type ByteSequence = string;

type VarInt = int;

type Opcode = enum {
  OP_0,
  OP_1,
  OP_2,
  OP_3,
  OP_4,
  OP_5,
  OP_6,
  OP_7,
  OP_8,
  OP_9,
  OP_10,
  OP_11,
  OP_12,
  OP_13,
  OP_14,
  OP_15,
  OP_16,
  OP_NOP,
  OP_IF,
  OP_NOTIF,
  OP_VER,
  OP_VERNOTIF,
  OP_ELSE,
  OP_ENDIF,
  OP_VERIFY,
  OP_RETURN
};

type Script = record {
  opcodes: array[*] of Opcode;
  data: array[*] of ByteSequence;
};

type TxIn = record {
  txid: ByteSequence;
  vout: Int32;
  scriptSig: Script;
  sequence: Int32;
};

type TxOut = record {
  value: Int64;
  scriptPubKey: Script;
};

type Transaction = record {
  version: Int32;
  tx_in_count: VarInt;
  tx_in: array[tx_in_count] of TxIn;
  tx_out_count: VarInt;
  tx_out: array[tx_out_count] of TxOut;
  lock_time: Int32;
};

type BlockHeader = record {
  version: Int32;
  prev_block: ByteSequence;
  merkle_root: ByteSequence;
  timestamp: Int32;
  target: Int32;
  nonce: Int32;
};

type Block = record {
  block_header: BlockHeader;
  transaction_count: VarInt;
  transactions: array[transaction_count] of Transaction;
};