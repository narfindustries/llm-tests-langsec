module Bitcoin;

type uint_var : uint8 {
    var len: uint8 = $$;
    var value: uint64 = len < 253 ? len : len == 253 ? uint16 : len == 254 ? uint32 : uint64;
};

public type TxIn = unit {
    prev_output: TxOutRef;
    script_len: uint_var;
    script_sig: bytes &size=script_len.value;
    sequence: uint32;
};

public type TxOut = unit {
    value: uint64;
    script_len: uint_var;
    script_pub_key: bytes &size=script_len.value;
};

public type TxOutRef = unit {
    hash: bytes &size=32;
    index: uint32;
};

public type BitcoinTransaction = unit {
    version: int32;
    in_count: uint_var;
    inputs: TxIn[] &size=in_count.value;
    out_count: uint_var;
    outputs: TxOut[] &size=out_count.value;
    lock_time: uint32;
};

public type BitcoinBlock = unit {
    magic: uint32;
    block_size: uint32;
    version: int32;
    prev_block: bytes &size=32;
    merkle_root: bytes &size=32;
    timestamp: uint32;
    bits: uint32;
    nonce: uint32;
    tx_count: uint_var;
    transactions: BitcoinTransaction[] &size=tx_count.value;
};