module Bitcoin;

public type Transaction = unit {
    version: int32;
    var has_witness: bool;
    marker: uint8 if ( self.has_witness );
    flag: uint8 if ( self.has_witness );
    input_count: VarInt;
    inputs: Input[self.input_count.value];
    output_count: VarInt;
    outputs: Output[self.output_count.value];
    witness_data: WitnessData[self.input_count.value] if ( self.has_witness );
    locktime: uint32;

    on %init {
        self.has_witness = False;
    }
};

type VarInt = unit {
    prefix: uint8;
    var value: uint64;

    on prefix {
        if ( self.prefix < 0xfd )
            self.value = self.prefix;
        else switch ( self.prefix ) {
            0xfd -> self.value = self.value16;
            0xfe -> self.value = self.value32;
            0xff -> self.value = self.value64;
        }
    }

    value16: uint16 if ( self.prefix == 0xfd );
    value32: uint32 if ( self.prefix == 0xfe );
    value64: uint64 if ( self.prefix == 0xff );
};

type Input = unit {
    prev_tx_hash: bytes &size=32;
    prev_tx_index: uint32;
    script_length: VarInt;
    script_sig: bytes &size=self.script_length.value;
    sequence: uint32;
};

type Output = unit {
    value: uint64;
    script_length: VarInt;
    script_pubkey: bytes &size=self.script_length.value;
};

type WitnessData = unit {
    item_count: VarInt;
    items: WitnessItem[self.item_count.value];
};

type WitnessItem = unit {
    length: VarInt;
    data: bytes &size=self.length.value;
};