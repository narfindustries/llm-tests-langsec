module ZIP;

public type LocalFileHeader = unit {
    signature: bytes &size=4;
    version_needed: uint16;
    flags: uint16;
    compression_method: uint16;
    last_mod_time: uint16;
    last_mod_date: uint16;
    crc32: bytes &size=4;
    compressed_size: uint32;
    uncompressed_size: uint32;
    filename_length: uint16;
    extra_field_length: uint16;
    filename: bytes &size=self.filename_length;
    extra_field: bytes &size=self.extra_field_length &optional;
    compressed_data: bytes &size=self.compressed_size;
};

public type CentralDirectoryHeader = unit {
    signature: bytes &size=4;
    version_made_by: uint16;
    version_needed: uint16;
    flags: uint16;
    compression_method: uint16;
    last_mod_time: uint16;
    last_mod_date: uint16;
    crc32: bytes &size=4;
    compressed_size: uint32;
    uncompressed_size: uint32;
    filename_length: uint16;
    extra_field_length: uint16;
    comment_length: uint16;
    disk_number_start: uint16;
    internal_attrs: uint16;
    external_attrs: uint32;
    local_header_offset: uint32;
    filename: bytes &size=self.filename_length;
    extra_field: bytes &size=self.extra_field_length &optional;
    comment: bytes &size=self.comment_length &optional;
};

public type EndOfCentralDirectory = unit {
    signature: bytes &size=4;
    disk_number: uint16;
    central_dir_disk: uint16;
    disk_entries: uint16;
    total_entries: uint16;
    central_dir_size: uint32;
    central_dir_offset: uint32;
    comment_length: uint16;
    comment: bytes &size=self.comment_length &optional;
};

public type DataDescriptor = unit {
    crc32: bytes &size=4;
    compressed_size: uint32;
    uncompressed_size: uint32;
};

public type ZIP = unit {
    files: LocalFileHeader[];
    central_dirs: CentralDirectoryHeader[];
    end_of_central_dir: EndOfCentralDirectory;
};

on LocalFileHeader::signature -> bool {
    return self.signature == b"\x50\x4b\x03\x04";
}

on CentralDirectoryHeader::signature -> bool {
    return self.signature == b"\x50\x4b\x01\x02";
}

on EndOfCentralDirectory::signature -> bool {
    return self.signature == b"\x50\x4b\x05\x06";
}