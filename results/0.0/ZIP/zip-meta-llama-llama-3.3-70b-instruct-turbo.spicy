# ZIP file format parser

type ZipFile = record {
    local_file_header: LocalFileHeader,
    file_data: bytestring &length = local_file_header.compressed_size,
    data_descriptor: optional DataDescriptor,
    central_directory: CentralDirectory,
};

type LocalFileHeader = record {
    signature: uint32 &default = 0x04034b50,
    version_needed: uint16,
    flags: uint16,
    compression_method: uint16,
    last_mod_time: uint16,
    last_mod_date: uint16,
    crc32: uint32,
    compressed_size: uint32,
    uncompressed_size: uint32,
    filename_length: uint16,
    extra_field_length: uint16,
    filename: bytestring &length = filename_length,
    extra_field: bytestring &length = extra_field_length,
};

type DataDescriptor = record {
    signature: uint32 &default = 0x08074b50,
    crc32: uint32,
    compressed_size: uint32,
    uncompressed_size: uint32,
};

type CentralDirectory = record {
    signature: uint32 &default = 0x02014b50,
    version_made_by: uint16,
    version_needed: uint16,
    flags: uint16,
    compression_method: uint16,
    last_mod_time: uint16,
    last_mod_date: uint16,
    crc32: uint32,
    compressed_size: uint32,
    uncompressed_size: uint32,
    filename_length: uint16,
    extra_field_length: uint16,
    file_comment_length: uint16,
    disk_number_start: uint16,
    internal_file_attributes: uint16,
    external_file_attributes: uint32,
    local_header_offset: uint32,
    filename: bytestring &length = filename_length,
    extra_field: bytestring &length = extra_field_length,
    file_comment: bytestring &length = file_comment_length,
};

type EndOfCentralDirectory = record {
    signature: uint32 &default = 0x06054b50,
    disk_number: uint16,
    central_directory_disk_number: uint16,
    central_directory_entries_on_disk: uint16,
    central_directory_entries_total: uint16,
    central_directory_size: uint32,
    central_directory_offset: uint32,
    comment_length: uint16,
    comment: bytestring &length = comment_length,
};

let zip_file = ZipFile();