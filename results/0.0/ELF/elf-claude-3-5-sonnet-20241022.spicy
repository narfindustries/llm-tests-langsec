module ELF;

public type ELFFile = unit {
    magic: bytes &size=4 &requires=($$ == b"\x7fELF");
    ei_class: uint8 &requires=($$ == 1 || $$ == 2);
    ei_data: uint8 &requires=($$ == 1 || $$ == 2);
    ei_version: uint8 &requires=($$ == 1);
    ei_osabi: uint8;
    ei_abiversion: uint8;
    ei_pad: bytes &size=7;
    e_type: uint16;
    e_machine: uint16;
    e_version: uint32;
    
    switch ( self.ei_class ) {
        1 -> elf32: ELF32Header;
        2 -> elf64: ELF64Header;
    };
};

type ELF32Header = unit {
    e_entry: uint32;
    e_phoff: uint32;
    e_shoff: uint32;
    e_flags: uint32;
    e_ehsize: uint16;
    e_phentsize: uint16;
    e_phnum: uint16;
    e_shentsize: uint16;
    e_shnum: uint16;
    e_shstrndx: uint16;
    
    program_headers: Program32Header[self.e_phnum] if (self.e_phoff != 0);
    section_headers: Section32Header[self.e_shnum] if (self.e_shoff != 0);
};

type ELF64Header = unit {
    e_entry: uint64;
    e_phoff: uint64;
    e_shoff: uint64;
    e_flags: uint32;
    e_ehsize: uint16;
    e_phentsize: uint16;
    e_phnum: uint16;
    e_shentsize: uint16;
    e_shnum: uint16;
    e_shstrndx: uint16;
    
    program_headers: Program64Header[self.e_phnum] if (self.e_phoff != 0);
    section_headers: Section64Header[self.e_shnum] if (self.e_shoff != 0);
};

type Program32Header = unit {
    p_type: uint32;
    p_offset: uint32;
    p_vaddr: uint32;
    p_paddr: uint32;
    p_filesz: uint32;
    p_memsz: uint32;
    p_flags: uint32;
    p_align: uint32;
};

type Program64Header = unit {
    p_type: uint32;
    p_flags: uint32;
    p_offset: uint64;
    p_vaddr: uint64;
    p_paddr: uint64;
    p_filesz: uint64;
    p_memsz: uint64;
    p_align: uint64;
};

type Section32Header = unit {
    sh_name: uint32;
    sh_type: uint32;
    sh_flags: uint32;
    sh_addr: uint32;
    sh_offset: uint32;
    sh_size: uint32;
    sh_link: uint32;
    sh_info: uint32;
    sh_addralign: uint32;
    sh_entsize: uint32;
};

type Section64Header = unit {
    sh_name: uint32;
    sh_type: uint32;
    sh_flags: uint64;
    sh_addr: uint64;
    sh_offset: uint64;
    sh_size: uint64;
    sh_link: uint32;
    sh_info: uint32;
    sh_addralign: uint64;
    sh_entsize: uint64;
};

type Symbol32Entry = unit {
    st_name: uint32;
    st_value: uint32;
    st_size: uint32;
    st_info: uint8;
    st_other: uint8;
    st_shndx: uint16;
};

type Symbol64Entry = unit {
    st_name: uint32;
    st_info: uint8;
    st_other: uint8;
    st_shndx: uint16;
    st_value: uint64;
    st_size: uint64;
};