module DNS;

type uint4 = uint16;
type uint16 = uint16;
type uint32 = uint32;
type uint3 = uint16;

type Header = struct {
  id: uint16,
  qr: bool,
  opcode: uint4,
  aa: bool,
  tc: bool,
  rd: bool,
  ra: bool,
  z: uint3,
  rcode: uint4,
  qdcount: uint16,
  ancount: uint16,
  nscount: uint16,
  arcount: uint16,
};

type Question = struct {
  qname: DomainName,
  qtype: uint16,
  qclass: uint16,
};

type RR = struct {
  name: DomainName,
  type: uint16,
  class: uint16,
  ttl: uint32,
  rdlength: uint16,
  rdata: bytestring &length = rdlength,
};

type DNSMessage = struct {
  header: Header,
  questions: Question[header.qdcount],
  answers: RR[header.ancount],
  authorities: RR[header.nscount],
  additionals: RR[header.arcount],
};

type DomainName = bytestring;

function decompress_domain_name(s: bytestring): string {
  var result = "";
  var pos = 0;
  while pos < length(s) {
    var len = s[pos];
    pos += 1;
    if len == 0 {
      break;
    } else if len >= 192 {
      var offset = (s[pos] << 8) | s[pos + 1];
      pos += 2;
      result += decompress_domain_name(s[offset:]);
      break;
    } else {
      result += string(s[pos:pos + len]) + ".";
      pos += len;
    }
  }
  return result[:-1];
}