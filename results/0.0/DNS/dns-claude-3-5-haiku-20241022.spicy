module DNS;

import spicy;

public type Header = struct {
    transaction_id: uint16;
    flags: Flags;
    question_count: uint16;
    answer_count: uint16;
    authority_count: uint16;
    additional_count: uint16;
} &byteorder=spicy::ByteOrder::Network;

public type Flags = struct {
    qr: bool;
    opcode: uint4;
    aa: bool;
    tc: bool;
    rd: bool;
    ra: bool;
    z: uint3;
    rcode: uint4;
} &bit-order = spicy::BitOrder::MSB;

public type DomainName = struct {
    labels: vector<Label>;
};

public type Label = struct {
    length: uint8;
    name: bytes &size=(self.length < 64 ? self.length : 0);
    pointer: optional<uint16>;
};

public type Question = struct {
    name: DomainName;
    qtype: uint16;
    qclass: uint16;
};

public type ResourceRecord = struct {
    name: DomainName;
    type: uint16;
    class: uint16;
    ttl: uint32;
    rdlength: uint16;
    rdata: bytes &size=self.rdlength;
};

public type DNSMessage = struct {
    header: Header;
    questions: vector<Question> &count=self.header.question_count;
    answers: vector<ResourceRecord> &count=self.header.answer_count;
    authorities: vector<ResourceRecord> &count=self.header.authority_count;
    additionals: vector<ResourceRecord> &count=self.header.additional_count;
};

public function parse(data: bytes) : DNSMessage {
    return parse_dns_message(data);
}