module DNS;

import spicy;

public type Message = unit {
    header: Header;
    questions: Question[header.qdcount];
    answers: ResourceRecord[header.ancount];
    authorities: ResourceRecord[header.nscount];
    additionals: ResourceRecord[header.arcount];
};

type Header = unit {
    id: uint16;
    : bitfield(16) {
        qr: 0..0;
        opcode: 1..4;
        aa: 5..5;
        tc: 6..6;
        rd: 7..7;
        ra: 8..8;
        z: 9..11;
        rcode: 12..15;
    };
    qdcount: uint16;
    ancount: uint16;
    nscount: uint16;
    arcount: uint16;
};

type Question = unit {
    name: Name;
    qtype: uint16;
    qclass: uint16;
};

type ResourceRecord = unit {
    name: Name;
    type_: uint16;
    class: uint16;
    ttl: uint32;
    rdlength: uint16;
    rdata: bytes &size=self.rdlength;
};

type Label = unit {
    length: uint8;
    switch ( self.length ) {
        0 -> : void;
        0xc0..0xff -> pointer: uint8;
        * -> label: bytes &size=self.length;
    };
};

type Name = unit {
    labels: Label[] &until($$.length == 0 || ($$.length & 0xc0) == 0xc0);
};

public type Type = enum {
    A = 1,
    NS = 2,
    MD = 3,
    MF = 4,
    CNAME = 5,
    SOA = 6,
    MB = 7,
    MG = 8,
    MR = 9,
    NULL = 10,
    WKS = 11,
    PTR = 12,
    HINFO = 13,
    MINFO = 14,
    MX = 15,
    TXT = 16,
    AAAA = 28,
    AXFR = 252,
    MAILB = 253,
    MAILA = 254,
    ANY = 255
};

public type Class = enum {
    IN = 1,
    CS = 2,
    CH = 3,
    HS = 4,
    ANY = 255
};

public type Opcode = enum {
    QUERY = 0,
    IQUERY = 1,
    STATUS = 2
};

public type Rcode = enum {
    NOERROR = 0,
    FORMERR = 1,
    SERVFAIL = 2,
    NXDOMAIN = 3,
    NOTIMP = 4,
    REFUSED = 5
};