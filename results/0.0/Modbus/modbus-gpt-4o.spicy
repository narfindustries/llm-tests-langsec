module Modbus;

type ModbusMessage = unit {
    transaction_id: uint16;  # Only for Modbus TCP
    protocol_id: uint16;     # Only for Modbus TCP, should be 0x0000
    length: uint16;          # Only for Modbus TCP
    unit_id: uint8;          # Only for Modbus TCP
    function_code: uint8;
    body: bytes;
};

type ReadRequest = unit {
    starting_address: uint16;
    quantity: uint16;
};

type WriteSingleCoilRequest = unit {
    output_address: uint16;
    value: uint16;  # 0x0000 for OFF, 0xFF00 for ON
};

type WriteSingleRegisterRequest = unit {
    register_address: uint16;
    value: uint16;
};

type WriteMultipleCoilsRequest = unit {
    starting_address: uint16;
    quantity_of_outputs: uint16;
    byte_count: uint8;
    output_values: bytes &size=byte_count;
};

type WriteMultipleRegistersRequest = unit {
    starting_address: uint16;
    quantity_of_registers: uint16;
    byte_count: uint8;
    register_values: bytes &size=byte_count;
};

type ExceptionResponse = unit {
    exception_code: uint8;
};

type ModbusRTUMessage = unit {
    address: uint8;
    function_code: uint8;
    body: bytes;
    crc: uint16;
};

type ModbusASCIIMessage = unit {
    start: uint8 &assert(start == 0x3A);  # ASCII ':'
    address: uint8;
    function_code: uint8;
    body: bytes;
    lrc: uint8;
    end: uint16 &assert(end == 0x0D0A);  # ASCII CRLF
};