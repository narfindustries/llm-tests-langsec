module Modbus;

import spicy;

type Header = unit {
    transactionID: uint16;
    protocolID: uint16;
    length: uint16;
    unitID: uint8;
};

type FunctionCode = enum {
    READ_COILS = 1,
    READ_DISCRETE_INPUTS = 2,
    READ_HOLDING_REGISTERS = 3,
    READ_INPUT_REGISTERS = 4,
    WRITE_SINGLE_COIL = 5,
    WRITE_SINGLE_REGISTER = 6,
    WRITE_MULTIPLE_COILS = 15,
    WRITE_MULTIPLE_REGISTERS = 16,
    OTHER = 255
};

type Request = unit {
    header: Header;
    functionCode: FunctionCode;
    data: bytes &size=this.header.length - 1;
};

type Response = unit {
    header: Header;
    functionCode: FunctionCode;
    data: bytes &size=this.header.length - 1;
};

type ModbusTCP = unit {
    request: Request;
    response: Response;
};

type ModbusRTU = unit {
    address: uint8;
    functionCode: FunctionCode;
    data: bytes &eod;
    crc: uint16;
};

public type ModbusProtocol = unit {
    conn: spicy::connection;
    isTCP: bool;

    on %init {
        self.isTCP = self.conn.isTCP();
    }

    on %done {
        if (self.isTCP)
            print "Modbus TCP transaction completed.";
        else
            print "Modbus RTU transaction completed.";
    }

    switch (self.isTCP) {
        true -> modbusTCP: ModbusTCP;
        false -> modbusRTU: ModbusRTU;
    };
};