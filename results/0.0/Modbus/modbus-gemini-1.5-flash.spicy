module Modbus;

type FunctionCode = uint8 {
	ReadCoils = 0x01,
	ReadDiscreteInputs = 0x02,
	ReadHoldingRegisters = 0x03,
	ReadInputRegisters = 0x04,
	WriteSingleCoil = 0x05,
	WriteSingleRegister = 0x06,
	WriteMultipleCoils = 0x0F,
	WriteMultipleRegisters = 0x10,
	ReportServerId = 0x11
};

record ModbusPDU {
	uint16 transaction_id;
	uint16 protocol_id;
	uint16 length;
	uint8 unit_id;
	FunctionCode function_code;
	
	optional ReadHoldingRegistersData read_holding_registers;
	optional WriteMultipleRegistersData write_multiple_registers;
	optional ReadCoilsData read_coils;
	optional WriteSingleCoilData write_single_coil;
	optional ReadDiscreteInputsData read_discrete_inputs;
	optional WriteSingleRegisterData write_single_register;
	optional WriteMultipleCoilsData write_multiple_coils;
	optional ReadInputRegistersData read_input_registers;
	optional ReportServerIdData report_server_id;
	optional uint8 exception_code;
};

record ReadHoldingRegistersData {
	uint16 starting_address;
	uint16 quantity;
	uint16[quantity] data;
};

record WriteMultipleRegistersData {
	uint16 starting_address;
	uint16 quantity;
	uint16[quantity] data;
};

record ReadCoilsData {
	uint16 starting_address;
	uint16 quantity;
	bytes data;
};

record WriteSingleCoilData {
	uint16 output_address;
	bool coil_value;
};

record ReadDiscreteInputsData {
	uint16 starting_address;
	uint16 quantity;
	bytes data;
};

record WriteSingleRegisterData {
	uint16 register_address;
	uint16 register_value;
};

record WriteMultipleCoilsData {
	uint16 starting_address;
	uint16 quantity;
	bytes data;
};

record ReadInputRegistersData {
	uint16 starting_address;
	uint16 quantity;
	uint16[quantity] data;
};

record ReportServerIdData {
	uint8[length] data;
};

end
