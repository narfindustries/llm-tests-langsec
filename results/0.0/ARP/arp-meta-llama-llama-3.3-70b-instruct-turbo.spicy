module ARP;

type ARP_HTYPE = enum {
  Ethernet_10Mb = 1,
  Experimental_Ethernet_3Mb = 2,
  Amateur_Radio_AX_25 = 3,
  Proteon_ProNET_Token_Ring = 4,
  Chaos = 5,
  IEEE_802_Networks = 6,
  ARCNET = 7,
  Hyperchannel = 8,
  Lanstar = 9,
  Autonet_Short_Address = 10,
  LocalTalk = 11,
  LocalNet = 12,
  Ultra_Link = 13,
  SMDS = 14,
  Frame_Relay = 15,
  ATM = 16,
  HDLC = 17,
  Fibre_Channel = 18,
  ATM_2 = 19,
  Serial_Line = 20,
  ATM_3 = 21,
  MIL_STD_188_220 = 22,
  Metricom = 23,
  IEEE_1394_1995 = 24,
  MAPOS = 25,
  Twinaxial = 26,
  EUI_64 = 27,
  HIPARP = 28,
  IP_and_ARP_over_ISO_7816_3 = 29,
  ARP_over_Fibre_Channel_FC = 30,
  IBM_System_Network_Architecture_SNA = 31
}

type ARP_PTYPE = enum {
  IPv4 = 0x0800,
  ARP = 0x0806,
  RARP = 0x0835,
  Wake_on_LAN = 0x0842,
  TRILL = 0x22F3,
  IPv6 = 0x86DD
}

type ARP_OPER = enum {
  Request = 1,
  Reply = 2,
  Request_Reverse = 3,
  Reply_Reverse = 4
}

type ARP = struct {
  htype: ARP_HTYPE,
  ptype: ARP_PTYPE,
  hlen: uint8,
  plen: uint8,
  oper: ARP_OPER,
  sha: bytes,
  spa: bytes,
  tha: bytes,
  tpa: bytes
};

let arp_parser = parser ARP {
  htype: parse ARP_HTYPE,
  ptype: parse ARP_PTYPE,
  hlen: parse uint8,
  plen: parse uint8,
  oper: parse ARP_OPER,
  sha: parse bytes(hlen),
  spa: parse bytes(plen),
  tha: parse bytes(hlen),
  tpa: parse bytes(plen)
};