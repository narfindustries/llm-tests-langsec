module PNG;

type PNGSignature = unit {
    signature: bytes &size=8;
} &check=(self.signature == "\x89PNG\r\n\x1a\n");

type Chunk = unit {
    length: uint32;
    type: string &size=4;
    data: bytes &size=self.length;
    crc: uint32;
};

type IHDR = unit {
    width: uint32;
    height: uint32;
    bit_depth: uint8;
    color_type: uint8;
    compression_method: uint8;
    filter_method: uint8;
    interlace_method: uint8;
} &check=(self.compression_method == 0 && self.filter_method == 0 && (self.interlace_method == 0 || self.interlace_method == 1));

type PLTE = unit {
    entries: array of RGBEntry &size=(self.$parent.length / 3);
};

type RGBEntry = unit {
    red: uint8;
    green: uint8;
    blue: uint8;
};

type IDAT = unit {
    data: bytes &size=self.length;
};

type IEND = unit {
    # No data
};

type tRNS = unit {
    data: bytes &size=self.length;
};

type cHRM = unit {
    white_point_x: uint32;
    white_point_y: uint32;
    red_x: uint32;
    red_y: uint32;
    green_x: uint32;
    green_y: uint32;
    blue_x: uint32;
    blue_y: uint32;
};

type gAMA = unit {
    gamma: uint32;
};

type iCCP = unit {
    profile_name: string &until="\0";
    compression_method: uint8;
    compressed_profile: bytes &size=(self.$parent.length - (self.profile_name.size() + 2));
};

type sBIT = unit {
    significant_bits: bytes &size=self.length;
};

type sRGB = unit {
    rendering_intent: uint8;
};

type tEXt = unit {
    keyword: string &until="\0";
    text: string &size=(self.$parent.length - (self.keyword.size() + 1));
};

type zTXt = unit {
    keyword: string &until="\0";
    compression_method: uint8;
    compressed_text: bytes &size=(self.$parent.length - (self.keyword.size() + 2));
};

type iTXt = unit {
    compressed: uint8;
    compression_method: uint8;
    language_tag: string &until="\0";
    translated_keyword: string &until="\0";
    text: string &size=(self.$parent.length - (self.language_tag.size() + self.translated_keyword.size() + 5));
};

type bKGD = unit {
    data: bytes &size=self.length;
};

type pHYs = unit {
    pixels_per_unit_x: uint32;
    pixels_per_unit_y: uint32;
    unit_specifier: uint8;
};

type sPLT = unit {
    palette_name: string &until="\0";
    sample_depth: uint8;
    entries: array of PaletteEntry &size=((self.$parent.length - (self.palette_name.size() + 2)) / (if self.sample_depth == 8 then 6 else 10));
};

type PaletteEntry = unit {
    red: uint8;
    green: uint8;
    blue: uint8;
    alpha: uint8;
    frequency: uint16;
};

type hIST = unit {
    frequencies: array of uint16 &size=(self.$parent.length / 2);
};

type tIME = unit {
    year: uint16;
    month: uint8;
    day: uint8;
    hour: uint8;
    minute: uint8;
    second: uint8;
};

type PNGFile = unit {
    signature: PNGSignature;
    chunks: array of Chunk &until=eod();
};