module PNG-Image;

type png_signature = bytes:8;

type png_chunk_header = record {
    length: uint32;
    type: bytes:4;
};

type png_ihdr = record {
    width: uint32;
    height: uint32;
    bit_depth: uint8;
    color_type: uint8;
    compression_method: uint8;
    filter_method: uint8;
    interlace_method: uint8;
};

type png_idat = record {
    data: bytes;
};

type png_plte = record {
    palette: array of record { red: uint8, green: uint8, blue: uint8 };
};

type png_trns = record {
    alpha: oneof {
        bytes:1,
        array of uint16
    };
};

type png_gama = record {
    gamma: uint32;
};

type png_chrm = record {
    white_point_x: uint32;
    white_point_y: uint32;
    red_x: uint32;
    red_y: uint32;
    green_x: uint32;
    green_y: uint32;
    blue_x: uint32;
    blue_y: uint32;
};

type png_sbit = record {
    significant_bits: array of uint8;
};

type png_srgb = record {
    rendering_intent: uint8;
};

type png_iccp = record {
    profile_name: string;
    compressed_profile: bytes;
};

type png_bkgd = record {
    background_color: oneof {
        uint16,
        array of uint8
    };
};

type png_hist = record {
    histogram: array of uint16;
};

type png_phys = record {
    pixels_per_unit_x: uint32;
    pixels_per_unit_y: uint32;
    unit_specifier: uint8;
};

type png_text = record {
    keyword: string;
    text: string;
};

type png_ztxt = record {
    keyword: string;
    compressed_text: bytes;
};

type png_itxt = record {
    keyword: string;
    compression_flag: uint8;
    compression_method: uint8;
    language_tag: string;
    translated_keyword: string;
    text: bytes;
};

type png_time = record {
    year: uint16;
    month: uint8;
    day: uint8;
    hour: uint8;
    minute: uint8;
    second: uint8;
};

type png_chunk_data = oneof {
    png_ihdr,
    png_idat,
    png_plte,
    png_trns,
    png_gama,
    png_chrm,
    png_sbit,
    png_srgb,
    png_iccp,
    png_bkgd,
    png_hist,
    png_phys,
    png_text,
    png_ztxt,
    png_itxt,
    png_time,
    bytes
};

type png_chunk = record {
    header: png_chunk_header;
    data: png_chunk_data;
    crc: uint32;
};

type png_image = record {
    signature: png_signature;
    chunks: array of png_chunk;
};
end
