module DICOM;

public type Header = unit {
    preamble: bytes &size=128;
    prefix: bytes &size=4;
    
    var is_valid: bool;

    on %init {
        self.is_valid = self.prefix == b"DICM";
    }
};

type DataElement = unit {
    tag_group: uint16;
    tag_element: uint16;
    vr: bytes &size=2 if (self.tag_group != 0xFFFE);
    length: uint16 if (self.tag_group != 0xFFFE && self.is_explicit_vr);
    length_32: uint32 if (self.tag_group != 0xFFFE && !self.is_explicit_vr);
    value: bytes &size=self.value_length;

    var explicit_vr: bool;
    var value_length: uint32;

    on %init {
        self.explicit_vr = True;
        self.value_length = 0;
    }

    on vr {
        if ( self.tag_group != 0xFFFE ) {
            self.explicit_vr = (self.vr == b"OB" || self.vr == b"OW" || 
                               self.vr == b"OF" || self.vr == b"SQ" || 
                               self.vr == b"UT" || self.vr == b"UN");
        }
    }

    on length {
        if ( self.explicit_vr )
            self.value_length = self.length;
    }

    on length_32 {
        if ( !self.explicit_vr || self.tag_group == 0xFFFE )
            self.value_length = self.length_32;
    }
};

type SequenceItem = unit {
    tag: uint32;
    length: uint32;
    data_elements: DataElement[];
};

type Sequence = unit {
    items: SequenceItem[];
};

public type DICOM = unit {
    header: Header;
    data_elements: DataElement[] if (self.header.is_valid);
};

on DICOM::data_elements {
    event dicom_element(self.tag_group, self.tag_element, self.vr, self.value);
}