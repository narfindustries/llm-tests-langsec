module HL7;

type MSH = unit {
    fieldSeparator: bytes &size=1;
    encodingCharacters: bytes &size=4;
    sendingApplication: string &optional;
    sendingFacility: string &optional;
    receivingApplication: string &optional;
    receivingFacility: string &optional;
    dateTimeOfMessage: string &optional;
    security: string &optional;
    messageType: string;
    messageControlID: string;
    processingID: string;
    versionID: string;
    sequenceNumber: string &optional;
    continuationPointer: string &optional;
    acceptAcknowledgmentType: string &optional;
    applicationAcknowledgmentType: string &optional;
    countryCode: string &optional;
    characterSet: string &optional;
    principalLanguageOfMessage: string &optional;
    alternateCharacterSetHandlingScheme: string &optional;
    messageProfileIdentifier: string &optional;
};

type PID = unit {
    setID: string &optional;
    patientID: string &optional;
    patientIdentifierList: string &optional;
    alternatePatientID: string &optional;
    patientName: string &optional;
    motherMaidenName: string &optional;
    dateTimeOfBirth: string &optional;
    sex: string &optional;
    patientAlias: string &optional;
    race: string &optional;
    patientAddress: string &optional;
    countyCode: string &optional;
    phoneNumberHome: string &optional;
    phoneNumberBusiness: string &optional;
    primaryLanguage: string &optional;
    maritalStatus: string &optional;
    religion: string &optional;
    patientAccountNumber: string &optional;
    ssnNumber: string &optional;
    driverLicenseNumber: string &optional;
    motherIdentifier: string &optional;
    ethnicGroup: string &optional;
    birthPlace: string &optional;
    multipleBirthIndicator: string &optional;
    birthOrder: string &optional;
    citizenship: string &optional;
    veteransMilitaryStatus: string &optional;
    nationality: string &optional;
    patientDeathDateAndTime: string &optional;
    patientDeathIndicator: string &optional;
};

type HL7Message = unit {
    msh: MSH;
    segments: Segment(self.msh.fieldSeparator)[] &eod;
};

type Segment = unit(separator: bytes) {
    segType: bytes &size=3;
    content: switch {
        self.segType == b"MSH": msh: MSH;
        self.segType == b"PID": pid: PID;
        default: data: bytes &restofdata;
    };
};

public type File = unit {
    messages: HL7Message[];
};