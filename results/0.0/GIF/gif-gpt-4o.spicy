module GIF;

type GIF = unit {
    header: Header;
    logical_screen_descriptor: LogicalScreenDescriptor;
    global_color_table: array<ColorTableEntry> &size=(logical_screen_descriptor.global_color_table_flag ? (3 * (1 << (logical_screen_descriptor.global_color_table_size + 1))) : 0);
    blocks: array<Block> &until=$input.length() == 0;
    trailer: uint8 &assert=trailer == 0x3B;
};

type Header = unit {
    signature: bytes &length=3 &assert=signature == "GIF";
    version: bytes &length=3 &assert=version == "89a" || version == "87a";
};

type LogicalScreenDescriptor = unit {
    width: uint16;
    height: uint16;
    packed_fields: PackedFields;
    background_color_index: uint8;
    pixel_aspect_ratio: uint8;
};

type PackedFields = bitfield {
    global_color_table_flag: bool;
    color_resolution: uint8 &bits=3;
    sort_flag: bool;
    global_color_table_size: uint8 &bits=3;
};

type ColorTableEntry = unit {
    red: uint8;
    green: uint8;
    blue: uint8;
};

type Block = unit {
    block_type: uint8 &switch (block_type) {
        0x2C => image_descriptor: ImageDescriptor,
        0x21 => extension: Extension,
    };
};

type ImageDescriptor = unit {
    left_position: uint16;
    top_position: uint16;
    width: uint16;
    height: uint16;
    packed_fields: ImagePackedFields;
    local_color_table: array<ColorTableEntry> &size=(packed_fields.local_color_table_flag ? (3 * (1 << (packed_fields.local_color_table_size + 1))) : 0);
    image_data: ImageData;
};

type ImagePackedFields = bitfield {
    local_color_table_flag: bool;
    interlace_flag: bool;
    sort_flag: bool;
    reserved: uint8 &bits=2;
    local_color_table_size: uint8 &bits=3;
};

type ImageData = unit {
    lzw_minimum_code_size: uint8;
    data_blocks: array<DataBlock> &until=data_blocks[$].size == 0;
};

type DataBlock = unit {
    size: uint8;
    data: bytes &length=size;
};

type Extension = unit {
    label: uint8 &switch (label) {
        0xF9 => graphic_control_extension: GraphicControlExtension,
        0xFE => comment_extension: CommentExtension,
        0x01 => plain_text_extension: PlainTextExtension,
        0xFF => application_extension: ApplicationExtension,
    };
};

type GraphicControlExtension = unit {
    block_size: uint8 &assert=block_size == 4;
    packed_fields: GraphicControlPackedFields;
    delay_time: uint16;
    transparent_color_index: uint8;
    terminator: uint8 &assert=terminator == 0;
};

type GraphicControlPackedFields = bitfield {
    reserved: uint8 &bits=3;
    disposal_method: uint8 &bits=3;
    user_input_flag: bool;
    transparent_color_flag: bool;
};

type CommentExtension = unit {
    comment_data: array<DataBlock> &until=comment_data[$].size == 0;
};

type PlainTextExtension = unit {
    block_size: uint8 &assert=block_size == 12;
    text_grid_left_position: uint16;
    text_grid_top_position: uint16;
    text_grid_width: uint16;
    text_grid_height: uint16;
    character_cell_width: uint8;
    character_cell_height: uint8;
    text_foreground_color_index: uint8;
    text_background_color_index: uint8;
    plain_text_data: array<DataBlock> &until=plain_text_data[$].size == 0;
};

type ApplicationExtension = unit {
    block_size: uint8 &assert=block_size == 11;
    application_identifier: bytes &length=8;
    application_authentication_code: bytes &length=3;
    application_data: array<DataBlock> &until=application_data[$].size == 0;
};