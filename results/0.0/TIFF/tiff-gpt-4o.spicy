module TIFF;

type TIFF = unit {
    endianness: uint16 &convert=endianness_switch;
    magic: uint16 &assert=magic == 42;
    ifd_offset: uint32;

    ifds: vector<IFD> &restofdata;
};

type IFD = unit {
    num_entries: uint16;
    entries: array[num_entries] of IFDEntry;
    next_ifd_offset: uint32;
};

type IFDEntry = unit {
    tag: uint16;
    type: uint16;
    count: uint32;
    value_offset: uint32;

    parsed_value: switch(tag) {
        256 -> ImageWidth,
        257 -> ImageLength,
        258 -> BitsPerSample,
        259 -> Compression,
        262 -> PhotometricInterpretation,
        273 -> StripOffsets,
        277 -> SamplesPerPixel,
        278 -> RowsPerStrip,
        279 -> StripByteCounts,
        282 -> XResolution,
        283 -> YResolution,
        284 -> PlanarConfiguration,
        296 -> ResolutionUnit,
        305 -> Software,
        306 -> DateTime,
        315 -> Artist,
        316 -> HostComputer,
        320 -> ColorMap,
        322 -> TileWidth,
        323 -> TileLength,
        324 -> TileOffsets,
        325 -> TileByteCounts,
        338 -> ExtraSamples,
        339 -> SampleFormat,
        default -> bytes &length=4
    };
};

type ImageWidth = uint32;
type ImageLength = uint32;
type BitsPerSample = array of uint16 &size=1;
type Compression = uint16;
type PhotometricInterpretation = uint16;
type StripOffsets = array of uint32 &size=1;
type SamplesPerPixel = uint16;
type RowsPerStrip = uint32;
type StripByteCounts = array of uint32 &size=1;
type XResolution = rational;
type YResolution = rational;
type PlanarConfiguration = uint16;
type ResolutionUnit = uint16;
type Software = string &size=4;
type DateTime = string &size=4;
type Artist = string &size=4;
type HostComputer = string &size=4;
type ColorMap = array of uint16 &size=1;
type TileWidth = uint32;
type TileLength = uint32;
type TileOffsets = array of uint32 &size=1;
type TileByteCounts = array of uint32 &size=1;
type ExtraSamples = array of uint8 &size=1;
type SampleFormat = array of uint16 &size=1;

function endianness_switch(e: uint16) : bool {
    return e == 0x4949;
}

type rational = unit {
    numerator: uint32;
    denominator: uint32;
};