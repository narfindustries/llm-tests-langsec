module HTTP;

type HTTPMessage = unit {
    # Start line
    start_line: StartLine;

    # Headers
    headers: Headers;

    # Optional body
    body: bytes &optional &size=body_size;

    on %init {
        if ( headers.transfer_encoding == "chunked" ) {
            body_size = 0; # Chunked encoding, body size is determined by chunks
        }
        else if ( headers.content_length ) {
            body_size = headers.content_length;
        }
    }
};

type StartLine = unit {
    line: /[^\r\n]+/ &size=length;
    on %init {
        if ( line.startswith("HTTP/") ) {
            self = StartLine::Response(line);
        }
        else {
            self = StartLine::Request(line);
        }
    }
};

type StartLine::Request = unit {
    method: /[A-Z]+/;
    uri: /[^\s]+/;
    version: /HTTP\/\d\.\d/;
} &let { length = method.size() + 1 + uri.size() + 1 + version.size() };

type StartLine::Response = unit {
    version: /HTTP\/\d\.\d/;
    status_code: /[0-9]{3}/;
    reason_phrase: /[^\r\n]+/;
} &let { length = version.size() + 1 + status_code.size() + 1 + reason_phrase.size() };

type Headers = unit {
    fields: /[^\r\n]+/ &until=fields_done;
    fields_done: bool = /(\r\n\r\n|\n\n)/;

    on %done {
        for ( field in fields ) {
            local name, value = field.split(":", 2);
            name = name.trim().lower();
            value = value.trim();

            switch ( name ) {
                case "content-length":
                    content_length = to_int(value);
                    break;
                case "transfer-encoding":
                    transfer_encoding = value;
                    break;
                # Add more cases for other headers as needed
            }
        }
    }

    content_length: uint64 &optional;
    transfer_encoding: string &optional;
};

type HTTP = unit {
    message: HTTPMessage;
};