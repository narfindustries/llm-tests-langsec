module HTTP;

protocol analyzer HTTP {
    parse Packet;
};

type Packet = unit {
    request: Request;
    response: Response;
};

type Request = unit {
    method: bytes;
    uri: bytes;
    version: bytes;
    headers: Headers;
    body: bytes &optional;
};

type Response = unit {
    version: bytes;
    status_code: uint16;
    status_message: bytes;
    headers: Headers;
    body: bytes &optional;
};

type Headers = unit {
    fields: map<bytes, bytes>;
    
    # Request Headers
    accept: bytes &optional;
    accept_charset: bytes &optional;
    accept_encoding: bytes &optional;
    accept_language: bytes &optional;
    authorization: bytes &optional;
    host: bytes &optional;
    user_agent: bytes &optional;
    referer: bytes &optional;
    cookie: bytes &optional;

    # Response Headers
    content_type: bytes &optional;
    content_length: uint64 &optional;
    content_encoding: bytes &optional;
    server: bytes &optional;
    set_cookie: bytes &optional;

    # General Headers
    connection: bytes &optional;
    cache_control: bytes &optional;
    date: bytes &optional;
};