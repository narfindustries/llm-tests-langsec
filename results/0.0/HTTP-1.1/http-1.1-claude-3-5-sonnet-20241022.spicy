module HTTP;

import spicy;

type Version = unit {
    protocol: bytes &until(b" ") &convert=$$.upper();
    version: bytes &until(b"\r\n") &convert=$$.upper()
};

type Header = unit {
    name: bytes &until(b":") &convert=$$.upper();
    : /[ \t]*/;
    value: bytes &until(b"\r\n")
};

type StatusLine = unit {
    version: Version;
    status: uint16 &convert=StatusCode($$);
    : /[ \t]+/;
    reason: bytes &until(b"\r\n")
};

type RequestLine = unit {
    method: bytes &until(b" ") &convert=$$.upper();
    uri: bytes &until(b" ");
    version: Version
};

type Headers = unit {
    headers: Header[]
};

type Body = unit {
    data: bytes &size=self.content_length;

    var content_length: uint64;
};

public type Request = unit {
    request_line: RequestLine;
    headers: Headers;
    : b"\r\n";
    body: Body &if(self.has_body);

    var has_body: bool;
    var content_length: uint64;

    on %init {
        self.has_body = False;
        self.content_length = 0;
    }
};

public type Response = unit {
    status_line: StatusLine;
    headers: Headers;
    : b"\r\n";
    body: Body &if(self.has_body);

    var has_body: bool;
    var content_length: uint64;

    on %init {
        self.has_body = False;
        self.content_length = 0;
    }
};

type Method = enum {
    GET = 1,
    POST,
    PUT,
    DELETE,
    HEAD,
    OPTIONS,
    TRACE,
    CONNECT
};

type StatusCode = enum {
    CONTINUE = 100,
    SWITCHING_PROTOCOLS = 101,
    OK = 200,
    CREATED = 201,
    ACCEPTED = 202,
    NON_AUTHORITATIVE_INFORMATION = 203,
    NO_CONTENT = 204,
    RESET_CONTENT = 205,
    PARTIAL_CONTENT = 206,
    MULTIPLE_CHOICES = 300,
    MOVED_PERMANENTLY = 301,
    FOUND = 302,
    SEE_OTHER = 303,
    NOT_MODIFIED = 304,
    USE_PROXY = 305,
    TEMPORARY_REDIRECT = 307,
    BAD_REQUEST = 400,
    UNAUTHORIZED = 401,
    PAYMENT_REQUIRED = 402,
    FORBIDDEN = 403,
    NOT_FOUND = 404,
    METHOD_NOT_ALLOWED = 405,
    NOT_ACCEPTABLE = 406,
    PROXY_AUTHENTICATION_REQUIRED = 407,
    REQUEST_TIMEOUT = 408,
    CONFLICT = 409,
    GONE = 410,
    LENGTH_REQUIRED = 411,
    PRECONDITION_FAILED = 412,
    REQUEST_ENTITY_TOO_LARGE = 413,
    REQUEST_URI_TOO_LONG = 414,
    UNSUPPORTED_MEDIA_TYPE = 415,
    REQUESTED_RANGE_NOT_SATISFIABLE = 416,
    EXPECTATION_FAILED = 417,
    INTERNAL_SERVER_ERROR = 500,
    NOT_IMPLEMENTED = 501,
    BAD_GATEWAY = 502,
    SERVICE_UNAVAILABLE = 503,
    GATEWAY_TIMEOUT = 504,
    HTTP_VERSION_NOT_SUPPORTED = 505
};

public type HTTP = unit {
    is_request: bool &parse-from=input;
    message: Request &if(self.is_request) | Response &if(!self.is_request);

    on %init {
        self.is_request = True;
    }
};