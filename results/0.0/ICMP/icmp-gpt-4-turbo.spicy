module ICMP;

public type ICMPMessage = unit {
    type: uint8;
    code: uint8;
    checksum: uint16;
    rest_of_header: bytes &size=4;
    data: bytes &eod;

    switch (self.type) {
        on 0, 8 -> : ICMPEcho(self);
        on 3 -> : ICMPUnreachable(self);
        on 4, 5 -> : ICMPRedirect(self);
        on 11 -> : ICMPTimeExceeded(self);
        on 12 -> : ICMPParameterProblem(self);
        on 13, 14 -> : ICMPTimestamp(self);
        on 17, 18 -> : ICMPAddressMask(self);
    }
};

public type ICMPUnreachable = unit(msg: ICMPMessage) {
    unused: bytes &size=4;
    originalDatagram: bytes &eod;
};

public type ICMPTimeExceeded = unit(msg: ICMPMessage) {
    unused: bytes &size=4;
    originalDatagram: bytes &eod;
};

public type ICMPParameterProblem = unit(msg: ICMPMessage) {
    pointer: uint8;
    unused: bytes &size=3;
    originalDatagram: bytes &eod;
};

public type ICMPEcho = unit(msg: ICMPMessage) {
    identifier: uint16;
    sequenceNumber: uint16;
    data: bytes &eod;
};

public type ICMPRedirect = unit(msg: ICMPMessage) {
    gatewayInternetAddress: addr;
    originalDatagram: bytes &eod;
};

public type ICMPTimestamp = unit(msg: ICMPMessage) {
    identifier: uint16;
    sequenceNumber: uint16;
    originateTimestamp: uint32;
    receiveTimestamp: uint32;
    transmitTimestamp: uint32;
};

public type ICMPAddressMask = unit(msg: ICMPMessage) {
    identifier: uint16;
    sequenceNumber: uint16;
    addressMask: addr;
};