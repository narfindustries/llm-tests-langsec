module ICMP;

import spicy;

public type Header = unit {
    type_: uint8 be;
    code: uint8 be;
    checksum: uint16 be;

    var payload_length: uint32;

    switch ( self.type_ ) {
        8 -> {
            identifier: uint16 be;
            sequence_number: uint16 be;
            payload: bytes &length=(payload_length - 4);
        }

        0 -> {
            identifier: uint16 be;
            sequence_number: uint16 be;
            payload: bytes &length=(payload_length - 4);
        }

        3 -> {
            unused: uint32 be;
            original_datagram: bytes &length=(payload_length - 4);
        }

        11 -> {
            unused: uint32 be;
            original_datagram: bytes &length=(payload_length - 4);
        }

        5 -> {
            gateway_address: uint32 be;
            original_datagram: bytes &length=(payload_length - 4);
        }

        9 -> {
            number_of_addresses: uint8;
            address_entry_size: uint8;
            lifetime: uint16 be;
            addresses: bytes &length=(number_of_addresses * 4);
        }

        10 -> {
            reserved: uint32 be;
        }

        13 -> {
            identifier: uint16 be;
            sequence_number: uint16 be;
            originate_timestamp: uint32 be;
            receive_timestamp: uint32 be;
            transmit_timestamp: uint32 be;
        }

        14 -> {
            identifier: uint16 be;
            sequence_number: uint16 be;
            originate_timestamp: uint32 be;
            receive_timestamp: uint32 be;
            transmit_timestamp: uint32 be;
        }

        * -> {
            payload: bytes &length=(payload_length);
        }
    }

    %init {
        self.payload_length = |self| - 4;
    }
};