module ICMP;

type Type = uint8;
type Code = uint8;

type Message = struct {
  type: Type,
  code: Code,
  checksum: uint16,
  identifier: uint16,
  sequence_number: uint16,
  data: bytes,
  timestamp: uint32,
  information: uint32,
  unused: uint32,
  gateway_address: uint32,
  pointer: uint8,
  internet_header: bytes
}

type Parser = parser {
  message: Message
}

let type_values: Type = {
  0: "Echo_Reply",
  1: "Unassigned",
  2: "Unassigned",
  3: "Destination_Unreachable",
  4: "Source_Quench",
  5: "Redirect",
  6: "Alternate_Host_Address",
  7: "Unassigned",
  8: "Echo_Request",
  9: "Router_Advertisement",
  10: "Router_Solicitation",
  11: "Time_Exceeded",
  12: "Parameter_Problem",
  13: "Timestamp_Request",
  14: "Timestamp_Reply",
  15: "Information_Request",
  16: "Information_Reply"
}

let code_values: table[Type, Code] = {
  3: {
    0: "Network_Unreachable",
    1: "Host_Unreachable",
    2: "Protocol_Unreachable",
    3: "Port_Unreachable",
    4: "Fragmentation_Needed_and_Dont_Fragment_was_Set",
    5: "Source_Route_Failed"
  },
  5: {
    0: "Redirect_Datagrams_for_the_Network",
    1: "Redirect_Datagrams_for_the_Host",
    2: "Redirect_Datagrams_for_the_Type_of_Service_and_Network",
    3: "Redirect_Datagrams_for_the_Type_of_Service_and_Host"
  },
  11: {
    0: "Time_to_Live_Exceeded_in_Transit",
    1: "Fragment_Reassembly_Time_Exceeded"
  },
  12: {
    0: "Pointer_Indicates_the_Error",
    1: "Missing_a_Required_Option"
  }
}