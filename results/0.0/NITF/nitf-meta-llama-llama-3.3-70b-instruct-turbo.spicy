module NITF;

type FileHeader = record {
  fh: bytestring = "NITF";
  fver: bytestring;
  sys: bytestring;
  clas: enum { U, C, S, T };
  fcn: bytestring;
  fn: bytestring;
  ft: bytestring;
  clsy: bytestring;
  fco: uint16;
  fscn: bytestring;
  fdt: bytestring;
  ftm: bytestring;
  fhdl: uint32;
  hexf: bool;
  hexl: uint32;
}

type HeaderExtension = record {
  hexf: bool;
  hexl: uint32;
  data: bytestring;
}

type ImageSegment = record {
  iid: bytestring;
  icl: enum { U, C, S, T };
  icls: bytestring;
  icp: enum { NC, BC, CC };
  irep: enum { MON, COL, MUL };
  ipt: enum { INT, FLT, DBL };
  ipv: bytestring;
  idim: record {
    width: uint32;
    height: uint32;
  }
  ioff: uint32;
  idl: uint32;
  data: bytestring;
}

type GraphicSegment = record {
  gid: bytestring;
  gcl: enum { U, C, S, T };
  gcls: bytestring;
  gtp: enum { TXT, SYM, LIN };
  gdt: bytestring;
}

type TextSegment = record {
  tid: bytestring;
  tcl: enum { U, C, S, T };
  tcls: bytestring;
  tdt: bytestring;
}

type TrailerSegment = record {
  tid: bytestring = "TRE";
  trl: uint32;
}

type NITF = record {
  file_header: FileHeader;
  header_extension: optional HeaderExtension;
  image_segments: array ImageSegment;
  graphic_segments: array GraphicSegment;
  text_segments: array TextSegment;
  trailer: TrailerSegment;
}

let nitf_p = NITF;