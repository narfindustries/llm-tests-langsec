module NITF;

import spicy;

public type NITFFile = unit {
    header: NITFHeader;
    image_segments: ImageSegments;
};

type NITFHeader = unit {
    fhdr: bytes &size=9 &convert=$$.decode(spicy::Charset::ASCII);
    clevel: bytes &size=2 &convert=to_int($$.decode(spicy::Charset::ASCII));
    stype: bytes &size=1 &convert=$$.decode(spicy::Charset::ASCII);
    ostaid: bytes &size=10 &convert=$$.decode(spicy::Charset::ASCII);
    fl: bytes &size=10 &convert=to_int($$.decode(spicy::Charset::ASCII));
    encryp: bytes &size=1 &convert=to_int($$.decode(spicy::Charset::ASCII));
    
    security_group: SecurityGroup;
    standard_header_fields: StandardHeaderFields;
};

type SecurityGroup = unit {
    security_classification: bytes &size=1 &convert=$$.decode(spicy::Charset::ASCII);
    security_country_codes: bytes &size=2 &convert=$$.decode(spicy::Charset::ASCII);
    security_release_instructions: bytes &size=20 &convert=$$.decode(spicy::Charset::ASCII);
};

type StandardHeaderFields = unit {
    orig_creating_agency: bytes &size=10 &convert=$$.decode(spicy::Charset::ASCII);
    orig_mission_number: bytes &size=10 &convert=$$.decode(spicy::Charset::ASCII);
    title: bytes &size=80 &convert=$$.decode(spicy::Charset::ASCII);
};

type ImageSegments = unit {
    num_image_segments: bytes &size=3 &convert=to_int($$.decode(spicy::Charset::ASCII));
    image_headers: ImageHeader[];
};

type ImageHeader = unit {
    im: bytes &size=10 &convert=$$.decode(spicy::Charset::ASCII);
    isorce: bytes &size=42 &convert=$$.decode(spicy::Charset::ASCII);
    
    nrows: bytes &size=8 &convert=to_int($$.decode(spicy::Charset::ASCII));
    ncols: bytes &size=8 &convert=to_int($$.decode(spicy::Charset::ASCII));
    
    pvtype: bytes &size=3 &convert=$$.decode(spicy::Charset::ASCII);
    imode: bytes &size=1 &convert=$$.decode(spicy::Charset::ASCII);
    
    image_compression: ImageCompression;
    color_space: ColorSpace;
};

type ImageCompression = unit {
    compression_method: bytes &size=2 &convert=$$.decode(spicy::Charset::ASCII);
    compression_rate: bytes &size=4 &convert=to_int($$.decode(spicy::Charset::ASCII));
};

type ColorSpace = unit {
    color_mode: bytes &size=3 &convert=$$.decode(spicy::Charset::ASCII);
    number_of_bands: bytes &size=1 &convert=to_int($$.decode(spicy::Charset::ASCII));
};

public type NITFParser = unit {
    nitf_file: NITFFile;
};