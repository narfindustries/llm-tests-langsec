module SQLite3;

import spicy;

public type FileHeader = struct {
    magic: bytes &size=16 &validate=($$ == b"SQLite format 3\0");
    page_size: uint16 &validate=($$ >= 512 && $$ <= 65536 && ($$ & ($$ - 1)) == 0);
    write_version: uint8 &validate=($$ == 1 || $$ == 2);
    read_version: uint8 &validate=($$ == 1 || $$ == 2);
    reserved_space: uint8;
    max_embedded_payload_fraction: uint8;
    min_embedded_payload_fraction: uint8;
    leaf_payload_fraction: uint8;
    file_change_counter: uint32;
    database_size_pages: uint32;
    first_freelist_page: uint32;
    total_freelist_pages: uint32;
    schema_cookie: uint32;
    schema_format: uint32 &validate=($$ >= 1 && $$ <= 4);
    default_encoding: uint32 &validate=($$ >= 1 && $$ <= 3);
    user_version: uint32;
    incremental_vacuum_mode: uint32;
    application_id: uint32;
    reserved: bytes &size=20;
};

public type PageHeader = struct {
    page_type: uint8 &validate=($$ >= 2 && $$ <= 5);
    first_freeblock: uint16;
    cell_count: uint16;
    cell_content_offset: uint16;
    fragmented_free_bytes: uint8;
};

public type BTreePageHeader = struct {
    right_most_pointer: uint32;
};

public type CellHeader = struct {
    payload_size: uint64;
    row_id: uint64;
};

public type RecordHeader = struct {
    record_header_size: uint64;
    column_types: bytes;
};

public type SQLite3File = struct {
    header: FileHeader;
    pages: vector<Page>;
};

public type Page = struct {
    page_header: PageHeader;
    btree_header: BTreePageHeader &optional;
    cells: vector<Cell>;
};

public type Cell = struct {
    cell_header: CellHeader;
    record_header: RecordHeader;
    payload: bytes;
};

public type SQLite3 = unit {
    file: SQLite3File;

    parse = {
        self.file = new SQLite3File;
        self.file.header = parse FileHeader(input[0:100]);
        
        local page_size = self.file.header.page_size;
        local current_offset = 100;

        while (current_offset < |input|) {
            local page = parse Page(input[current_offset:current_offset+page_size]);
            self.file.pages.push_back(page);
            current_offset += page_size;
        }
    }
};