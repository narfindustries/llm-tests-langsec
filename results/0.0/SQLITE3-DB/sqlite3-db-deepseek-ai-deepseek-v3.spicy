module SQLITE3;

public type Header = unit {
    magic_string: bytes &size=16;
    page_size: uint16;
    write_version: uint8;
    read_version: uint8;
    reserved_space: uint8;
    max_payload_fraction: uint8;
    min_payload_fraction: uint8;
    leaf_payload_fraction: uint8;
    file_change_counter: uint32;
    db_size_in_pages: uint32;
    first_freelist_trunk_page: uint32;
    num_freelist_pages: uint32;
    schema_cookie: uint32;
    schema_format_number: uint32;
    default_page_cache_size: uint32;
    largest_root_b_tree_page: uint32;
    text_encoding: uint32;
    user_version: uint32;
    incremental_vacuum_mode: uint32;
    application_id: uint32;
    reserved: bytes &size=20;
    version_valid_for: uint32;
    sqlite_version_number: uint32;
};

public type PageType = enum {
    B_TREE_LEAF = 0x0D;
    B_TREE_INTERIOR = 0x05;
    FREELIST_TRUNK = 0x02;
    FREELIST_LEAF = 0x05;
    PAYLOAD_OVERFLOW = 0x06;
    POINTER_MAP = 0x07;
};

public type TypeCode = enum {
    NULL = 0;
    INT8 = 1;
    INT16 = 2;
    INT24 = 3;
    INT32 = 4;
    INT48 = 5;
    INT64 = 6;
    FLOAT = 7;
    ZERO = 8;
    ONE = 9;
    RESERVED1 = 10;
    RESERVED2 = 11;
    BLOB = 12;
    TEXT = 13;
};

public type RecordHeader = unit {
    header_size: varint;
    type_codes: TypeCode[] &until=$$.header_size;
};

public type Record = unit {
    header: RecordHeader;
    payload: bytes &size=$$.header.header_size;
};

public type FreelistTrunk = unit {
    next_trunk_page: uint32;
    num_leaf_pages: uint32;
    leaf_page_numbers: uint32[] &until=$$.num_leaf_pages;
};

public type PointerMapEntry = unit {
    type: uint8;
    parent_page: uint32;
};

public type PointerMap = unit {
    entries: PointerMapEntry[] &until=$input.size() == 0;
};

public type Page = unit {
    page_type: PageType;
    content: case (page_type) of {
        B_TREE_LEAF -> b_tree_leaf: Record[];
        B_TREE_INTERIOR -> b_tree_interior: Record[];
        FREELIST_TRUNK -> freelist_trunk: FreelistTrunk;
        FREELIST_LEAF -> freelist_leaf: uint32[];
        PAYLOAD_OVERFLOW -> payload_overflow: bytes;
        POINTER_MAP -> pointer_map: PointerMap;
    };
};

public type SQLiteDB = unit {
    header: Header;
    pages: Page[] &until=$input.size() == 0;
};