module SQLite3_DB;

type SQLiteFileHeader = struct {
  magic: bytestring = "SQLite",
  pageSize: uint16,
  writeVersion: uint8,
  readVersion: uint8,
  reserved: uint8,
  maxEmbeddedPayloadFraction: uint8,
  minEmbeddedPayloadFraction: uint8,
  leafPayloadFraction: uint8,
  fileFormatWriteVersion: uint32,
  fileFormatReadVersion: uint32,
}

type SQLitePageHeader = struct {
  pageType: uint8,
  firstFreeblock: uint16,
  cellOffset: uint16,
  defragmentedPageSize: uint16,
  numberOfCells: uint16,
}

type SQLiteCell = struct {
  payloadLength: varint,
  headerLength: varint,
  numColumns: uint8,
  columnData: bytestring,
  payload: bytestring,
}

type SQLiteBTreeCell = struct {
  leftChildPage: uint32,
  rowid: uint32,
  payloadLength: varint,
  payload: bytestring,
}

type SQLiteBTreeInteriorCell = struct {
  leftChildPage: uint32,
  key: bytestring,
  payloadLength: varint,
  payload: bytestring,
}

type SQLiteBTreeLeafCell = struct {
  rowid: uint32,
  payloadLength: varint,
  payload: bytestring,
}

type SQLiteOverflowPage = struct {
  nextOverflowPage: uint32,
  data: bytestring,
}

type SQLiteFreePage = struct {
  nextFreePage: uint32,
  data: bytestring,
}

type SQLiteMasterJournalHeader = struct {
  magic: bytestring = "\xd9\xd5\x05\xf9",
  version: uint32,
  pageCount: uint32,
  sectorSize: uint32,
  pageSize: uint32,
  reserved: bytestring,
}

type SQLiteMasterJournalPage = struct {
  pageNumber: uint32,
  data: bytestring,
}

type SQLiteWALHeader = struct {
  magic: bytestring = "\x02\x00\x00\x00",
  fileFormatVersion: uint32,
  pageSize: uint32,
  checkpointSequence: uint32,
  salt1: uint32,
  salt2: uint32,
  checksum1: uint32,
  checksum2: uint32,
}

type SQLiteWALFrame = struct {
  pageNumber: uint32,
  beforeImage: bytestring,
  afterImage: bytestring,
  commit: uint8,
}

type SQLiteDB = struct {
  fileHeader: SQLiteFileHeader,
  pages: array,
}

type SQLitePage = struct {
  pageHeader: SQLitePageHeader,
  cells: array,
}

type SQLiteBTreePage = struct {
  pageHeader: SQLitePageHeader,
  cells: array,
}

type SQLiteBTreeInteriorPage = struct {
  pageHeader: SQLitePageHeader,
  cells: array,
}

type SQLiteBTreeLeafPage = struct {
  pageHeader: SQLitePageHeader,
  cells: array,
}

type SQLiteOverflowPages = struct {
  pages: array,
}

type SQLiteFreePages = struct {
  pages: array,
}

type SQLiteMasterJournal = struct {
  header: SQLiteMasterJournalHeader,
  pages: array,
}

type SQLiteWAL = struct {
  header: SQLiteWALHeader,
  frames: array,
}

let sqlite3_db = SQLiteDB;