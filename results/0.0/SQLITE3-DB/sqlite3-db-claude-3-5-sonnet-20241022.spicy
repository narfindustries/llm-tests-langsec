module SQLite3;

public type Database = unit {
    magic: bytes &size=16;
    page_size: uint16;
    file_format_write_version: uint8;
    file_format_read_version: uint8;
    reserved_space: uint8;
    max_payload_fraction: uint8;
    min_payload_fraction: uint8;
    leaf_payload_fraction: uint8;
    file_change_counter: uint32;
    db_size_pages: uint32;
    first_freelist_trunk_page: uint32;
    freelist_pages_count: uint32;
    schema_cookie: uint32;
    schema_format: uint32;
    default_page_cache_size: uint32;
    largest_root_btree_page: uint32;
    text_encoding: uint32;
    user_version: uint32;
    incremental_vacuum: uint32;
    application_id: uint32;
    reserved: bytes &size=20;
    version_valid_for: uint32;
    sqlite_version: uint32;
    pages: Page[] &eod;
};

type Page = unit {
    page_type: uint8;
    data: PageData;

    on page_type {
        self.data.type_code = self.page_type;
    }
};

type PageData = unit {
    var type_code: uint8;
    
    btree_interior_index: BTreeInteriorIndex if type_code == 0x02;
    btree_interior_table: BTreeInteriorTable if type_code == 0x05;
    btree_leaf_index: BTreeLeafIndex if type_code == 0x0a;
    btree_leaf_table: BTreeLeafTable if type_code == 0x0d;
    overflow: OverflowPage if type_code == 0x00;
};

type BTreePageHeader = unit {
    first_freeblock: uint16;
    cell_count: uint16;
    cell_content_offset: uint16;
    fragmented_free_bytes: uint8;
    right_child: uint32 if self.parent.parent.type_code == 0x02 || self.parent.parent.type_code == 0x05;
};

type BTreeInteriorIndex = unit {
    header: BTreePageHeader;
    cells: BTreeInteriorIndexCell[header.cell_count];
};

type BTreeInteriorTable = unit {
    header: BTreePageHeader;
    cells: BTreeInteriorTableCell[header.cell_count];
};

type BTreeLeafIndex = unit {
    header: BTreePageHeader;
    cells: BTreeLeafIndexCell[header.cell_count];
};

type BTreeLeafTable = unit {
    header: BTreePageHeader;
    cells: BTreeLeafTableCell[header.cell_count];
};

type OverflowPage = unit {
    data: bytes &eod;
};

type Varint = unit {
    value: bytes &until=($$ & 0x80) == 0;
};

type BTreeInteriorIndexCell = unit {
    page_number: uint32;
    key: Varint;
};

type BTreeInteriorTableCell = unit {
    page_number: uint32;
    key: Varint;
};

type BTreeLeafIndexCell = unit {
    payload_size: Varint;
    payload: bytes &size=self.payload_size;
};

type BTreeLeafTableCell = unit {
    payload_size: Varint;
    row_id: Varint;
    payload: Record;
};

type Record = unit {
    header_size: Varint;
    serial_types: Varint[];
    values: RecordValue[|serial_types|];
};

type RecordValue = unit {
    var serial_type: uint64;
    value: bytes &size=self.get_size();
    
    function get_size(): uint64 {
        if ( self.serial_type == 0 ) return 0;
        if ( self.serial_type == 1 ) return 1;
        if ( self.serial_type == 2 ) return 2;
        if ( self.serial_type == 3 ) return 3;
        if ( self.serial_type == 4 ) return 4;
        if ( self.serial_type == 5 ) return 6;
        if ( self.serial_type == 6 ) return 8;
        if ( self.serial_type == 7 ) return 8;
        if ( self.serial_type == 8 ) return 0;
        if ( self.serial_type == 9 ) return 0;
        if ( self.serial_type >= 12 && (self.serial_type % 2) == 0 )
            return (self.serial_type - 12) / 2;
        if ( self.serial_type >= 13 && (self.serial_type % 2) == 1 )
            return (self.serial_type - 13) / 2;
        return 0;
    }
};

type FreelistTrunkPage = unit {
    next_trunk_page: uint32;
    leaf_count: uint32;
    leaf_pages: uint32[leaf_count];
};

type PtrMapEntry = unit {
    type: uint8;
};