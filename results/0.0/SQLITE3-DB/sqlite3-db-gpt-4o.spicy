module SQLite;

type SQLiteHeader = unit {
    header_string: bytes &size=16 &check=(self.header_string == "SQLite format 3\000");
    page_size: uint16 &check=(self.page_size == 1 || (self.page_size >= 512 && self.page_size <= 65536 && (self.page_size & (self.page_size - 1)) == 0));
    write_version: uint8 &check=(self.write_version == 1 || self.write_version == 2);
    read_version: uint8 &check=(self.read_version == 1 || self.read_version == 2);
    reserved_space: uint8;
    max_embedded_payload_fraction: uint8 &check=(self.max_embedded_payload_fraction == 64);
    min_embedded_payload_fraction: uint8 &check=(self.min_embedded_payload_fraction == 32);
    leaf_payload_fraction: uint8 &check=(self.leaf_payload_fraction == 32);
    file_change_counter: uint32;
    database_size_in_pages: uint32;
    first_freelist_trunk_page: uint32;
    total_freelist_pages: uint32;
    schema_cookie: uint32;
    schema_format_number: uint32 &check=(self.schema_format_number >= 1 && self.schema_format_number <= 4);
    default_page_cache_size: uint32;
    largest_root_btree_page_number: uint32;
    text_encoding: uint32 &check=(self.text_encoding == 1 || self.text_encoding == 2 || self.text_encoding == 3);
    user_version: uint32;
    incremental_vacuum_mode: uint32 &check=(self.incremental_vacuum_mode == 0 || self.incremental_vacuum_mode == 1);
    application_id: uint32;
    reserved_for_expansion: bytes &size=20 &check=(self.reserved_for_expansion == "\x00" * 20);
    version_valid_for_number: uint32;
    sqlite_version_number: uint32;
};

type SQLiteFile = unit {
    header: SQLiteHeader;
    # Additional parsing for pages and other structures can be added here.
};