module SQLite;

type SQLiteHeader = unit {
    magic: bytes &size=16;
    pageSize: uint16;
    writeVersion: uint8;
    readVersion: uint8;
    reservedSpace: uint8;
    maxPayloadFrac: uint8;
    minPayloadFrac: uint8;
    leafPayloadFrac: uint8;
    fileChangeCounter: uint32;
    numPages: uint32;
    firstFreelistPage: uint32;
    numFreelistPages: uint32;
    schemaCookie: uint32;
    schemaFormat: uint32;
    defaultCacheSize: uint32;
    largestRootPage: uint32;
    textEncoding: uint32;
    userVersion: uint32;
    incrementalVacuumMode: uint32;
    applicationId: uint32;
    reserved: bytes &size=20;
    versionValidFor: uint32;
    sqliteVersion: uint32;
};

type BTreePageHeader = unit {
    pageType: uint8;
    firstFreeblock: uint16;
    numCells: uint16;
    cellContentOffset: uint16;
    numFragmentedFreeBytes: uint8;
    rightmostPointer: uint32 &optional;
};

type CellPointer = unit {
    offset: uint16;
};

type RecordHeader = unit {
    headerLength: uint64;
    columnTypes: bytes &eod;
};

type Record = unit {
    header: RecordHeader;
    data: bytes &size=this.header.headerLength;
};

type BTreeLeafPage = unit {
    header: BTreePageHeader;
    cellPointers: CellPointer[] &size=this.header.numCells;
    cells: Record[] &size=this.header.numCells;
};

type BTreeInteriorPage = unit {
    header: BTreePageHeader;
    cellPointers: CellPointer[] &size=this.header.numCells;
    cells: uint32[] &size=this.header.numCells;  // Pointers to child pages
};

type OverflowPage = unit {
    nextPage: uint32;
    data: bytes &rest;
};

type SQLitePage = unit {
    header: BTreePageHeader;
    content: switch (this.header.pageType) {
        2, 5 -> BTreeInteriorPage;
        10, 13 -> BTreeLeafPage;
        default -> bytes &rest;
    };
};

type SQLiteDB = unit {
    header: SQLiteHeader;
    pages: SQLitePage[] &size=(this.header.numPages - 1);
};