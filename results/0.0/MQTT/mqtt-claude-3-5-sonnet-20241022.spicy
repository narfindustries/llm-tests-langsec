module MQTT;

public type FixedHeader = unit {
    packet_bits: bitfield(8) {
        ptype: 4..7;
        flags: 0..3;
    };
    remaining_length: VarInt;

    var packet_type: uint8;
    on packet_bits {
        self.packet_type = self.packet_bits.ptype;
    }

    switch ( self.packet_type ) {
        1 -> connect: CONNECT;
        2 -> connack: CONNACK;
        3 -> publish: PUBLISH;
        4 -> puback: PUBACK;
        5 -> pubrec: PUBREC;
        6 -> pubrel: PUBREL;
        7 -> pubcomp: PUBCOMP;
        8 -> subscribe: SUBSCRIBE;
        9 -> suback: SUBACK;
        10 -> unsubscribe: UNSUBSCRIBE;
        11 -> unsuback: UNSUBACK;
        12 -> pingreq: PINGREQ;
        13 -> pingresp: PINGRESP;
        14 -> disconnect: DISCONNECT;
        15 -> auth: AUTH;
    };
};

type VarInt = unit {
    var value: uint64 = 0;
    var i: uint8 = 0;
    var byte: uint8;

    : bytes &until=(self.byte & 0x80 == 0) {
        self.byte = self.input();
        if ( self.i < 4 ) {
            self.value = (self.value << 7) + (self.byte & 0x7F);
            self.i += 1;
        }
    }
};

type UTF8String = unit {
    length: uint16;
    value: bytes &size=self.length;
};

type Properties = unit {
    length: VarInt;
    properties: bytes &size=self.length.value;
};

type CONNECT = unit {
    protocol_name: UTF8String;
    protocol_version: uint8;
    connect_flags: bitfield(8) {
        username: 7;
        password: 6;
        will_retain: 5;
        will_qos: 3..4;
        will_flag: 2;
        clean_start: 1;
        reserved: 0;
    };
    keep_alive: uint16;
    properties: Properties;
    client_id: UTF8String;
    will_properties: Properties if (self.connect_flags.will_flag == 1);
    will_topic: UTF8String if (self.connect_flags.will_flag == 1);
    will_payload: bytes &eod if (self.connect_flags.will_flag == 1);
    username: UTF8String if (self.connect_flags.username == 1);
    password: UTF8String if (self.connect_flags.password == 1);
};

type CONNACK = unit {
    connack_flags: bitfield(8) {
        session_present: 0;
        reserved: 1..7;
    };
    reason_code: uint8;
    properties: Properties;
};

type PUBLISH = unit {
    var qos: uint8;
    topic: UTF8String;
    packet_id: uint16 if (self.qos > 0);
    properties: Properties;
    payload: bytes &eod;

    on %init {
        self.qos = self.context.connection.fixed_header.packet_bits.flags;
    }
};

type PUBACK = unit {
    packet_id: uint16;
    reason_code: uint8;
    properties: Properties;
};

type PUBREC = unit {
    packet_id: uint16;
    reason_code: uint8;
    properties: Properties;
};

type PUBREL = unit {
    packet_id: uint16;
    reason_code: uint8;
    properties: Properties;
};

type PUBCOMP = unit {
    packet_id: uint16;
    reason_code: uint8;
    properties: Properties;
};

type SUBSCRIBE = unit {
    packet_id: uint16;
    properties: Properties;
    topics: bytes &eod;
};

type SUBACK = unit {
    packet_id: uint16;
    properties: Properties;
    return_codes: bytes &eod;
};

type UNSUBSCRIBE = unit {
    packet_id: uint16;
    properties: Properties;
    topics: bytes &eod;
};

type UNSUBACK = unit {
    packet_id: uint16;
    properties: Properties;
    reason_codes: bytes &eod;
};

type PINGREQ = unit {};

type PINGRESP = unit {};

type DISCONNECT = unit {
    reason_code: uint8;
    properties: Properties;
};

type AUTH = unit {
    reason_code: uint8;
    properties: Properties;
};